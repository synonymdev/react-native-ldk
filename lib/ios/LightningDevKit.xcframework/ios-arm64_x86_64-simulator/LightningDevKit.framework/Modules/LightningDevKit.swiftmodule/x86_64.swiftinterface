// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LightningDevKit
import Darwin.C
import Darwin
import Foundation
@_exported import LightningDevKit
import Swift
import _Concurrency
public typealias HTLCDestination = LightningDevKit.Bindings.HTLCDestination
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCDestination : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum HTLCDestinationType {
      case NextHopChannel
      case UnknownNextHop
      case InvalidForward
      case FailedPayment
      public static func == (a: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType, b: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType
    public class func initWithNextHopChannel(nodeId: [Swift.UInt8], channelId: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithUnknownNextHop(requestedForwardScid: Swift.UInt64) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithInvalidForward(requestedForwardScid: Swift.UInt64) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithFailedPayment(paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public class func eq(a: LightningDevKit.Bindings.HTLCDestination, b: LightningDevKit.Bindings.HTLCDestination) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public func getValueAsNextHopChannel() -> LightningDevKit.Bindings.HTLCDestination.NextHopChannel?
    public func getValueAsUnknownNextHop() -> LightningDevKit.Bindings.HTLCDestination.UnknownNextHop?
    public func getValueAsInvalidForward() -> LightningDevKit.Bindings.HTLCDestination.InvalidForward?
    public func getValueAsFailedPayment() -> LightningDevKit.Bindings.HTLCDestination.FailedPayment?
    @objc deinit
    @_hasMissingDesignatedInitializers public class NextHopChannel : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getChannelId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UnknownNextHop : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getRequestedForwardScid() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class InvalidForward : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getRequestedForwardScid() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FailedPayment : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias DelayedPaymentKey = LightningDevKit.Bindings.DelayedPaymentKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DelayedPaymentKey : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public class func initWith(aArg: [Swift.UInt8]) -> LightningDevKit.Bindings.DelayedPaymentKey
    public class func eq(a: LightningDevKit.Bindings.DelayedPaymentKey, b: LightningDevKit.Bindings.DelayedPaymentKey) -> Swift.Bool
    public class func initWithBasepoint(countersignatoryBasepoint: LightningDevKit.Bindings.DelayedPaymentBasepoint, perCommitmentPoint: [Swift.UInt8]) -> LightningDevKit.Bindings.DelayedPaymentKey
    public class func initWithSecretKey(sk: [Swift.UInt8]) -> LightningDevKit.Bindings.DelayedPaymentKey
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_DelayedPaymentKeyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SiPrefixBolt11ParseErrorZ = LightningDevKit.Bindings.Result_SiPrefixBolt11ParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SiPrefixBolt11ParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SiPrefix) -> LightningDevKit.Bindings.Result_SiPrefixBolt11ParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt11ParseError) -> LightningDevKit.Bindings.Result_SiPrefixBolt11ParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt11ParseError?
    public func getValue() -> LightningDevKit.Bindings.SiPrefix?
    @objc deinit
  }
}
public typealias Result_ChannelInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelInfo) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelInfo?
    @objc deinit
  }
}
public typealias Result_DelayedPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DelayedPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    @objc deinit
  }
}
public typealias InvoiceRequest = LightningDevKit.Bindings.InvoiceRequest
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceRequest : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func chains() -> [[Swift.UInt8]]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func paths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity
    public func signingPubkey() -> [Swift.UInt8]
    public func payerMetadata() -> [Swift.UInt8]
    public func chain() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64?
    public func invoiceRequestFeatures() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func signature() -> [Swift.UInt8]
    public func verify(key: LightningDevKit.Bindings.ExpandedKey) -> LightningDevKit.Bindings.Result_VerifiedInvoiceRequestNoneZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TransactionNoneZ = LightningDevKit.Bindings.Result_TransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias CounterpartyChannelTransactionParameters = LightningDevKit.Bindings.CounterpartyChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func setPubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func getSelectedContestDelay() -> Swift.UInt16
    public func setSelectedContestDelay(val: Swift.UInt16)
    public init(pubkeysArg: LightningDevKit.Bindings.ChannelPublicKeys, selectedContestDelayArg: Swift.UInt16)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters, b: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NodeAnnouncementInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAnnouncementInfo) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncementInfo?
    @objc deinit
  }
}
public typealias Result_MaxDustHTLCExposureDecodeErrorZ = LightningDevKit.Bindings.Result_MaxDustHTLCExposureDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_MaxDustHTLCExposureDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.MaxDustHTLCExposure) -> LightningDevKit.Bindings.Result_MaxDustHTLCExposureDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_MaxDustHTLCExposureDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.MaxDustHTLCExposure?
    @objc deinit
  }
}
public typealias TxRemoveOutput = LightningDevKit.Bindings.TxRemoveOutput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxRemoveOutput : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSerialId() -> Swift.UInt64
    public func setSerialId(val: Swift.UInt64)
    public init(channelIdArg: [Swift.UInt8], serialIdArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxRemoveOutput, b: LightningDevKit.Bindings.TxRemoveOutput) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxRemoveOutputDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias FailureCode = LightningDevKit.Bindings.FailureCode
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FailureCode : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum FailureCodeType {
      case TemporaryNodeFailure
      case RequiredNodeFeatureMissing
      case IncorrectOrUnknownPaymentDetails
      case InvalidOnionPayload
      public static func == (a: LightningDevKit.Bindings.FailureCode.FailureCodeType, b: LightningDevKit.Bindings.FailureCode.FailureCodeType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.FailureCode.FailureCodeType
    public class func initWithTemporaryNodeFailure() -> LightningDevKit.Bindings.FailureCode
    public class func initWithRequiredNodeFeatureMissing() -> LightningDevKit.Bindings.FailureCode
    public class func initWithIncorrectOrUnknownPaymentDetails() -> LightningDevKit.Bindings.FailureCode
    public class func initWithInvalidOnionPayload(a: (Swift.UInt64, Swift.UInt16)?) -> LightningDevKit.Bindings.FailureCode
    public func getValueAsInvalidOnionPayload() -> (Swift.UInt64, Swift.UInt16)??
    @objc deinit
  }
}
public typealias SignerProvider = LightningDevKit.Bindings.SignerProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class SignerProvider : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func generateChannelKeysId(inbound: Swift.Bool, channelValueSatoshis: Swift.UInt64, userChannelId: [Swift.UInt8]) -> [Swift.UInt8]
    open func deriveChannelSigner(channelValueSatoshis: Swift.UInt64, channelKeysId: [Swift.UInt8]) -> LightningDevKit.Bindings.WriteableEcdsaChannelSigner
    open func readChanSigner(reader: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_WriteableEcdsaChannelSignerDecodeErrorZ
    open func getDestinationScript(channelKeysId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
    open func getShutdownScriptpubkey() -> LightningDevKit.Bindings.Result_ShutdownScriptNoneZ
    @objc deinit
  }
}
public typealias Result_FundingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingSigned?
    @objc deinit
  }
}
public typealias Result_COption_ClosureReasonZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_ClosureReasonZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ClosureReason?) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosureReason?
    @objc deinit
  }
}
public typealias Bolt11Invoice = LightningDevKit.Bindings.Bolt11Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt11Invoice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.Bolt11Invoice, b: LightningDevKit.Bindings.Bolt11Invoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func signableHash() -> [Swift.UInt8]
    public func intoSignedRaw() -> LightningDevKit.Bindings.SignedRawBolt11Invoice
    public func checkSignature() -> LightningDevKit.Bindings.Result_NoneBolt11SemanticErrorZ
    public class func fromSigned(signedInvoice: LightningDevKit.Bindings.SignedRawBolt11Invoice) -> LightningDevKit.Bindings.Result_Bolt11InvoiceBolt11SemanticErrorZ
    public func timestamp() -> Swift.UInt64
    public func durationSinceEpoch() -> Swift.UInt64
    public func paymentHash() -> [Swift.UInt8]?
    public func payeePubKey() -> [Swift.UInt8]?
    public func paymentSecret() -> [Swift.UInt8]?
    public func paymentMetadata() -> [Swift.UInt8]?
    public func features() -> LightningDevKit.Bindings.Bolt11InvoiceFeatures?
    public func recoverPayeePubKey() -> [Swift.UInt8]
    public func expiresAt() -> Swift.UInt64?
    public func expiryTime() -> Swift.UInt64
    public func isExpired() -> Swift.Bool
    public func durationUntilExpiry() -> Swift.UInt64
    public func expirationRemainingFromEpoch(time: Swift.UInt64) -> Swift.UInt64
    public func wouldExpire(atTime: Swift.UInt64) -> Swift.Bool
    public func minFinalCltvExpiryDelta() -> Swift.UInt64
    public func fallbackAddresses() -> [Swift.String]
    public func privateRoutes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func routeHints() -> [LightningDevKit.Bindings.RouteHint]
    public func currency() -> LightningDevKit.Bindings.Currency
    public func amountMilliSatoshis() -> Swift.UInt64?
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_Bolt11InvoiceParseOrSemanticErrorZ
    public func toStr() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CandidateRouteHop = LightningDevKit.Bindings.CandidateRouteHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CandidateRouteHop : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum CandidateRouteHopType {
      case FirstHop
      case PublicHop
      case PrivateHop
      case Blinded
      case OneHopBlinded
      public static func == (a: LightningDevKit.Bindings.CandidateRouteHop.CandidateRouteHopType, b: LightningDevKit.Bindings.CandidateRouteHop.CandidateRouteHopType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.CandidateRouteHop.CandidateRouteHopType
    public class func initWithFirstHop(a: LightningDevKit.Bindings.FirstHopCandidate) -> LightningDevKit.Bindings.CandidateRouteHop
    public class func initWithPublicHop(a: LightningDevKit.Bindings.PublicHopCandidate) -> LightningDevKit.Bindings.CandidateRouteHop
    public class func initWithPrivateHop(a: LightningDevKit.Bindings.PrivateHopCandidate) -> LightningDevKit.Bindings.CandidateRouteHop
    public class func initWithBlinded(a: LightningDevKit.Bindings.BlindedPathCandidate) -> LightningDevKit.Bindings.CandidateRouteHop
    public class func initWithOneHopBlinded(a: LightningDevKit.Bindings.OneHopBlindedPathCandidate) -> LightningDevKit.Bindings.CandidateRouteHop
    public func globallyUniqueShortChannelId() -> Swift.UInt64?
    public func cltvExpiryDelta() -> Swift.UInt32
    public func htlcMinimumMsat() -> Swift.UInt64
    public func fees() -> LightningDevKit.Bindings.RoutingFees
    public func source() -> LightningDevKit.Bindings.NodeId
    public func target() -> LightningDevKit.Bindings.NodeId?
    public func getValueAsFirstHop() -> LightningDevKit.Bindings.FirstHopCandidate?
    public func getValueAsPublicHop() -> LightningDevKit.Bindings.PublicHopCandidate?
    public func getValueAsPrivateHop() -> LightningDevKit.Bindings.PrivateHopCandidate?
    public func getValueAsBlinded() -> LightningDevKit.Bindings.BlindedPathCandidate?
    public func getValueAsOneHopBlinded() -> LightningDevKit.Bindings.OneHopBlindedPathCandidate?
    @objc deinit
  }
}
public typealias Result_ShutdownScriptInvalidShutdownScriptZ = LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptInvalidShutdownScriptZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public class func initWithErr(e: LightningDevKit.Bindings.InvalidShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.InvalidShutdownScript?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    @objc deinit
  }
}
public typealias ChannelHandshakeLimits = LightningDevKit.Bindings.ChannelHandshakeLimits
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeLimits : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getMinFundingSatoshis() -> Swift.UInt64
    public func setMinFundingSatoshis(val: Swift.UInt64)
    public func getMaxFundingSatoshis() -> Swift.UInt64
    public func setMaxFundingSatoshis(val: Swift.UInt64)
    public func getMaxHtlcMinimumMsat() -> Swift.UInt64
    public func setMaxHtlcMinimumMsat(val: Swift.UInt64)
    public func getMinMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMinMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getMaxChannelReserveSatoshis() -> Swift.UInt64
    public func setMaxChannelReserveSatoshis(val: Swift.UInt64)
    public func getMinMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMinMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getMaxMinimumDepth() -> Swift.UInt32
    public func setMaxMinimumDepth(val: Swift.UInt32)
    public func getTrustOwnFunding0conf() -> Swift.Bool
    public func setTrustOwnFunding0conf(val: Swift.Bool)
    public func getForceAnnouncedChannelPreference() -> Swift.Bool
    public func setForceAnnouncedChannelPreference(val: Swift.Bool)
    public func getTheirToSelfDelay() -> Swift.UInt16
    public func setTheirToSelfDelay(val: Swift.UInt16)
    public init(minFundingSatoshisArg: Swift.UInt64, maxFundingSatoshisArg: Swift.UInt64, maxHtlcMinimumMsatArg: Swift.UInt64, minMaxHtlcValueInFlightMsatArg: Swift.UInt64, maxChannelReserveSatoshisArg: Swift.UInt64, minMaxAcceptedHtlcsArg: Swift.UInt16, maxMinimumDepthArg: Swift.UInt32, trustOwnFunding0confArg: Swift.Bool, forceAnnouncedChannelPreferenceArg: Swift.Bool, theirToSelfDelayArg: Swift.UInt16)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_AnnouncementSignaturesDecodeErrorZ = LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AnnouncementSignaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AnnouncementSignatures?
    @objc deinit
  }
}
public typealias TrustedCommitmentTransaction = LightningDevKit.Bindings.TrustedCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func txid() -> [Swift.UInt8]
    public func builtTransaction() -> LightningDevKit.Bindings.BuiltCommitmentTransaction
    public func keys() -> LightningDevKit.Bindings.TxCreationKeys
    public func channelTypeFeatures() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func getHtlcSigs(htlcBaseKey: [Swift.UInt8], channelParameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters, entropySource: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_CVec_ECDSASignatureZNoneZ
    public func revokeableOutputIndex() -> Swift.UInt?
    public func buildToLocalJusticeTx(feeratePerKw: Swift.UInt64, destinationScript: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InvalidShutdownScript = LightningDevKit.Bindings.InvalidShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvalidShutdownScript : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getScript() -> [Swift.UInt8]
    public func setScript(val: [Swift.UInt8])
    public init(scriptArg: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CounterpartyCommitmentSecretsDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyCommitmentSecretsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyCommitmentSecrets) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyCommitmentSecrets?
    @objc deinit
  }
}
public typealias SpendableOutputDescriptor = LightningDevKit.Bindings.SpendableOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SpendableOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum SpendableOutputDescriptorType {
      case StaticOutput
      case DelayedPaymentOutput
      case StaticPaymentOutput
      public static func == (a: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType, b: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType
    public class func initWithStaticOutput(outpoint: LightningDevKit.Bindings.OutPoint, output: LightningDevKit.Bindings.TxOut, channelKeysId: [Swift.UInt8]) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func initWithDelayedPaymentOutput(a: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func initWithStaticPaymentOutput(a: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.SpendableOutputDescriptor, b: LightningDevKit.Bindings.SpendableOutputDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public class func createSpendableOutputsPsbt(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], changeDestinationScript: [Swift.UInt8], feerateSatPer1000Weight: Swift.UInt32, locktime: Swift.UInt32?) -> LightningDevKit.Bindings.Result_C2Tuple_CVec_u8Zu64ZNoneZ
    public func getValueAsStaticOutput() -> LightningDevKit.Bindings.SpendableOutputDescriptor.StaticOutput?
    public func getValueAsDelayedPaymentOutput() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    public func getValueAsStaticPaymentOutput() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    @objc deinit
    @_hasMissingDesignatedInitializers public class StaticOutput : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
      public func getOutput() -> LightningDevKit.Bindings.TxOut
      public func getChannelKeysId() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias RawBolt11Invoice = LightningDevKit.Bindings.RawBolt11Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawBolt11Invoice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getData() -> LightningDevKit.Bindings.RawDataPart
    public func setData(val: LightningDevKit.Bindings.RawDataPart)
    public class func eq(a: LightningDevKit.Bindings.RawBolt11Invoice, b: LightningDevKit.Bindings.RawBolt11Invoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func signableHash() -> [Swift.UInt8]
    public func paymentHash() -> LightningDevKit.Bindings.Sha256?
    public func description() -> LightningDevKit.Bindings.Description?
    public func payeePubKey() -> LightningDevKit.Bindings.PayeePubKey?
    public func descriptionHash() -> LightningDevKit.Bindings.Sha256?
    public func expiryTime() -> LightningDevKit.Bindings.ExpiryTime?
    public func minFinalCltvExpiryDelta() -> LightningDevKit.Bindings.MinFinalCltvExpiryDelta?
    public func paymentSecret() -> [Swift.UInt8]?
    public func paymentMetadata() -> [Swift.UInt8]?
    public func features() -> LightningDevKit.Bindings.Bolt11InvoiceFeatures?
    public func privateRoutes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func amountPicoBtc() -> Swift.UInt64?
    public func currency() -> LightningDevKit.Bindings.Currency
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_MonitorEventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_MonitorEventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.MonitorEvent?) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.MonitorEvent?
    @objc deinit
  }
}
public typealias Result_UpdateAddHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateAddHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateAddHTLC) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateAddHTLC?
    @objc deinit
  }
}
public typealias PrivateHopCandidate = LightningDevKit.Bindings.PrivateHopCandidate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrivateHopCandidate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias GossipTimestampFilter = LightningDevKit.Bindings.GossipTimestampFilter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstTimestamp() -> Swift.UInt32
    public func setFirstTimestamp(val: Swift.UInt32)
    public func getTimestampRange() -> Swift.UInt32
    public func setTimestampRange(val: Swift.UInt32)
    public init(chainHashArg: [Swift.UInt8], firstTimestampArg: Swift.UInt32, timestampRangeArg: Swift.UInt32)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.GossipTimestampFilter, b: LightningDevKit.Bindings.GossipTimestampFilter) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_StrSecp256k1ErrorZ = LightningDevKit.Bindings.Result_StrSecp256k1ErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StrSecp256k1ErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: Swift.String) -> LightningDevKit.Bindings.Result_StrSecp256k1ErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_StrSecp256k1ErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> Swift.String?
    @objc deinit
  }
}
public typealias ChannelShutdownState = LightningDevKit.Bindings.ChannelShutdownState
extension LightningDevKit.Bindings {
  public enum ChannelShutdownState {
    case NotShuttingDown
    case ShutdownInitiated
    case ResolvingHTLCs
    case NegotiatingClosingFee
    case ShutdownComplete
    public static func == (a: LightningDevKit.Bindings.ChannelShutdownState, b: LightningDevKit.Bindings.ChannelShutdownState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias ScoreLookUp = LightningDevKit.Bindings.ScoreLookUp
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ScoreLookUp : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func channelPenaltyMsat(candidate: LightningDevKit.Bindings.CandidateRouteHop, usage: LightningDevKit.Bindings.ChannelUsage, scoreParams: LightningDevKit.Bindings.ProbabilisticScoringFeeParameters) -> Swift.UInt64
    @objc deinit
  }
}
public typealias WatchedOutput = LightningDevKit.Bindings.WatchedOutput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WatchedOutput : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getBlockHash() -> [Swift.UInt8]?
    public func setBlockHash(val: [Swift.UInt8]?)
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getScriptPubkey() -> [Swift.UInt8]
    public func setScriptPubkey(val: [Swift.UInt8])
    public init(blockHashArg: [Swift.UInt8]?, outpointArg: LightningDevKit.Bindings.OutPoint, scriptPubkeyArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.WatchedOutput, b: LightningDevKit.Bindings.WatchedOutput) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Network = LightningDevKit.Bindings.Network
extension LightningDevKit.Bindings {
  public enum Network {
    case Bitcoin
    case Testnet
    case Regtest
    case Signet
    public static func == (a: LightningDevKit.Bindings.Network, b: LightningDevKit.Bindings.Network) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Sha256 = LightningDevKit.Bindings.Sha256
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Sha256 : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Sha256, b: LightningDevKit.Bindings.Sha256) -> Swift.Bool
    public class func initWithBytes(bytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Sha256
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CounterpartyCommitmentSecrets = LightningDevKit.Bindings.CounterpartyCommitmentSecrets
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyCommitmentSecrets : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func getMinSeenSecret() -> Swift.UInt64
    public func provideSecret(idx: Swift.UInt64, secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func getSecret(idx: Swift.UInt64) -> [Swift.UInt8]?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TxRemoveOutputDecodeErrorZ = LightningDevKit.Bindings.Result_TxRemoveOutputDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxRemoveOutputDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxRemoveOutput) -> LightningDevKit.Bindings.Result_TxRemoveOutputDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxRemoveOutputDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxRemoveOutput?
    @objc deinit
  }
}
public typealias OnionMessage = LightningDevKit.Bindings.OnionMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getBlindingPoint() -> [Swift.UInt8]
    public func setBlindingPoint(val: [Swift.UInt8])
    public func getOnionRoutingPacket() -> LightningDevKit.Bindings.Packet
    public func setOnionRoutingPacket(val: LightningDevKit.Bindings.Packet)
    public init(blindingPointArg: [Swift.UInt8], onionRoutingPacketArg: LightningDevKit.Bindings.Packet)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.OnionMessage, b: LightningDevKit.Bindings.OnionMessage) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TxInitRbfDecodeErrorZ = LightningDevKit.Bindings.Result_TxInitRbfDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxInitRbfDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxInitRbf) -> LightningDevKit.Bindings.Result_TxInitRbfDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxInitRbfDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxInitRbf?
    @objc deinit
  }
}
public typealias UtxoFuture = LightningDevKit.Bindings.UtxoFuture
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UtxoFuture : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func resolveWithoutForwarding(graph: LightningDevKit.Bindings.NetworkGraph, result: LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ)
    public func resolve(graph: LightningDevKit.Bindings.NetworkGraph, gossip: LightningDevKit.Bindings.P2PGossipSync, result: LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelReestablish = LightningDevKit.Bindings.ChannelReestablish
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReestablish : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getNextLocalCommitmentNumber() -> Swift.UInt64
    public func setNextLocalCommitmentNumber(val: Swift.UInt64)
    public func getNextRemoteCommitmentNumber() -> Swift.UInt64
    public func setNextRemoteCommitmentNumber(val: Swift.UInt64)
    public func getYourLastPerCommitmentSecret() -> [Swift.UInt8]?
    public func setYourLastPerCommitmentSecret(val: [Swift.UInt8])
    public func getMyCurrentPerCommitmentPoint() -> [Swift.UInt8]
    public func setMyCurrentPerCommitmentPoint(val: [Swift.UInt8])
    public func getNextFundingTxid() -> [Swift.UInt8]?
    public func setNextFundingTxid(val: [Swift.UInt8]?)
    public init(channelIdArg: [Swift.UInt8], nextLocalCommitmentNumberArg: Swift.UInt64, nextRemoteCommitmentNumberArg: Swift.UInt64, yourLastPerCommitmentSecretArg: [Swift.UInt8], myCurrentPerCommitmentPointArg: [Swift.UInt8], nextFundingTxidArg: [Swift.UInt8]?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelReestablish, b: LightningDevKit.Bindings.ChannelReestablish) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BlindedFailureDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedFailureDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedFailureDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedFailure) -> LightningDevKit.Bindings.Result_BlindedFailureDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedFailureDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedFailure?
    @objc deinit
  }
}
public typealias ReceiveTlvs = LightningDevKit.Bindings.ReceiveTlvs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReceiveTlvs : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPaymentSecret() -> [Swift.UInt8]?
    public func setPaymentSecret(val: [Swift.UInt8])
    public func getPaymentConstraints() -> LightningDevKit.Bindings.PaymentConstraints
    public func setPaymentConstraints(val: LightningDevKit.Bindings.PaymentConstraints)
    public init(paymentSecretArg: [Swift.UInt8], paymentConstraintsArg: LightningDevKit.Bindings.PaymentConstraints)
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UnsignedChannelAnnouncement = LightningDevKit.Bindings.UnsignedChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getNodeId1() -> LightningDevKit.Bindings.NodeId
    public func setNodeId1(val: LightningDevKit.Bindings.NodeId)
    public func getNodeId2() -> LightningDevKit.Bindings.NodeId
    public func setNodeId2(val: LightningDevKit.Bindings.NodeId)
    public func getBitcoinKey1() -> LightningDevKit.Bindings.NodeId
    public func setBitcoinKey1(val: LightningDevKit.Bindings.NodeId)
    public func getBitcoinKey2() -> LightningDevKit.Bindings.NodeId
    public func setBitcoinKey2(val: LightningDevKit.Bindings.NodeId)
    public func getExcessData() -> [Swift.UInt8]
    public func setExcessData(val: [Swift.UInt8])
    public init(featuresArg: LightningDevKit.Bindings.ChannelFeatures, chainHashArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, nodeId1Arg: LightningDevKit.Bindings.NodeId, nodeId2Arg: LightningDevKit.Bindings.NodeId, bitcoinKey1Arg: LightningDevKit.Bindings.NodeId, bitcoinKey2Arg: LightningDevKit.Bindings.NodeId, excessDataArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UnsignedChannelAnnouncement, b: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentConstraintsDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentConstraintsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentConstraintsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentConstraints) -> LightningDevKit.Bindings.Result_PaymentConstraintsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentConstraintsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentConstraints?
    @objc deinit
  }
}
public typealias ReplyShortChannelIdsEnd = LightningDevKit.Bindings.ReplyShortChannelIdsEnd
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyShortChannelIdsEnd : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFullInformation() -> Swift.Bool
    public func setFullInformation(val: Swift.Bool)
    public init(chainHashArg: [Swift.UInt8], fullInformationArg: Swift.Bool)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ReplyShortChannelIdsEnd, b: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RefundBolt12ParseErrorZ = LightningDevKit.Bindings.Result_RefundBolt12ParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RefundBolt12ParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Refund) -> LightningDevKit.Bindings.Result_RefundBolt12ParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt12ParseError) -> LightningDevKit.Bindings.Result_RefundBolt12ParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt12ParseError?
    public func getValue() -> LightningDevKit.Bindings.Refund?
    @objc deinit
  }
}
public typealias HTLCClaim = LightningDevKit.Bindings.HTLCClaim
extension LightningDevKit.Bindings {
  public enum HTLCClaim {
    case OfferedTimeout
    case OfferedPreimage
    case AcceptedTimeout
    case AcceptedPreimage
    case Revocation
    public static func == (a: LightningDevKit.Bindings.HTLCClaim, b: LightningDevKit.Bindings.HTLCClaim) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_TransactionU16LenLimitedDecodeErrorZ = LightningDevKit.Bindings.Result_TransactionU16LenLimitedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TransactionU16LenLimitedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TransactionU16LenLimited) -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TransactionU16LenLimited?
    @objc deinit
  }
}
public typealias ChannelSigner = LightningDevKit.Bindings.ChannelSigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ChannelSigner : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(pubkeys: LightningDevKit.Bindings.ChannelPublicKeys)
    open func getPerCommitmentPoint(idx: Swift.UInt64) -> [Swift.UInt8]
    open func releaseCommitmentSecret(idx: Swift.UInt64) -> [Swift.UInt8]
    open func validateHolderCommitment(holderTx: LightningDevKit.Bindings.HolderCommitmentTransaction, outboundHtlcPreimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func validateCounterpartyRevocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func channelKeysId() -> [Swift.UInt8]
    open func provideChannelParameters(channelParameters: LightningDevKit.Bindings.ChannelTransactionParameters)
    public func getPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    @objc deinit
  }
}
public typealias DecodeError = LightningDevKit.Bindings.DecodeError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DecodeError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum DecodeErrorType {
      case UnknownVersion
      case UnknownRequiredFeature
      case InvalidValue
      case ShortRead
      case BadLengthDescriptor
      case Io
      case UnsupportedCompression
      public static func == (a: LightningDevKit.Bindings.DecodeError.DecodeErrorType, b: LightningDevKit.Bindings.DecodeError.DecodeErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.DecodeError.DecodeErrorType
    public class func initWithUnknownVersion() -> LightningDevKit.Bindings.DecodeError
    public class func initWithUnknownRequiredFeature() -> LightningDevKit.Bindings.DecodeError
    public class func initWithInvalidValue() -> LightningDevKit.Bindings.DecodeError
    public class func initWithShortRead() -> LightningDevKit.Bindings.DecodeError
    public class func initWithBadLengthDescriptor() -> LightningDevKit.Bindings.DecodeError
    public class func initWithIo(a: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.DecodeError
    public class func initWithUnsupportedCompression() -> LightningDevKit.Bindings.DecodeError
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.DecodeError, b: LightningDevKit.Bindings.DecodeError) -> Swift.Bool
    public func getValueAsIo() -> LightningDevKit.Bindings.IOError?
    @objc deinit
  }
}
public typealias MonitorUpdateId = LightningDevKit.Bindings.MonitorUpdateId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorUpdateId : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MonitorUpdateId, b: LightningDevKit.Bindings.MonitorUpdateId) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BindingsType = LightningDevKit.Bindings.BindingsType
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BindingsType : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func typeId() -> Swift.UInt16
    open func debugStr() -> Swift.String
    open func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias ScoreUpdate = LightningDevKit.Bindings.ScoreUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ScoreUpdate : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func paymentPathFailed(path: LightningDevKit.Bindings.Path, shortChannelId: Swift.UInt64, durationSinceEpoch: Swift.UInt64)
    open func paymentPathSuccessful(path: LightningDevKit.Bindings.Path, durationSinceEpoch: Swift.UInt64)
    open func probeFailed(path: LightningDevKit.Bindings.Path, shortChannelId: Swift.UInt64, durationSinceEpoch: Swift.UInt64)
    open func probeSuccessful(path: LightningDevKit.Bindings.Path, durationSinceEpoch: Swift.UInt64)
    open func timePassed(durationSinceEpoch: Swift.UInt64)
    @objc deinit
  }
}
public typealias Stfu = LightningDevKit.Bindings.Stfu
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Stfu : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getInitiator() -> Swift.UInt8
    public func setInitiator(val: Swift.UInt8)
    public init(channelIdArg: [Swift.UInt8], initiatorArg: Swift.UInt8)
    public class func eq(a: LightningDevKit.Bindings.Stfu, b: LightningDevKit.Bindings.Stfu) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StfuDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_u8ZNoneZ = LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_u8ZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias ProbabilisticScorer = LightningDevKit.Bindings.ProbabilisticScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScorer : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(decayParams: LightningDevKit.Bindings.ProbabilisticScoringDecayParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger)
    public func debugLogLiquidityStats()
    public func estimatedChannelLiquidityRange(scid: Swift.UInt64, target: LightningDevKit.Bindings.NodeId) -> (Swift.UInt64, Swift.UInt64)?
    public func historicalEstimatedChannelLiquidityProbabilities(scid: Swift.UInt64, target: LightningDevKit.Bindings.NodeId) -> ([Swift.UInt16], [Swift.UInt16])?
    public func historicalEstimatedPaymentSuccessProbability(scid: Swift.UInt64, target: LightningDevKit.Bindings.NodeId, amountMsat: Swift.UInt64, params: LightningDevKit.Bindings.ProbabilisticScoringFeeParameters) -> Swift.Double?
    public func asScoreLookUp() -> LightningDevKit.Bindings.ScoreLookUp
    public func asScoreUpdate() -> LightningDevKit.Bindings.ScoreUpdate
    public func asScore() -> LightningDevKit.Bindings.Score
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], argA: LightningDevKit.Bindings.ProbabilisticScoringDecayParameters, argB: LightningDevKit.Bindings.NetworkGraph, argC: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InMemorySigner = LightningDevKit.Bindings.InMemorySigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InMemorySigner : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFundingKey() -> [Swift.UInt8]?
    public func setFundingKey(val: [Swift.UInt8])
    public func getRevocationBaseKey() -> [Swift.UInt8]?
    public func setRevocationBaseKey(val: [Swift.UInt8])
    public func getPaymentKey() -> [Swift.UInt8]?
    public func setPaymentKey(val: [Swift.UInt8])
    public func getDelayedPaymentBaseKey() -> [Swift.UInt8]?
    public func setDelayedPaymentBaseKey(val: [Swift.UInt8])
    public func getHtlcBaseKey() -> [Swift.UInt8]?
    public func setHtlcBaseKey(val: [Swift.UInt8])
    public func getCommitmentSeed() -> [Swift.UInt8]?
    public func setCommitmentSeed(val: [Swift.UInt8])
    public init(fundingKey: [Swift.UInt8], revocationBaseKey: [Swift.UInt8], paymentKey: [Swift.UInt8], delayedPaymentBaseKey: [Swift.UInt8], htlcBaseKey: [Swift.UInt8], commitmentSeed: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, channelKeysId: [Swift.UInt8], randBytesUniqueStart: [Swift.UInt8])
    public func counterpartyPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys?
    public func counterpartySelectedContestDelay() -> Swift.UInt16?
    public func holderSelectedContestDelay() -> Swift.UInt16?
    public func isOutbound() -> Swift.Bool?
    public func fundingOutpoint() -> LightningDevKit.Bindings.OutPoint?
    public func getChannelParameters() -> LightningDevKit.Bindings.ChannelTransactionParameters?
    public func channelTypeFeatures() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func signCounterpartyPaymentInput(spendTx: [Swift.UInt8], inputIdx: Swift.UInt, descriptor: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_WitnessNoneZ
    public func signDynamicP2wshInput(spendTx: [Swift.UInt8], inputIdx: Swift.UInt, descriptor: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_WitnessNoneZ
    public func asEntropySource() -> LightningDevKit.Bindings.EntropySource
    public func asChannelSigner() -> LightningDevKit.Bindings.ChannelSigner
    public func asEcdsaChannelSigner() -> LightningDevKit.Bindings.EcdsaChannelSigner
    public func asWriteableEcdsaChannelSigner() -> LightningDevKit.Bindings.WriteableEcdsaChannelSigner
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Payee = LightningDevKit.Bindings.Payee
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Payee : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PayeeType {
      case Blinded
      case Clear
      public static func == (a: LightningDevKit.Bindings.Payee.PayeeType, b: LightningDevKit.Bindings.Payee.PayeeType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Payee.PayeeType
    public class func initWithBlinded(routeHints: [(LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)], features: LightningDevKit.Bindings.Bolt12InvoiceFeatures) -> LightningDevKit.Bindings.Payee
    public class func initWithClear(nodeId: [Swift.UInt8], routeHints: [LightningDevKit.Bindings.RouteHint], features: LightningDevKit.Bindings.Bolt11InvoiceFeatures, finalCltvExpiryDelta: Swift.UInt32) -> LightningDevKit.Bindings.Payee
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Payee, b: LightningDevKit.Bindings.Payee) -> Swift.Bool
    public func getValueAsBlinded() -> LightningDevKit.Bindings.Payee.Blinded?
    public func getValueAsClear() -> LightningDevKit.Bindings.Payee.Clear?
    @objc deinit
    @_hasMissingDesignatedInitializers public class Blinded : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getRouteHints() -> [(LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)]
      public func getFeatures() -> LightningDevKit.Bindings.Bolt12InvoiceFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Clear : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getRouteHints() -> [LightningDevKit.Bindings.RouteHint]
      public func getFeatures() -> LightningDevKit.Bindings.Bolt11InvoiceFeatures
      public func getFinalCltvExpiryDelta() -> Swift.UInt32
      @objc deinit
    }
  }
}
public typealias Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ = LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)]) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    public func getValue() -> [([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)]?
    @objc deinit
  }
}
public typealias HolderCommitmentTransaction = LightningDevKit.Bindings.HolderCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HolderCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getCounterpartySig() -> [Swift.UInt8]
    public func setCounterpartySig(val: [Swift.UInt8])
    public func getCounterpartyHtlcSigs() -> [[Swift.UInt8]]
    public func setCounterpartyHtlcSigs(val: [[Swift.UInt8]])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public init(commitmentTx: LightningDevKit.Bindings.CommitmentTransaction, counterpartySig: [Swift.UInt8], counterpartyHtlcSigs: [[Swift.UInt8]], holderFundingKey: [Swift.UInt8], counterpartyFundingKey: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PathFailure = LightningDevKit.Bindings.PathFailure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PathFailure : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PathFailureType {
      case InitialSend
      case OnPath
      public static func == (a: LightningDevKit.Bindings.PathFailure.PathFailureType, b: LightningDevKit.Bindings.PathFailure.PathFailureType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PathFailure.PathFailureType
    public class func initWithInitialSend(err: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.PathFailure
    public class func initWithOnPath(networkUpdate: LightningDevKit.Bindings.NetworkUpdate?) -> LightningDevKit.Bindings.PathFailure
    public class func eq(a: LightningDevKit.Bindings.PathFailure, b: LightningDevKit.Bindings.PathFailure) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_PathFailureZDecodeErrorZ
    public func getValueAsInitialSend() -> LightningDevKit.Bindings.PathFailure.InitialSend?
    public func getValueAsOnPath() -> LightningDevKit.Bindings.PathFailure.OnPath?
    @objc deinit
    @_hasMissingDesignatedInitializers public class InitialSend : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> LightningDevKit.Bindings.APIError
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OnPath : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNetworkUpdate() -> LightningDevKit.Bindings.NetworkUpdate?
      @objc deinit
    }
  }
}
public typealias InFlightHtlcs = LightningDevKit.Bindings.InFlightHtlcs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InFlightHtlcs : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func processPath(path: LightningDevKit.Bindings.Path, payerNodeId: [Swift.UInt8])
    public func addInflightHtlc(source: LightningDevKit.Bindings.NodeId, target: LightningDevKit.Bindings.NodeId, channelScid: Swift.UInt64, usedMsat: Swift.UInt64)
    public func usedLiquidityMsat(source: LightningDevKit.Bindings.NodeId, target: LightningDevKit.Bindings.NodeId, channelScid: Swift.UInt64) -> Swift.UInt64?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_StfuDecodeErrorZ = LightningDevKit.Bindings.Result_StfuDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StfuDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Stfu) -> LightningDevKit.Bindings.Result_StfuDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_StfuDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Stfu?
    @objc deinit
  }
}
public typealias Result_ClosingSignedFeeRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedFeeRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ClosingSignedFeeRange) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSignedFeeRange?
    @objc deinit
  }
}
public typealias DefaultMessageRouter = LightningDevKit.Bindings.DefaultMessageRouter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DefaultMessageRouter : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, entropySource: LightningDevKit.Bindings.EntropySource)
    public func asMessageRouter() -> LightningDevKit.Bindings.MessageRouter
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias EffectiveCapacity = LightningDevKit.Bindings.EffectiveCapacity
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class EffectiveCapacity : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum EffectiveCapacityType {
      case ExactLiquidity
      case AdvertisedMaxHTLC
      case Total
      case Infinite
      case HintMaxHTLC
      case Unknown
      public static func == (a: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType, b: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType
    public class func initWithExactLiquidity(liquidityMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithAdvertisedMaxHtlc(amountMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithTotal(capacityMsat: Swift.UInt64, htlcMaximumMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithInfinite() -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithHintMaxHtlc(amountMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithUnknown() -> LightningDevKit.Bindings.EffectiveCapacity
    public func asMsat() -> Swift.UInt64
    public func getValueAsExactLiquidity() -> LightningDevKit.Bindings.EffectiveCapacity.ExactLiquidity?
    public func getValueAsAdvertisedMaxHtlc() -> LightningDevKit.Bindings.EffectiveCapacity.AdvertisedMaxHTLC?
    public func getValueAsTotal() -> LightningDevKit.Bindings.EffectiveCapacity.Total?
    public func getValueAsHintMaxHtlc() -> LightningDevKit.Bindings.EffectiveCapacity.HintMaxHTLC?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ExactLiquidity : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getLiquidityMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class AdvertisedMaxHTLC : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Total : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getCapacityMsat() -> Swift.UInt64
      public func getHtlcMaximumMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HintMaxHTLC : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountMsat() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias Refund = LightningDevKit.Bindings.Refund
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Refund : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func absoluteExpiry() -> Swift.UInt64?
    public func isExpired() -> Swift.Bool
    public func isExpiredNoStd(durationSinceEpoch: Swift.UInt64) -> Swift.Bool
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func paths() -> [LightningDevKit.Bindings.BlindedPath]
    public func payerMetadata() -> [Swift.UInt8]
    public func chain() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64
    public func features() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func write() -> [Swift.UInt8]
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_RefundBolt12ParseErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OffersMessageHandler = LightningDevKit.Bindings.OffersMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class OffersMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func handleMessage(message: LightningDevKit.Bindings.OffersMessage) -> LightningDevKit.Bindings.OffersMessage?
    open func releasePendingMessages() -> [(LightningDevKit.Bindings.OffersMessage, LightningDevKit.Bindings.Destination, LightningDevKit.Bindings.BlindedPath)]
    @objc deinit
  }
}
public typealias Result_Bolt11InvoiceFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_Bolt11InvoiceFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_Bolt11InvoiceFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Bolt11InvoiceFeatures) -> LightningDevKit.Bindings.Result_Bolt11InvoiceFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_Bolt11InvoiceFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Bolt11InvoiceFeatures?
    @objc deinit
  }
}
public typealias ReplyChannelRange = LightningDevKit.Bindings.ReplyChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyChannelRange : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstBlocknum() -> Swift.UInt32
    public func setFirstBlocknum(val: Swift.UInt32)
    public func getNumberOfBlocks() -> Swift.UInt32
    public func setNumberOfBlocks(val: Swift.UInt32)
    public func getSyncComplete() -> Swift.Bool
    public func setSyncComplete(val: Swift.Bool)
    public func getShortChannelIds() -> [Swift.UInt64]
    public func setShortChannelIds(val: [Swift.UInt64])
    public init(chainHashArg: [Swift.UInt8], firstBlocknumArg: Swift.UInt32, numberOfBlocksArg: Swift.UInt32, syncCompleteArg: Swift.Bool, shortChannelIdsArg: [Swift.UInt64])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ReplyChannelRange, b: LightningDevKit.Bindings.ReplyChannelRange) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Hostname = LightningDevKit.Bindings.Hostname
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Hostname, b: LightningDevKit.Bindings.Hostname) -> Swift.Bool
    public func len() -> Swift.UInt8
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HostnameDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteParametersDecodeErrorZ = LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RouteParameters) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteParameters?
    @objc deinit
  }
}
public typealias Result_InitDecodeErrorZ = LightningDevKit.Bindings.Result_InitDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BindingsInit) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BindingsInit?
    @objc deinit
  }
}
public typealias ChannelMonitor = LightningDevKit.Bindings.ChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func write() -> [Swift.UInt8]
    public func updateMonitor(updates: LightningDevKit.Bindings.ChannelMonitorUpdate, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func getLatestUpdateId() -> Swift.UInt64
    public func getFundingTxo() -> (LightningDevKit.Bindings.OutPoint, [Swift.UInt8])
    public func getOutputsToWatch() -> [([Swift.UInt8], [(Swift.UInt32, [Swift.UInt8])])]
    public func loadOutputsToWatch(filter: LightningDevKit.Bindings.Filter, logger: LightningDevKit.Bindings.Logger)
    public func getAndClearPendingMonitorEvents() -> [LightningDevKit.Bindings.MonitorEvent]
    public func processPendingEvents(handler: LightningDevKit.Bindings.EventHandler)
    public func initialCounterpartyCommitmentTx() -> LightningDevKit.Bindings.CommitmentTransaction?
    public func counterpartyCommitmentTxsFromUpdate(update: LightningDevKit.Bindings.ChannelMonitorUpdate) -> [LightningDevKit.Bindings.CommitmentTransaction]
    public func signToLocalJusticeTx(justiceTx: [Swift.UInt8], inputIdx: Swift.UInt, value: Swift.UInt64, commitmentNumber: Swift.UInt64) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func getCounterpartyNodeId() -> [Swift.UInt8]?
    public func getLatestHolderCommitmentTxn(logger: LightningDevKit.Bindings.Logger) -> [[Swift.UInt8]]
    public func blockConnected(header: [Swift.UInt8], txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func blockDisconnected(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func transactionsConfirmed(header: [Swift.UInt8], txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func transactionUnconfirmed(txid: [Swift.UInt8], broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func bestBlockUpdated(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func getRelevantTxids() -> [([Swift.UInt8], Swift.UInt32, [Swift.UInt8]?)]
    public func currentBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func rebroadcastPendingClaims(broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func getSpendableOutputs(tx: [Swift.UInt8], confirmationHeight: Swift.UInt32) -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
    public func getClaimableBalances() -> [LightningDevKit.Bindings.Balance]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_WitnessNoneZ = LightningDevKit.Bindings.Result_WitnessNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_WitnessNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_WitnessNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_WitnessNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_NoneLightningErrorZ = LightningDevKit.Bindings.Result_NoneLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    @objc deinit
  }
}
public typealias VerifiedInvoiceRequest = LightningDevKit.Bindings.VerifiedInvoiceRequest
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class VerifiedInvoiceRequest : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getKeys() -> [Swift.UInt8]?
    public func setKeys(val: [Swift.UInt8]?)
    public func chains() -> [[Swift.UInt8]]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func paths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity
    public func signingPubkey() -> [Swift.UInt8]
    public func payerMetadata() -> [Swift.UInt8]
    public func chain() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64?
    public func invoiceRequestFeatures() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_ECDSASignatureZNoneZ = LightningDevKit.Bindings.Result_CVec_ECDSASignatureZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_ECDSASignatureZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_ECDSASignatureZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_ECDSASignatureZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [[Swift.UInt8]]?
    @objc deinit
  }
}
public typealias Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.ChannelManager)) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.ChannelManager)?
    @objc deinit
  }
}
public typealias PrivateRoute = LightningDevKit.Bindings.PrivateRoute
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrivateRoute : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PrivateRoute, b: LightningDevKit.Bindings.PrivateRoute) -> Swift.Bool
    public class func new(hops: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public func intoInner() -> LightningDevKit.Bindings.RouteHint
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_OnionMessagePathNoneZ = LightningDevKit.Bindings.Result_OnionMessagePathNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OnionMessagePathNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OnionMessagePath) -> LightningDevKit.Bindings.Result_OnionMessagePathNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_OnionMessagePathNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.OnionMessagePath?
    @objc deinit
  }
}
public typealias ChannelPublicKeys = LightningDevKit.Bindings.ChannelPublicKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelPublicKeys : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> LightningDevKit.Bindings.RevocationBasepoint
    public func setRevocationBasepoint(val: LightningDevKit.Bindings.RevocationBasepoint)
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> LightningDevKit.Bindings.DelayedPaymentBasepoint
    public func setDelayedPaymentBasepoint(val: LightningDevKit.Bindings.DelayedPaymentBasepoint)
    public func getHtlcBasepoint() -> LightningDevKit.Bindings.HtlcBasepoint
    public func setHtlcBasepoint(val: LightningDevKit.Bindings.HtlcBasepoint)
    public init(fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: LightningDevKit.Bindings.RevocationBasepoint, paymentPointArg: [Swift.UInt8], delayedPaymentBasepointArg: LightningDevKit.Bindings.DelayedPaymentBasepoint, htlcBasepointArg: LightningDevKit.Bindings.HtlcBasepoint)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelPublicKeys, b: LightningDevKit.Bindings.ChannelPublicKeys) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MonitorUpdatingPersister = LightningDevKit.Bindings.MonitorUpdatingPersister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorUpdatingPersister : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(kvStore: LightningDevKit.Bindings.KVStore, logger: LightningDevKit.Bindings.Logger, maximumPendingUpdates: Swift.UInt64, entropySource: LightningDevKit.Bindings.EntropySource, signerProvider: LightningDevKit.Bindings.SignerProvider)
    public func readAllChannelMonitorsWithUpdates(broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ
    public func readChannelMonitorWithUpdates(broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, monitorKey: Swift.String) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ
    public func cleanupStaleUpdates(lazy: Swift.Bool) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    public func asPersist() -> LightningDevKit.Bindings.Persist
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Balance = LightningDevKit.Bindings.Balance
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Balance : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum BalanceType {
      case ClaimableOnChannelClose
      case ClaimableAwaitingConfirmations
      case ContentiousClaimable
      case MaybeTimeoutClaimableHTLC
      case MaybePreimageClaimableHTLC
      case CounterpartyRevokedOutputClaimable
      public static func == (a: LightningDevKit.Bindings.Balance.BalanceType, b: LightningDevKit.Bindings.Balance.BalanceType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Balance.BalanceType
    public class func initWithClaimableOnChannelClose(amountSatoshis: Swift.UInt64) -> LightningDevKit.Bindings.Balance
    public class func initWithClaimableAwaitingConfirmations(amountSatoshis: Swift.UInt64, confirmationHeight: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func initWithContentiousClaimable(amountSatoshis: Swift.UInt64, timeoutHeight: Swift.UInt32, paymentHash: [Swift.UInt8], paymentPreimage: [Swift.UInt8]) -> LightningDevKit.Bindings.Balance
    public class func initWithMaybeTimeoutClaimableHtlc(amountSatoshis: Swift.UInt64, claimableHeight: Swift.UInt32, paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.Balance
    public class func initWithMaybePreimageClaimableHtlc(amountSatoshis: Swift.UInt64, expiryHeight: Swift.UInt32, paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.Balance
    public class func initWithCounterpartyRevokedOutputClaimable(amountSatoshis: Swift.UInt64) -> LightningDevKit.Bindings.Balance
    public class func eq(a: LightningDevKit.Bindings.Balance, b: LightningDevKit.Bindings.Balance) -> Swift.Bool
    public func claimableAmountSatoshis() -> Swift.UInt64
    public func getValueAsClaimableOnChannelClose() -> LightningDevKit.Bindings.Balance.ClaimableOnChannelClose?
    public func getValueAsClaimableAwaitingConfirmations() -> LightningDevKit.Bindings.Balance.ClaimableAwaitingConfirmations?
    public func getValueAsContentiousClaimable() -> LightningDevKit.Bindings.Balance.ContentiousClaimable?
    public func getValueAsMaybeTimeoutClaimableHtlc() -> LightningDevKit.Bindings.Balance.MaybeTimeoutClaimableHTLC?
    public func getValueAsMaybePreimageClaimableHtlc() -> LightningDevKit.Bindings.Balance.MaybePreimageClaimableHTLC?
    public func getValueAsCounterpartyRevokedOutputClaimable() -> LightningDevKit.Bindings.Balance.CounterpartyRevokedOutputClaimable?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ClaimableOnChannelClose : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ClaimableAwaitingConfirmations : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      public func getConfirmationHeight() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ContentiousClaimable : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      public func getTimeoutHeight() -> Swift.UInt32
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPaymentPreimage() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaybeTimeoutClaimableHTLC : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      public func getClaimableHeight() -> Swift.UInt32
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaybePreimageClaimableHTLC : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      public func getExpiryHeight() -> Swift.UInt32
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class CounterpartyRevokedOutputClaimable : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAmountSatoshis() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias Result_ChannelCounterpartyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelCounterpartyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelCounterparty) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelCounterparty?
    @objc deinit
  }
}
public typealias Result_NonePaymentSendFailureZ = LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    @objc deinit
  }
}
public typealias UnsignedInvoiceRequest = LightningDevKit.Bindings.UnsignedInvoiceRequest
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedInvoiceRequest : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func taggedHash() -> LightningDevKit.Bindings.TaggedHash
    public func chains() -> [[Swift.UInt8]]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func paths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity
    public func signingPubkey() -> [Swift.UInt8]
    public func payerMetadata() -> [Swift.UInt8]
    public func chain() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64?
    public func invoiceRequestFeatures() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_UnsignedChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement?
    @objc deinit
  }
}
public typealias Result_RevokeAndACKDecodeErrorZ = LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RevokeAndACKDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RevokeAndACK?
    @objc deinit
  }
}
public typealias Wallet = LightningDevKit.Bindings.Wallet
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Wallet : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(source: LightningDevKit.Bindings.WalletSource, logger: LightningDevKit.Bindings.Logger)
    public func asCoinSelectionSource() -> LightningDevKit.Bindings.CoinSelectionSource
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UnsignedChannelUpdate = LightningDevKit.Bindings.UnsignedChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getTimestamp() -> Swift.UInt32
    public func setTimestamp(val: Swift.UInt32)
    public func getFlags() -> Swift.UInt8
    public func setFlags(val: Swift.UInt8)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getExcessData() -> [Swift.UInt8]
    public func setExcessData(val: [Swift.UInt8])
    public init(chainHashArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, timestampArg: Swift.UInt32, flagsArg: Swift.UInt8, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64, htlcMaximumMsatArg: Swift.UInt64, feeBaseMsatArg: Swift.UInt32, feeProportionalMillionthsArg: Swift.UInt32, excessDataArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UnsignedChannelUpdate, b: LightningDevKit.Bindings.UnsignedChannelUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelDetailsDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelDetailsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelDetails) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelDetails?
    @objc deinit
  }
}
public typealias SignOrCreationError = LightningDevKit.Bindings.SignOrCreationError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignOrCreationError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum SignOrCreationErrorType {
      case SignError
      case CreationError
      public static func == (a: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType, b: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType
    public class func initWithSignError() -> LightningDevKit.Bindings.SignOrCreationError
    public class func initWithCreationError(a: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.SignOrCreationError
    public class func eq(a: LightningDevKit.Bindings.SignOrCreationError, b: LightningDevKit.Bindings.SignOrCreationError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsCreationError() -> LightningDevKit.Bindings.CreationError?
    @objc deinit
  }
}
public typealias TrustedClosingTransaction = LightningDevKit.Bindings.TrustedClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func builtTransaction() -> [Swift.UInt8]
    public func getSighashAll(fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func sign(fundingKey: [Swift.UInt8], fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_UntrustedStringDecodeErrorZ = LightningDevKit.Bindings.Result_UntrustedStringDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UntrustedStringDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UntrustedString) -> LightningDevKit.Bindings.Result_UntrustedStringDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UntrustedStringDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UntrustedString?
    @objc deinit
  }
}
public typealias SocketAddressParseError = LightningDevKit.Bindings.SocketAddressParseError
extension LightningDevKit.Bindings {
  public enum SocketAddressParseError {
    case SocketAddrParse
    case InvalidInput
    case InvalidPort
    case InvalidOnionV3
    public static func == (a: LightningDevKit.Bindings.SocketAddressParseError, b: LightningDevKit.Bindings.SocketAddressParseError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias RoutingMessageHandler = LightningDevKit.Bindings.RoutingMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class RoutingMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(messageSendEventsProvider: LightningDevKit.Bindings.MessageSendEventsProvider)
    open func handleNodeAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handleChannelAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handleChannelUpdate(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func getNextChannelAnnouncement(startingPoint: Swift.UInt64) -> (LightningDevKit.Bindings.ChannelAnnouncement, LightningDevKit.Bindings.ChannelUpdate, LightningDevKit.Bindings.ChannelUpdate)?
    open func getNextNodeAnnouncement(startingPoint: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.NodeAnnouncement
    open func peerConnected(theirNodeId: [Swift.UInt8], initArgument: LightningDevKit.Bindings.BindingsInit, inbound: Swift.Bool) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func handleReplyChannelRange(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleReplyShortChannelIdsEnd(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleQueryChannelRange(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleQueryShortChannelIds(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func processingQueueHigh() -> Swift.Bool
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    public func getMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    @objc deinit
  }
}
public typealias ShutdownScript = LightningDevKit.Bindings.ShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ShutdownScript : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.ShutdownScript, b: LightningDevKit.Bindings.ShutdownScript) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func initWithP2wpkh(pubkeyHash: [Swift.UInt8]) -> LightningDevKit.Bindings.ShutdownScript
    public class func initWithP2wsh(scriptHash: [Swift.UInt8]) -> LightningDevKit.Bindings.ShutdownScript
    public class func newWitnessProgram(witnessProgram: LightningDevKit.Bindings.WitnessProgram) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public func intoInner() -> [Swift.UInt8]
    public func asLegacyPubkey() -> [Swift.UInt8]?
    public func isCompatible(features: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelFeatures = LightningDevKit.Bindings.ChannelFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.ChannelFeatures, b: LightningDevKit.Bindings.ChannelFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.ChannelFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Router = LightningDevKit.Bindings.Router
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Router : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(messageRouter: LightningDevKit.Bindings.MessageRouter)
    open func findRoute(payer: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    open func findRouteWithId(payer: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs, paymentHash: [Swift.UInt8], paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    open func createBlindedPaymentPaths(recipient: [Swift.UInt8], firstHops: [LightningDevKit.Bindings.ChannelDetails], tlvs: LightningDevKit.Bindings.ReceiveTlvs, amountMsats: Swift.UInt64) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ
    public func getMessageRouter() -> LightningDevKit.Bindings.MessageRouter
    @objc deinit
  }
}
public typealias Result_COption_TypeZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_TypeZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BindingsType?) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BindingsType?
    @objc deinit
  }
}
public typealias NodeId = LightningDevKit.Bindings.NodeId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeId : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithPubkey(pubkey: [Swift.UInt8]) -> LightningDevKit.Bindings.NodeId
    public func asSlice() -> [Swift.UInt8]
    public func asArray() -> [Swift.UInt8]?
    public func asPubkey() -> LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Bolt11ParseError = LightningDevKit.Bindings.Bolt11ParseError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt11ParseError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum Bolt11ParseErrorType {
      case Bech32Error
      case ParseAmountError
      case MalformedSignature
      case BadPrefix
      case UnknownCurrency
      case UnknownSiPrefix
      case MalformedHRP
      case TooShortDataPart
      case UnexpectedEndOfTaggedFields
      case DescriptionDecodeError
      case PaddingError
      case IntegerOverflowError
      case InvalidSegWitProgramLength
      case InvalidPubKeyHashLength
      case InvalidScriptHashLength
      case InvalidRecoveryId
      case InvalidSliceLength
      case Skip
      public static func == (a: LightningDevKit.Bindings.Bolt11ParseError.Bolt11ParseErrorType, b: LightningDevKit.Bindings.Bolt11ParseError.Bolt11ParseErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Bolt11ParseError.Bolt11ParseErrorType
    public class func initWithBech32Error(a: LightningDevKit.Bindings.Bech32Error) -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithParseAmountError(a: LightningDevKit.Bindings.BindingsError) -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithMalformedSignature(a: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithBadPrefix() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithUnknownCurrency() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithUnknownSiPrefix() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithMalformedHrp() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithTooShortDataPart() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithUnexpectedEndOfTaggedFields() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithDescriptionDecodeError(a: LightningDevKit.Bindings.BindingsError) -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithPaddingError() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithIntegerOverflowError() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithInvalidSegWitProgramLength() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithInvalidPubKeyHashLength() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithInvalidScriptHashLength() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithInvalidRecoveryId() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithInvalidSliceLength(a: Swift.String) -> LightningDevKit.Bindings.Bolt11ParseError
    public class func initWithSkip() -> LightningDevKit.Bindings.Bolt11ParseError
    public class func eq(a: LightningDevKit.Bindings.Bolt11ParseError, b: LightningDevKit.Bindings.Bolt11ParseError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsBech32Error() -> LightningDevKit.Bindings.Bech32Error?
    public func getValueAsParseAmountError() -> LightningDevKit.Bindings.BindingsError?
    public func getValueAsMalformedSignature() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValueAsDescriptionDecodeError() -> LightningDevKit.Bindings.BindingsError?
    public func getValueAsInvalidSliceLength() -> Swift.String?
    @objc deinit
  }
}
public typealias Result_NoneBolt11SemanticErrorZ = LightningDevKit.Bindings.Result_NoneBolt11SemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneBolt11SemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneBolt11SemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt11SemanticError) -> LightningDevKit.Bindings.Result_NoneBolt11SemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt11SemanticError?
    @objc deinit
  }
}
public typealias HTLCDescriptor = LightningDevKit.Bindings.HTLCDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCDescriptor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelDerivationParameters() -> LightningDevKit.Bindings.ChannelDerivationParameters
    public func setChannelDerivationParameters(val: LightningDevKit.Bindings.ChannelDerivationParameters)
    public func getPerCommitmentNumber() -> Swift.UInt64
    public func setPerCommitmentNumber(val: Swift.UInt64)
    public func getPerCommitmentPoint() -> [Swift.UInt8]
    public func setPerCommitmentPoint(val: [Swift.UInt8])
    public func getFeeratePerKw() -> Swift.UInt32
    public func setFeeratePerKw(val: Swift.UInt32)
    public func getHtlc() -> LightningDevKit.Bindings.HTLCOutputInCommitment
    public func setHtlc(val: LightningDevKit.Bindings.HTLCOutputInCommitment)
    public func getPreimage() -> [Swift.UInt8]?
    public func setPreimage(val: [Swift.UInt8]?)
    public func getCounterpartySig() -> [Swift.UInt8]
    public func setCounterpartySig(val: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.HTLCDescriptor, b: LightningDevKit.Bindings.HTLCDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCDescriptorDecodeErrorZ
    public func outpoint() -> LightningDevKit.Bindings.OutPoint
    public func previousUtxo() -> LightningDevKit.Bindings.TxOut
    public func unsignedTxInput() -> LightningDevKit.Bindings.TxIn
    public func txOutput() -> LightningDevKit.Bindings.TxOut
    public func witnessScript() -> [Swift.UInt8]
    public func txInputWitness(signature: [Swift.UInt8], witnessScript: [Swift.UInt8]) -> [Swift.UInt8]
    public func deriveChannelSigner(signerProvider: LightningDevKit.Bindings.SignerProvider) -> LightningDevKit.Bindings.WriteableEcdsaChannelSigner
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias TxAddInput = LightningDevKit.Bindings.TxAddInput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxAddInput : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSerialId() -> Swift.UInt64
    public func setSerialId(val: Swift.UInt64)
    public func getPrevtx() -> LightningDevKit.Bindings.TransactionU16LenLimited
    public func setPrevtx(val: LightningDevKit.Bindings.TransactionU16LenLimited)
    public func getPrevtxOut() -> Swift.UInt32
    public func setPrevtxOut(val: Swift.UInt32)
    public func getSequence() -> Swift.UInt32
    public func setSequence(val: Swift.UInt32)
    public init(channelIdArg: [Swift.UInt8], serialIdArg: Swift.UInt64, prevtxArg: LightningDevKit.Bindings.TransactionU16LenLimited, prevtxOutArg: Swift.UInt32, sequenceArg: Swift.UInt32)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxAddInput, b: LightningDevKit.Bindings.TxAddInput) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxAddInputDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Record = LightningDevKit.Bindings.Record
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Record : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getLevel() -> LightningDevKit.Bindings.Level
    public func setLevel(val: LightningDevKit.Bindings.Level)
    public func getPeerId() -> [Swift.UInt8]?
    public func setPeerId(val: [Swift.UInt8])
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8]?)
    public func getArgs() -> Swift.String
    public func setArgs(val: Swift.String)
    public func getModulePath() -> Swift.String
    public func setModulePath(val: Swift.String)
    public func getFile() -> Swift.String
    public func setFile(val: Swift.String)
    public func getLine() -> Swift.UInt32
    public func setLine(val: Swift.UInt32)
    public init(levelArg: LightningDevKit.Bindings.Level, peerIdArg: [Swift.UInt8], channelIdArg: [Swift.UInt8]?, argsArg: Swift.String, modulePathArg: Swift.String, fileArg: Swift.String, lineArg: Swift.UInt32)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_APIErrorZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_APIErrorZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_APIErrorZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.APIError?) -> LightningDevKit.Bindings.Result_COption_APIErrorZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_APIErrorZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.APIError?
    @objc deinit
  }
}
public typealias NodeAnnouncementInfo = LightningDevKit.Bindings.NodeAnnouncementInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncementInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getLastUpdate() -> Swift.UInt32
    public func setLastUpdate(val: Swift.UInt32)
    public func getRgb() -> [Swift.UInt8]?
    public func setRgb(val: [Swift.UInt8])
    public func getAlias() -> LightningDevKit.Bindings.NodeAlias
    public func setAlias(val: LightningDevKit.Bindings.NodeAlias)
    public func getAnnouncementMessage() -> LightningDevKit.Bindings.NodeAnnouncement?
    public func setAnnouncementMessage(val: LightningDevKit.Bindings.NodeAnnouncement)
    public init(featuresArg: LightningDevKit.Bindings.NodeFeatures, lastUpdateArg: Swift.UInt32, rgbArg: [Swift.UInt8], aliasArg: LightningDevKit.Bindings.NodeAlias, announcementMessageArg: LightningDevKit.Bindings.NodeAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.NodeAnnouncementInfo, b: LightningDevKit.Bindings.NodeAnnouncementInfo) -> Swift.Bool
    public func addresses() -> [LightningDevKit.Bindings.SocketAddress]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PaymentSendFailure = LightningDevKit.Bindings.PaymentSendFailure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentSendFailure : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PaymentSendFailureType {
      case ParameterError
      case PathParameterError
      case AllFailedResendSafe
      case DuplicatePayment
      case PartialFailure
      public static func == (a: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType, b: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType
    public class func initWithParameterError(a: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithPathParameterError(a: [LightningDevKit.Bindings.Result_NoneAPIErrorZ]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithAllFailedResendSafe(a: [LightningDevKit.Bindings.APIError]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithDuplicatePayment() -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithPartialFailure(results: [LightningDevKit.Bindings.Result_NoneAPIErrorZ], failedPathsRetry: LightningDevKit.Bindings.RouteParameters, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func eq(a: LightningDevKit.Bindings.PaymentSendFailure, b: LightningDevKit.Bindings.PaymentSendFailure) -> Swift.Bool
    public func getValueAsParameterError() -> LightningDevKit.Bindings.APIError?
    public func getValueAsPathParameterError() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]?
    public func getValueAsAllFailedResendSafe() -> [LightningDevKit.Bindings.APIError]?
    public func getValueAsPartialFailure() -> LightningDevKit.Bindings.PaymentSendFailure.PartialFailure?
    @objc deinit
    @_hasMissingDesignatedInitializers public class PartialFailure : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getResults() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]
      public func getFailedPathsRetry() -> LightningDevKit.Bindings.RouteParameters
      public func getPaymentId() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Result_DescriptionCreationErrorZ = LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DescriptionCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Description) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.Description?
    @objc deinit
  }
}
public typealias RouteParameters = LightningDevKit.Bindings.RouteParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPaymentParams() -> LightningDevKit.Bindings.PaymentParameters
    public func setPaymentParams(val: LightningDevKit.Bindings.PaymentParameters)
    public func getFinalValueMsat() -> Swift.UInt64
    public func setFinalValueMsat(val: Swift.UInt64)
    public func getMaxTotalRoutingFeeMsat() -> Swift.UInt64?
    public func setMaxTotalRoutingFeeMsat(val: Swift.UInt64?)
    public init(paymentParamsArg: LightningDevKit.Bindings.PaymentParameters, finalValueMsatArg: Swift.UInt64, maxTotalRoutingFeeMsatArg: Swift.UInt64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteParameters, b: LightningDevKit.Bindings.RouteParameters) -> Swift.Bool
    public class func initWithPaymentParamsAndValue(paymentParams: LightningDevKit.Bindings.PaymentParameters, finalValueMsat: Swift.UInt64) -> LightningDevKit.Bindings.RouteParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CommitmentTransaction = LightningDevKit.Bindings.CommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public func commitmentNumber() -> Swift.UInt64
    public func perCommitmentPoint() -> [Swift.UInt8]
    public func toBroadcasterValueSat() -> Swift.UInt64
    public func toCountersignatoryValueSat() -> Swift.UInt64
    public func feeratePerKw() -> Swift.UInt32
    public func trust() -> LightningDevKit.Bindings.TrustedCommitmentTransaction
    public func verify(channelParameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters, broadcasterKeys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatoryKeys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SpliceDecodeErrorZ = LightningDevKit.Bindings.Result_SpliceDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpliceDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Splice) -> LightningDevKit.Bindings.Result_SpliceDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpliceDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Splice?
    @objc deinit
  }
}
public typealias TxAckRbf = LightningDevKit.Bindings.TxAckRbf
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxAckRbf : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getFundingOutputContribution() -> Swift.Int64?
    public func setFundingOutputContribution(val: Swift.Int64?)
    public init(channelIdArg: [Swift.UInt8], fundingOutputContributionArg: Swift.Int64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxAckRbf, b: LightningDevKit.Bindings.TxAckRbf) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxAckRbfDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelTypeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTypeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    @objc deinit
  }
}
public typealias Result_ReplyChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyChannelRange?
    @objc deinit
  }
}
public typealias UnsignedGossipMessage = LightningDevKit.Bindings.UnsignedGossipMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedGossipMessage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum UnsignedGossipMessageType {
      case ChannelAnnouncement
      case ChannelUpdate
      case NodeAnnouncement
      public static func == (a: LightningDevKit.Bindings.UnsignedGossipMessage.UnsignedGossipMessageType, b: LightningDevKit.Bindings.UnsignedGossipMessage.UnsignedGossipMessageType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.UnsignedGossipMessage.UnsignedGossipMessageType
    public class func initWithChannelAnnouncement(a: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.UnsignedGossipMessage
    public class func initWithChannelUpdate(a: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.UnsignedGossipMessage
    public class func initWithNodeAnnouncement(a: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.UnsignedGossipMessage
    public func write() -> [Swift.UInt8]
    public func getValueAsChannelAnnouncement() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement?
    public func getValueAsChannelUpdate() -> LightningDevKit.Bindings.UnsignedChannelUpdate?
    public func getValueAsNodeAnnouncement() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement?
    @objc deinit
  }
}
public typealias OnionMessagePath = LightningDevKit.Bindings.OnionMessagePath
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessagePath : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getIntermediateNodes() -> [[Swift.UInt8]]
    public func setIntermediateNodes(val: [[Swift.UInt8]])
    public func getDestination() -> LightningDevKit.Bindings.Destination
    public func setDestination(val: LightningDevKit.Bindings.Destination)
    public func getFirstNodeAddresses() -> [LightningDevKit.Bindings.SocketAddress]?
    public func setFirstNodeAddresses(val: [LightningDevKit.Bindings.SocketAddress]?)
    public init(intermediateNodesArg: [[Swift.UInt8]], destinationArg: LightningDevKit.Bindings.Destination, firstNodeAddressesArg: [LightningDevKit.Bindings.SocketAddress]?)
    public func firstNode() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CounterpartyForwardingInfo = LightningDevKit.Bindings.CounterpartyForwardingInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyForwardingInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public init(feeBaseMsatArg: Swift.UInt32, feeProportionalMillionthsArg: Swift.UInt32, cltvExpiryDeltaArg: Swift.UInt16)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelConfig = LightningDevKit.Bindings.ChannelConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelConfig : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getForwardingFeeProportionalMillionths() -> Swift.UInt32
    public func setForwardingFeeProportionalMillionths(val: Swift.UInt32)
    public func getForwardingFeeBaseMsat() -> Swift.UInt32
    public func setForwardingFeeBaseMsat(val: Swift.UInt32)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getMaxDustHtlcExposure() -> LightningDevKit.Bindings.MaxDustHTLCExposure
    public func setMaxDustHtlcExposure(val: LightningDevKit.Bindings.MaxDustHTLCExposure)
    public func getForceCloseAvoidanceMaxFeeSatoshis() -> Swift.UInt64
    public func setForceCloseAvoidanceMaxFeeSatoshis(val: Swift.UInt64)
    public func getAcceptUnderpayingHtlcs() -> Swift.Bool
    public func setAcceptUnderpayingHtlcs(val: Swift.Bool)
    public init(forwardingFeeProportionalMillionthsArg: Swift.UInt32, forwardingFeeBaseMsatArg: Swift.UInt32, cltvExpiryDeltaArg: Swift.UInt16, maxDustHtlcExposureArg: LightningDevKit.Bindings.MaxDustHTLCExposure, forceCloseAvoidanceMaxFeeSatoshisArg: Swift.UInt64, acceptUnderpayingHtlcsArg: Swift.Bool)
    public class func eq(a: LightningDevKit.Bindings.ChannelConfig, b: LightningDevKit.Bindings.ChannelConfig) -> Swift.Bool
    public func apply(update: LightningDevKit.Bindings.ChannelConfigUpdate)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelConfig
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MultiThreadedScoreLockWrite = LightningDevKit.Bindings.MultiThreadedScoreLockWrite
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedScoreLockWrite : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func write() -> [Swift.UInt8]
    public func asScoreUpdate() -> LightningDevKit.Bindings.ScoreUpdate
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_Bolt11InvoiceParseOrSemanticErrorZ = LightningDevKit.Bindings.Result_Bolt11InvoiceParseOrSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_Bolt11InvoiceParseOrSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Bolt11Invoice) -> LightningDevKit.Bindings.Result_Bolt11InvoiceParseOrSemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.ParseOrSemanticError) -> LightningDevKit.Bindings.Result_Bolt11InvoiceParseOrSemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseOrSemanticError?
    public func getValue() -> LightningDevKit.Bindings.Bolt11Invoice?
    @objc deinit
  }
}
public typealias Result_NodeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeFeatures) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeFeatures?
    @objc deinit
  }
}
public typealias Result_RouteDecodeErrorZ = LightningDevKit.Bindings.Result_RouteDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    @objc deinit
  }
}
public typealias Result_FundingCreatedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingCreatedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingCreated?
    @objc deinit
  }
}
public typealias IOError = LightningDevKit.Bindings.IOError
extension LightningDevKit.Bindings {
  public enum IOError {
    case NotFound
    case PermissionDenied
    case ConnectionRefused
    case ConnectionReset
    case ConnectionAborted
    case NotConnected
    case AddrInUse
    case AddrNotAvailable
    case BrokenPipe
    case AlreadyExists
    case WouldBlock
    case InvalidInput
    case InvalidData
    case TimedOut
    case WriteZero
    case Interrupted
    case Other
    case UnexpectedEof
    public static func == (a: LightningDevKit.Bindings.IOError, b: LightningDevKit.Bindings.IOError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Input = LightningDevKit.Bindings.Input
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Input : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getPreviousUtxo() -> LightningDevKit.Bindings.TxOut
    public func setPreviousUtxo(val: LightningDevKit.Bindings.TxOut)
    public func getSatisfactionWeight() -> Swift.UInt64
    public func setSatisfactionWeight(val: Swift.UInt64)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, previousUtxoArg: LightningDevKit.Bindings.TxOut, satisfactionWeightArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Input, b: LightningDevKit.Bindings.Input) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias HTLCUpdate = LightningDevKit.Bindings.HTLCUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.HTLCUpdate, b: LightningDevKit.Bindings.HTLCUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias WriteableScore = LightningDevKit.Bindings.WriteableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class WriteableScore : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(lockableScore: LightningDevKit.Bindings.LockableScore)
    open func write() -> [Swift.UInt8]
    public func getLockableScore() -> LightningDevKit.Bindings.LockableScore
    @objc deinit
  }
}
public typealias Persist = LightningDevKit.Bindings.Persist
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persist : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func persistNewChannel(channelId: LightningDevKit.Bindings.OutPoint, data: LightningDevKit.Bindings.ChannelMonitor, updateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    open func updatePersistedChannel(channelId: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate, data: LightningDevKit.Bindings.ChannelMonitor, updateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    @objc deinit
  }
}
public typealias Result_ChannelDerivationParametersDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelDerivationParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelDerivationParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelDerivationParameters) -> LightningDevKit.Bindings.Result_ChannelDerivationParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelDerivationParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelDerivationParameters?
    @objc deinit
  }
}
public typealias Filter = LightningDevKit.Bindings.Filter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Filter : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func registerTx(txid: [Swift.UInt8]?, scriptPubkey: [Swift.UInt8])
    open func registerOutput(output: LightningDevKit.Bindings.WatchedOutput)
    @objc deinit
  }
}
public typealias Result_RouteHintHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHintHop) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHintHop?
    @objc deinit
  }
}
public typealias HTLCOutputInCommitment = LightningDevKit.Bindings.HTLCOutputInCommitment
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCOutputInCommitment : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getOffered() -> Swift.Bool
    public func setOffered(val: Swift.Bool)
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getCltvExpiry() -> Swift.UInt32
    public func setCltvExpiry(val: Swift.UInt32)
    public func getPaymentHash() -> [Swift.UInt8]?
    public func setPaymentHash(val: [Swift.UInt8])
    public func getTransactionOutputIndex() -> Swift.UInt32?
    public func setTransactionOutputIndex(val: Swift.UInt32?)
    public init(offeredArg: Swift.Bool, amountMsatArg: Swift.UInt64, cltvExpiryArg: Swift.UInt32, paymentHashArg: [Swift.UInt8], transactionOutputIndexArg: Swift.UInt32?)
    public class func eq(a: LightningDevKit.Bindings.HTLCOutputInCommitment, b: LightningDevKit.Bindings.HTLCOutputInCommitment) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OpenChannel = LightningDevKit.Bindings.OpenChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OpenChannel : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingSatoshis() -> Swift.UInt64
    public func setFundingSatoshis(val: Swift.UInt64)
    public func getPushMsat() -> Swift.UInt64
    public func setPushMsat(val: Swift.UInt64)
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getChannelReserveSatoshis() -> Swift.UInt64
    public func setChannelReserveSatoshis(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getFeeratePerKw() -> Swift.UInt32
    public func setFeeratePerKw(val: Swift.UInt32)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getChannelFlags() -> Swift.UInt8
    public func setChannelFlags(val: Swift.UInt8)
    public func getShutdownScriptpubkey() -> [Swift.UInt8]?
    public func setShutdownScriptpubkey(val: [Swift.UInt8]?)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public init(chainHashArg: [Swift.UInt8], temporaryChannelIdArg: [Swift.UInt8], fundingSatoshisArg: Swift.UInt64, pushMsatArg: Swift.UInt64, dustLimitSatoshisArg: Swift.UInt64, maxHtlcValueInFlightMsatArg: Swift.UInt64, channelReserveSatoshisArg: Swift.UInt64, htlcMinimumMsatArg: Swift.UInt64, feeratePerKwArg: Swift.UInt32, toSelfDelayArg: Swift.UInt16, maxAcceptedHtlcsArg: Swift.UInt16, fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: [Swift.UInt8], paymentPointArg: [Swift.UInt8], delayedPaymentBasepointArg: [Swift.UInt8], htlcBasepointArg: [Swift.UInt8], firstPerCommitmentPointArg: [Swift.UInt8], channelFlagsArg: Swift.UInt8, shutdownScriptpubkeyArg: [Swift.UInt8]?, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.OpenChannel, b: LightningDevKit.Bindings.OpenChannel) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BlindedTailDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedTailDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedTailDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedTail) -> LightningDevKit.Bindings.Result_BlindedTailDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedTailDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedTail?
    @objc deinit
  }
}
public typealias Result_ChannelMonitorUpdateStatusNoneZ = LightningDevKit.Bindings.Result_ChannelMonitorUpdateStatusNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelMonitorUpdateStatusNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelMonitorUpdateStatus) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateStatusNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateStatusNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus?
    @objc deinit
  }
}
public typealias SendError = LightningDevKit.Bindings.SendError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SendError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum SendErrorType {
      case Secp256k1
      case TooBigPacket
      case TooFewBlindedHops
      case InvalidFirstHop
      case PathNotFound
      case InvalidMessage
      case BufferFull
      case GetNodeIdFailed
      case BlindedPathAdvanceFailed
      public static func == (a: LightningDevKit.Bindings.SendError.SendErrorType, b: LightningDevKit.Bindings.SendError.SendErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SendError.SendErrorType
    public class func initWithSecp256k1(a: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.SendError
    public class func initWithTooBigPacket() -> LightningDevKit.Bindings.SendError
    public class func initWithTooFewBlindedHops() -> LightningDevKit.Bindings.SendError
    public class func initWithInvalidFirstHop(a: [Swift.UInt8]) -> LightningDevKit.Bindings.SendError
    public class func initWithPathNotFound() -> LightningDevKit.Bindings.SendError
    public class func initWithInvalidMessage() -> LightningDevKit.Bindings.SendError
    public class func initWithBufferFull() -> LightningDevKit.Bindings.SendError
    public class func initWithGetNodeIdFailed() -> LightningDevKit.Bindings.SendError
    public class func initWithBlindedPathAdvanceFailed() -> LightningDevKit.Bindings.SendError
    public class func eq(a: LightningDevKit.Bindings.SendError, b: LightningDevKit.Bindings.SendError) -> Swift.Bool
    public func getValueAsSecp256k1() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValueAsInvalidFirstHop() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_OfferBolt12ParseErrorZ = LightningDevKit.Bindings.Result_OfferBolt12ParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OfferBolt12ParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Offer) -> LightningDevKit.Bindings.Result_OfferBolt12ParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt12ParseError) -> LightningDevKit.Bindings.Result_OfferBolt12ParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt12ParseError?
    public func getValue() -> LightningDevKit.Bindings.Offer?
    @objc deinit
  }
}
public typealias Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ = LightningDevKit.Bindings.Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.OnionMessage, [LightningDevKit.Bindings.SocketAddress]?)) -> LightningDevKit.Bindings.Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SendError) -> LightningDevKit.Bindings.Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SendError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.OnionMessage, [LightningDevKit.Bindings.SocketAddress]?)?
    @objc deinit
  }
}
public typealias SocketAddress = LightningDevKit.Bindings.SocketAddress
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SocketAddress : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum SocketAddressType {
      case TcpIpV4
      case TcpIpV6
      case OnionV2
      case OnionV3
      case Hostname
      public static func == (a: LightningDevKit.Bindings.SocketAddress.SocketAddressType, b: LightningDevKit.Bindings.SocketAddress.SocketAddressType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SocketAddress.SocketAddressType
    public class func initWithTcpIpV4(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.SocketAddress
    public class func initWithTcpIpV6(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.SocketAddress
    public class func initWithOnionV2(a: [Swift.UInt8]) -> LightningDevKit.Bindings.SocketAddress
    public class func initWithOnionV3(ed25519Pubkey: [Swift.UInt8], checksum: Swift.UInt16, version: Swift.UInt8, port: Swift.UInt16) -> LightningDevKit.Bindings.SocketAddress
    public class func initWithHostname(hostname: LightningDevKit.Bindings.Hostname, port: Swift.UInt16) -> LightningDevKit.Bindings.SocketAddress
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.SocketAddress, b: LightningDevKit.Bindings.SocketAddress) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SocketAddressDecodeErrorZ
    public func toStr() -> Swift.String
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_SocketAddressSocketAddressParseErrorZ
    public func getValueAsTcpIpV4() -> LightningDevKit.Bindings.SocketAddress.TcpIpV4?
    public func getValueAsTcpIpV6() -> LightningDevKit.Bindings.SocketAddress.TcpIpV6?
    public func getValueAsOnionV2() -> [Swift.UInt8]?
    public func getValueAsOnionV3() -> LightningDevKit.Bindings.SocketAddress.OnionV3?
    public func getValueAsHostname() -> LightningDevKit.Bindings.SocketAddress.Hostname?
    @objc deinit
    @_hasMissingDesignatedInitializers public class TcpIpV4 : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class TcpIpV6 : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OnionV3 : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getEd25519Pubkey() -> [Swift.UInt8]
      public func getChecksum() -> Swift.UInt16
      public func getVersion() -> Swift.UInt8
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getHostname() -> LightningDevKit.Bindings.Hostname
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
  }
}
public typealias Result_COption_OnionMessageContentsZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_OnionMessageContentsZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_OnionMessageContentsZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OnionMessageContents?) -> LightningDevKit.Bindings.Result_COption_OnionMessageContentsZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_OnionMessageContentsZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OnionMessageContents?
    @objc deinit
  }
}
public typealias Description = LightningDevKit.Bindings.Description
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Description : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Description, b: LightningDevKit.Bindings.Description) -> Swift.Bool
    public class func new(description: Swift.String) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public func intoInner() -> LightningDevKit.Bindings.UntrustedString
    public func toStr() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: (LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)) -> LightningDevKit.Bindings.Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> (LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)?
    @objc deinit
  }
}
public typealias Result_RoutingFeesDecodeErrorZ = LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RoutingFeesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RoutingFees) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RoutingFees?
    @objc deinit
  }
}
public typealias OnionMessenger = LightningDevKit.Bindings.OnionMessenger
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessenger : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, messageRouter: LightningDevKit.Bindings.MessageRouter, offersHandler: LightningDevKit.Bindings.OffersMessageHandler, customHandler: LightningDevKit.Bindings.CustomOnionMessageHandler)
    public func sendOnionMessage(contents: LightningDevKit.Bindings.OnionMessageContents, destination: LightningDevKit.Bindings.Destination, replyPath: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_SendSuccessSendErrorZ
    public func asOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OfferFeatures = LightningDevKit.Bindings.OfferFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OfferFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.OfferFeatures, b: LightningDevKit.Bindings.OfferFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.OfferFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PrintableString = LightningDevKit.Bindings.PrintableString
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrintableString : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> Swift.String
    public func setA(val: Swift.String)
    public init(aArg: Swift.String)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_u8ZPeerHandleErrorZ = LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_u8ZPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_UpdateFailHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFailHTLC) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailHTLC?
    @objc deinit
  }
}
public typealias P2PGossipSync = LightningDevKit.Bindings.P2PGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class P2PGossipSync : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, utxoLookup: LightningDevKit.Bindings.UtxoLookup?, logger: LightningDevKit.Bindings.Logger)
    public func addUtxoLookup(utxoLookup: LightningDevKit.Bindings.UtxoLookup?)
    public func asRoutingMessageHandler() -> LightningDevKit.Bindings.RoutingMessageHandler
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias NodeAlias = LightningDevKit.Bindings.NodeAlias
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAlias : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]?
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.NodeAlias, b: LightningDevKit.Bindings.NodeAlias) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_AcceptChannelDecodeErrorZ = LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AcceptChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AcceptChannel?
    @objc deinit
  }
}
public typealias Result_BlindedPathNoneZ = LightningDevKit.Bindings.Result_BlindedPathNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedPathNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias SiPrefix = LightningDevKit.Bindings.SiPrefix
extension LightningDevKit.Bindings {
  public enum SiPrefix {
    case Milli
    case Micro
    case Nano
    case Pico
    public static func == (a: LightningDevKit.Bindings.SiPrefix, b: LightningDevKit.Bindings.SiPrefix) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias ChannelMonitorUpdate = LightningDevKit.Bindings.ChannelMonitorUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitorUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getUpdateId() -> Swift.UInt64
    public func setUpdateId(val: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.ChannelMonitorUpdate, b: LightningDevKit.Bindings.ChannelMonitorUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteHintDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHint?
    @objc deinit
  }
}
public typealias Result_QueryShortChannelIdsDecodeErrorZ = LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryShortChannelIdsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryShortChannelIds?
    @objc deinit
  }
}
public typealias TxCreationKeys = LightningDevKit.Bindings.TxCreationKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxCreationKeys : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPerCommitmentPoint() -> [Swift.UInt8]
    public func setPerCommitmentPoint(val: [Swift.UInt8])
    public func getRevocationKey() -> LightningDevKit.Bindings.RevocationKey
    public func setRevocationKey(val: LightningDevKit.Bindings.RevocationKey)
    public func getBroadcasterHtlcKey() -> LightningDevKit.Bindings.HtlcKey
    public func setBroadcasterHtlcKey(val: LightningDevKit.Bindings.HtlcKey)
    public func getCountersignatoryHtlcKey() -> LightningDevKit.Bindings.HtlcKey
    public func setCountersignatoryHtlcKey(val: LightningDevKit.Bindings.HtlcKey)
    public func getBroadcasterDelayedPaymentKey() -> LightningDevKit.Bindings.DelayedPaymentKey
    public func setBroadcasterDelayedPaymentKey(val: LightningDevKit.Bindings.DelayedPaymentKey)
    public init(perCommitmentPointArg: [Swift.UInt8], revocationKeyArg: LightningDevKit.Bindings.RevocationKey, broadcasterHtlcKeyArg: LightningDevKit.Bindings.HtlcKey, countersignatoryHtlcKeyArg: LightningDevKit.Bindings.HtlcKey, broadcasterDelayedPaymentKeyArg: LightningDevKit.Bindings.DelayedPaymentKey)
    public class func eq(a: LightningDevKit.Bindings.TxCreationKeys, b: LightningDevKit.Bindings.TxCreationKeys) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func initWithDeriveNew(perCommitmentPoint: [Swift.UInt8], broadcasterDelayedPaymentBase: LightningDevKit.Bindings.DelayedPaymentBasepoint, broadcasterHtlcBase: LightningDevKit.Bindings.HtlcBasepoint, countersignatoryRevocationBase: LightningDevKit.Bindings.RevocationBasepoint, countersignatoryHtlcBase: LightningDevKit.Bindings.HtlcBasepoint) -> LightningDevKit.Bindings.TxCreationKeys
    public class func initWithChannelStaticKeys(perCommitmentPoint: [Swift.UInt8], broadcasterKeys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatoryKeys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.TxCreationKeys
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UpdateFulfillHTLC = LightningDevKit.Bindings.UpdateFulfillHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFulfillHTLC : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getPaymentPreimage() -> [Swift.UInt8]?
    public func setPaymentPreimage(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], htlcIdArg: Swift.UInt64, paymentPreimageArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UpdateFulfillHTLC, b: LightningDevKit.Bindings.UpdateFulfillHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PeeledOnionNoneZ = LightningDevKit.Bindings.Result_PeeledOnionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PeeledOnionNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PeeledOnion) -> LightningDevKit.Bindings.Result_PeeledOnionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_PeeledOnionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.PeeledOnion?
    @objc deinit
  }
}
public typealias Result_RecoverableSignatureNoneZ = LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RecoverableSignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias ChainMonitor = LightningDevKit.Bindings.ChainMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainMonitor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(chainSource: LightningDevKit.Bindings.Filter?, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, feeest: LightningDevKit.Bindings.FeeEstimator, persister: LightningDevKit.Bindings.Persist)
    public func getClaimableBalances(ignoredChannels: [LightningDevKit.Bindings.ChannelDetails]) -> [LightningDevKit.Bindings.Balance]
    public func getMonitor(fundingTxo: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public func listMonitors() -> [LightningDevKit.Bindings.OutPoint]
    public func listPendingMonitorUpdates() -> [(LightningDevKit.Bindings.OutPoint, [LightningDevKit.Bindings.MonitorUpdateId])]
    public func channelMonitorUpdated(fundingTxo: LightningDevKit.Bindings.OutPoint, completedUpdateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func getUpdateFuture() -> LightningDevKit.Bindings.Future
    public func rebroadcastPendingClaims()
    public func asListen() -> LightningDevKit.Bindings.Listen
    public func asConfirm() -> LightningDevKit.Bindings.Confirm
    public func asWatch() -> LightningDevKit.Bindings.Watch
    public func asEventsProvider() -> LightningDevKit.Bindings.EventsProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdate?
    @objc deinit
  }
}
public typealias SendSuccess = LightningDevKit.Bindings.SendSuccess
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SendSuccess : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum SendSuccessType {
      case Buffered
      case BufferedAwaitingConnection
      public static func == (a: LightningDevKit.Bindings.SendSuccess.SendSuccessType, b: LightningDevKit.Bindings.SendSuccess.SendSuccessType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SendSuccess.SendSuccessType
    public class func initWithBuffered() -> LightningDevKit.Bindings.SendSuccess
    public class func initWithBufferedAwaitingConnection(a: [Swift.UInt8]) -> LightningDevKit.Bindings.SendSuccess
    public class func eq(a: LightningDevKit.Bindings.SendSuccess, b: LightningDevKit.Bindings.SendSuccess) -> Swift.Bool
    public func getValueAsBufferedAwaitingConnection() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_ChannelUpdateInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelUpdateInfo) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    @objc deinit
  }
}
public typealias Result_RecipientOnionFieldsNoneZ = LightningDevKit.Bindings.Result_RecipientOnionFieldsNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RecipientOnionFieldsNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RecipientOnionFields) -> LightningDevKit.Bindings.Result_RecipientOnionFieldsNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_RecipientOnionFieldsNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.RecipientOnionFields?
    @objc deinit
  }
}
public typealias Result_HTLCUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCUpdate?
    @objc deinit
  }
}
public typealias ProbabilisticScoringDecayParameters = LightningDevKit.Bindings.ProbabilisticScoringDecayParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScoringDecayParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getHistoricalNoUpdatesHalfLife() -> Swift.UInt64
    public func setHistoricalNoUpdatesHalfLife(val: Swift.UInt64)
    public func getLiquidityOffsetHalfLife() -> Swift.UInt64
    public func setLiquidityOffsetHalfLife(val: Swift.UInt64)
    public init(historicalNoUpdatesHalfLifeArg: Swift.UInt64, liquidityOffsetHalfLifeArg: Swift.UInt64)
    public class func initWithDefault() -> LightningDevKit.Bindings.ProbabilisticScoringDecayParameters
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_EventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_EventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Event?) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Event?
    @objc deinit
  }
}
public typealias Result_NoneBolt12SemanticErrorZ = LightningDevKit.Bindings.Result_NoneBolt12SemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneBolt12SemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneBolt12SemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt12SemanticError) -> LightningDevKit.Bindings.Result_NoneBolt12SemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt12SemanticError?
    @objc deinit
  }
}
public typealias Result_ThirtyTwoBytesNoneZ = LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ThirtyTwoBytesNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Listen = LightningDevKit.Bindings.Listen
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Listen : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func filteredBlockConnected(header: [Swift.UInt8]?, txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32)
    open func blockConnected(block: [Swift.UInt8], height: Swift.UInt32)
    open func blockDisconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
    @objc deinit
  }
}
public typealias Result_TxAbortDecodeErrorZ = LightningDevKit.Bindings.Result_TxAbortDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxAbortDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxAbort) -> LightningDevKit.Bindings.Result_TxAbortDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxAbortDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxAbort?
    @objc deinit
  }
}
public typealias Result_ChannelReadyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReadyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReady?
    @objc deinit
  }
}
public typealias ForwardTlvs = LightningDevKit.Bindings.ForwardTlvs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ForwardTlvs : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getPaymentRelay() -> LightningDevKit.Bindings.PaymentRelay
    public func setPaymentRelay(val: LightningDevKit.Bindings.PaymentRelay)
    public func getPaymentConstraints() -> LightningDevKit.Bindings.PaymentConstraints
    public func setPaymentConstraints(val: LightningDevKit.Bindings.PaymentConstraints)
    public func getFeatures() -> LightningDevKit.Bindings.BlindedHopFeatures
    public func setFeatures(val: LightningDevKit.Bindings.BlindedHopFeatures)
    public init(shortChannelIdArg: Swift.UInt64, paymentRelayArg: LightningDevKit.Bindings.PaymentRelay, paymentConstraintsArg: LightningDevKit.Bindings.PaymentConstraints, featuresArg: LightningDevKit.Bindings.BlindedHopFeatures)
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BuiltCommitmentTransaction = LightningDevKit.Bindings.BuiltCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BuiltCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTransaction() -> [Swift.UInt8]
    public func setTransaction(val: [Swift.UInt8])
    public func getTxid() -> [Swift.UInt8]?
    public func setTxid(val: [Swift.UInt8])
    public init(transactionArg: [Swift.UInt8], txidArg: [Swift.UInt8])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public func getSighashAll(fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func signCounterpartyCommitment(fundingKey: [Swift.UInt8], fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func signHolderCommitment(fundingKey: [Swift.UInt8], fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, entropySource: LightningDevKit.Bindings.EntropySource) -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_Bolt11InvoiceSignOrCreationErrorZ = LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_Bolt11InvoiceSignOrCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Bolt11Invoice) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SignOrCreationError) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SignOrCreationError?
    public func getValue() -> LightningDevKit.Bindings.Bolt11Invoice?
    @objc deinit
  }
}
public typealias GraphSyncError = LightningDevKit.Bindings.GraphSyncError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GraphSyncError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum GraphSyncErrorType {
      case DecodeError
      case LightningError
      public static func == (a: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType, b: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType
    public class func initWithDecodeError(a: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.GraphSyncError
    public class func initWithLightningError(a: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.GraphSyncError
    public func getValueAsDecodeError() -> LightningDevKit.Bindings.DecodeError?
    public func getValueAsLightningError() -> LightningDevKit.Bindings.LightningError?
    @objc deinit
  }
}
public typealias Result_ShutdownScriptNoneZ = LightningDevKit.Bindings.Result_ShutdownScriptNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_ShutdownScriptNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    @objc deinit
  }
}
public typealias BigSize = LightningDevKit.Bindings.BigSize
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BigSize : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> Swift.UInt64
    public func setA(val: Swift.UInt64)
    public init(aArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BigSize, b: LightningDevKit.Bindings.BigSize) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BigSizeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias SignedRawBolt11Invoice = LightningDevKit.Bindings.SignedRawBolt11Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignedRawBolt11Invoice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.SignedRawBolt11Invoice, b: LightningDevKit.Bindings.SignedRawBolt11Invoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func intoParts() -> (LightningDevKit.Bindings.RawBolt11Invoice, [Swift.UInt8], LightningDevKit.Bindings.Bolt11InvoiceSignature)
    public func rawInvoice() -> LightningDevKit.Bindings.RawBolt11Invoice
    public func signableHash() -> [Swift.UInt8]?
    public func signature() -> LightningDevKit.Bindings.Bolt11InvoiceSignature
    public func recoverPayeePubKey() -> LightningDevKit.Bindings.Result_PayeePubKeySecp256k1ErrorZ
    public func checkSignature() -> Swift.Bool
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_SignedRawBolt11InvoiceBolt11ParseErrorZ
    public func toStr() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InFlightHtlcsDecodeErrorZ = LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InFlightHtlcsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.InFlightHtlcs) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InFlightHtlcs?
    @objc deinit
  }
}
public typealias RetryableSendFailure = LightningDevKit.Bindings.RetryableSendFailure
extension LightningDevKit.Bindings {
  public enum RetryableSendFailure {
    case PaymentExpired
    case RouteNotFound
    case DuplicatePayment
    public static func == (a: LightningDevKit.Bindings.RetryableSendFailure, b: LightningDevKit.Bindings.RetryableSendFailure) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_ECDSASignatureNoneZ = LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ECDSASignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias AnchorDescriptor = LightningDevKit.Bindings.AnchorDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AnchorDescriptor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelDerivationParameters() -> LightningDevKit.Bindings.ChannelDerivationParameters
    public func setChannelDerivationParameters(val: LightningDevKit.Bindings.ChannelDerivationParameters)
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public init(channelDerivationParametersArg: LightningDevKit.Bindings.ChannelDerivationParameters, outpointArg: LightningDevKit.Bindings.OutPoint)
    public class func eq(a: LightningDevKit.Bindings.AnchorDescriptor, b: LightningDevKit.Bindings.AnchorDescriptor) -> Swift.Bool
    public func previousUtxo() -> LightningDevKit.Bindings.TxOut
    public func unsignedTxInput() -> LightningDevKit.Bindings.TxIn
    public func witnessScript() -> [Swift.UInt8]
    public func txInputWitness(signature: [Swift.UInt8]) -> [Swift.UInt8]
    public func deriveChannelSigner(signerProvider: LightningDevKit.Bindings.SignerProvider) -> LightningDevKit.Bindings.WriteableEcdsaChannelSigner
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Bolt12InvoiceFeatures = LightningDevKit.Bindings.Bolt12InvoiceFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt12InvoiceFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.Bolt12InvoiceFeatures, b: LightningDevKit.Bindings.Bolt12InvoiceFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.Bolt12InvoiceFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_Bolt12InvoiceFeaturesDecodeErrorZ
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SpendableOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpendableOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SpendableOutputDescriptor) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SpendableOutputDescriptor?
    @objc deinit
  }
}
public typealias Result_C2Tuple_CVec_u8Zu64ZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_CVec_u8Zu64ZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_CVec_u8Zu64ZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], Swift.UInt64)) -> LightningDevKit.Bindings.Result_C2Tuple_CVec_u8Zu64ZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_CVec_u8Zu64ZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], Swift.UInt64)?
    @objc deinit
  }
}
public typealias Confirm = LightningDevKit.Bindings.Confirm
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Confirm : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func transactionsConfirmed(header: [Swift.UInt8]?, txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32)
    open func transactionUnconfirmed(txid: [Swift.UInt8]?)
    open func bestBlockUpdated(header: [Swift.UInt8]?, height: Swift.UInt32)
    open func getRelevantTxids() -> [([Swift.UInt8], Swift.UInt32, [Swift.UInt8]?)]
    @objc deinit
  }
}
public typealias Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ = LightningDevKit.Bindings.Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.RecipientOnionFields, LightningDevKit.Bindings.RouteParameters)) -> LightningDevKit.Bindings.Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.RecipientOnionFields, LightningDevKit.Bindings.RouteParameters)?
    @objc deinit
  }
}
public typealias ExpiryTime = LightningDevKit.Bindings.ExpiryTime
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpiryTime : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ExpiryTime, b: LightningDevKit.Bindings.ExpiryTime) -> Swift.Bool
    public class func initWithSeconds(seconds: Swift.UInt64) -> LightningDevKit.Bindings.ExpiryTime
    public class func initWithDuration(duration: Swift.UInt64) -> LightningDevKit.Bindings.ExpiryTime
    public func asSeconds() -> Swift.UInt64
    public func asDuration() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CoinSelection = LightningDevKit.Bindings.CoinSelection
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CoinSelection : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getConfirmedUtxos() -> [LightningDevKit.Bindings.Utxo]
    public func setConfirmedUtxos(val: [LightningDevKit.Bindings.Utxo])
    public func getChangeOutput() -> LightningDevKit.Bindings.TxOut?
    public func setChangeOutput(val: LightningDevKit.Bindings.TxOut?)
    public init(confirmedUtxosArg: [LightningDevKit.Bindings.Utxo], changeOutputArg: LightningDevKit.Bindings.TxOut?)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SchnorrSignatureNoneZ = LightningDevKit.Bindings.Result_SchnorrSignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SchnorrSignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SchnorrSignatureNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_SchnorrSignatureNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias EventHandler = LightningDevKit.Bindings.EventHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func handleEvent(event: LightningDevKit.Bindings.Event)
    @objc deinit
  }
}
public typealias Result_PositiveTimestampCreationErrorZ = LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PositiveTimestampCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PositiveTimestamp) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.PositiveTimestamp?
    @objc deinit
  }
}
public typealias PeerManager = LightningDevKit.Bindings.PeerManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerManager : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `messageHandler`.")
    public init(messageHandler: LightningDevKit.Bindings.MessageHandler, currentTime: Swift.UInt32, ephemeralRandomData: [Swift.UInt8], logger: LightningDevKit.Bindings.Logger, nodeSigner: LightningDevKit.Bindings.NodeSigner)
    public func getPeerNodeIds() -> [([Swift.UInt8], LightningDevKit.Bindings.SocketAddress?)]
    public func newOutboundConnection(theirNodeId: [Swift.UInt8], descriptor: LightningDevKit.Bindings.SocketDescriptor, remoteNetworkAddress: LightningDevKit.Bindings.SocketAddress?) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public func newInboundConnection(descriptor: LightningDevKit.Bindings.SocketDescriptor, remoteNetworkAddress: LightningDevKit.Bindings.SocketAddress?) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func writeBufferSpaceAvail(descriptor: LightningDevKit.Bindings.SocketDescriptor) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func readEvent(peerDescriptor: LightningDevKit.Bindings.SocketDescriptor, data: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public func processEvents()
    public func socketDisconnected(descriptor: LightningDevKit.Bindings.SocketDescriptor)
    public func disconnectByNodeId(nodeId: [Swift.UInt8])
    public func disconnectAllPeers()
    public func timerTickOccurred()
    public func broadcastNodeAnnouncement(rgb: [Swift.UInt8], alias: [Swift.UInt8], addresses: [LightningDevKit.Bindings.SocketAddress])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BlindedPathCandidate = LightningDevKit.Bindings.BlindedPathCandidate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedPathCandidate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CoinSelectionNoneZ = LightningDevKit.Bindings.Result_CoinSelectionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CoinSelectionNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CoinSelection) -> LightningDevKit.Bindings.Result_CoinSelectionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CoinSelectionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.CoinSelection?
    @objc deinit
  }
}
public typealias WriteableEcdsaChannelSigner = LightningDevKit.Bindings.WriteableEcdsaChannelSigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class WriteableEcdsaChannelSigner : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(ecdsaChannelSigner: LightningDevKit.Bindings.EcdsaChannelSigner)
    open func write() -> [Swift.UInt8]
    public func getEcdsaChannelSigner() -> LightningDevKit.Bindings.EcdsaChannelSigner
    @objc deinit
  }
}
public typealias BlindedPayInfo = LightningDevKit.Bindings.BlindedPayInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedPayInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public func getFeatures() -> LightningDevKit.Bindings.BlindedHopFeatures
    public func setFeatures(val: LightningDevKit.Bindings.BlindedHopFeatures)
    public init(feeBaseMsatArg: Swift.UInt32, feeProportionalMillionthsArg: Swift.UInt32, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64, htlcMaximumMsatArg: Swift.UInt64, featuresArg: LightningDevKit.Bindings.BlindedHopFeatures)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BlindedPayInfo, b: LightningDevKit.Bindings.BlindedPayInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedPayInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PublicKeyNoneZ = LightningDevKit.Bindings.Result_PublicKeyNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PublicKeyNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_NoneRetryableSendFailureZ = LightningDevKit.Bindings.Result_NoneRetryableSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneRetryableSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneRetryableSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.RetryableSendFailure) -> LightningDevKit.Bindings.Result_NoneRetryableSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.RetryableSendFailure?
    @objc deinit
  }
}
public typealias Result_PayeePubKeySecp256k1ErrorZ = LightningDevKit.Bindings.Result_PayeePubKeySecp256k1ErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PayeePubKeySecp256k1ErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PayeePubKey) -> LightningDevKit.Bindings.Result_PayeePubKeySecp256k1ErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_PayeePubKeySecp256k1ErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> LightningDevKit.Bindings.PayeePubKey?
    @objc deinit
  }
}
public typealias UnsignedNodeAnnouncement = LightningDevKit.Bindings.UnsignedNodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedNodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getTimestamp() -> Swift.UInt32
    public func setTimestamp(val: Swift.UInt32)
    public func getNodeId() -> LightningDevKit.Bindings.NodeId
    public func setNodeId(val: LightningDevKit.Bindings.NodeId)
    public func getRgb() -> [Swift.UInt8]?
    public func setRgb(val: [Swift.UInt8])
    public func getAlias() -> LightningDevKit.Bindings.NodeAlias
    public func setAlias(val: LightningDevKit.Bindings.NodeAlias)
    public func getAddresses() -> [LightningDevKit.Bindings.SocketAddress]
    public func setAddresses(val: [LightningDevKit.Bindings.SocketAddress])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UnsignedNodeAnnouncement, b: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias WitnessProgram = LightningDevKit.Bindings.WitnessProgram
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WitnessProgram : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(version: Swift.UInt8, program: [Swift.UInt8])
    public func getVersion() -> Swift.UInt8
    public func getProgram() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias MessageHandler = LightningDevKit.Bindings.MessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageHandler : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChanHandler() -> LightningDevKit.Bindings.ChannelMessageHandler?
    public func setChanHandler(val: LightningDevKit.Bindings.ChannelMessageHandler)
    public func getRouteHandler() -> LightningDevKit.Bindings.RoutingMessageHandler?
    public func setRouteHandler(val: LightningDevKit.Bindings.RoutingMessageHandler)
    public func getOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler?
    public func setOnionMessageHandler(val: LightningDevKit.Bindings.OnionMessageHandler)
    public func getCustomMessageHandler() -> LightningDevKit.Bindings.CustomMessageHandler?
    public func setCustomMessageHandler(val: LightningDevKit.Bindings.CustomMessageHandler)
    public init(chanHandlerArg: LightningDevKit.Bindings.ChannelMessageHandler, routeHandlerArg: LightningDevKit.Bindings.RoutingMessageHandler, onionMessageHandlerArg: LightningDevKit.Bindings.OnionMessageHandler, customMessageHandlerArg: LightningDevKit.Bindings.CustomMessageHandler)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_u8ZIOErrorZ = LightningDevKit.Bindings.Result_CVec_u8ZIOErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_u8ZIOErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZIOErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_CVec_u8ZIOErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias MessageRouter = LightningDevKit.Bindings.MessageRouter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class MessageRouter : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func findPath(sender: [Swift.UInt8], peers: [[Swift.UInt8]], destination: LightningDevKit.Bindings.Destination) -> LightningDevKit.Bindings.Result_OnionMessagePathNoneZ
    open func createBlindedPaths(recipient: [Swift.UInt8], peers: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_BlindedPathZNoneZ
    @objc deinit
  }
}
public typealias Result_TxAddInputDecodeErrorZ = LightningDevKit.Bindings.Result_TxAddInputDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxAddInputDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxAddInput) -> LightningDevKit.Bindings.Result_TxAddInputDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxAddInputDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxAddInput?
    @objc deinit
  }
}
public typealias Logger = LightningDevKit.Bindings.Logger
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Logger : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func log(record: LightningDevKit.Bindings.Record)
    @objc deinit
  }
}
public typealias Result_RevocationBasepointDecodeErrorZ = LightningDevKit.Bindings.Result_RevocationBasepointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RevocationBasepointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RevocationBasepoint) -> LightningDevKit.Bindings.Result_RevocationBasepointDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RevocationBasepointDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RevocationBasepoint?
    @objc deinit
  }
}
public typealias Result_HtlcKeyDecodeErrorZ = LightningDevKit.Bindings.Result_HtlcKeyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HtlcKeyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HtlcKey) -> LightningDevKit.Bindings.Result_HtlcKeyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HtlcKeyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HtlcKey?
    @objc deinit
  }
}
public typealias NodeInfo = LightningDevKit.Bindings.NodeInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannels() -> [Swift.UInt64]
    public func setChannels(val: [Swift.UInt64])
    public func getAnnouncementInfo() -> LightningDevKit.Bindings.NodeAnnouncementInfo?
    public func setAnnouncementInfo(val: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public init(channelsArg: [Swift.UInt64], announcementInfoArg: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public class func eq(a: LightningDevKit.Bindings.NodeInfo, b: LightningDevKit.Bindings.NodeInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChainParameters = LightningDevKit.Bindings.ChainParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getNetwork() -> LightningDevKit.Bindings.Network
    public func setNetwork(val: LightningDevKit.Bindings.Network)
    public func getBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func setBestBlock(val: LightningDevKit.Bindings.BestBlock)
    public init(networkArg: LightningDevKit.Bindings.Network, bestBlockArg: LightningDevKit.Bindings.BestBlock)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ThirtyTwoBytesRetryableSendFailureZ = LightningDevKit.Bindings.Result_ThirtyTwoBytesRetryableSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ThirtyTwoBytesRetryableSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesRetryableSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.RetryableSendFailure) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesRetryableSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.RetryableSendFailure?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias GossipSync = LightningDevKit.Bindings.GossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipSync : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum GossipSyncType {
      case P2P
      case Rapid
      case None
      public static func == (a: LightningDevKit.Bindings.GossipSync.GossipSyncType, b: LightningDevKit.Bindings.GossipSync.GossipSyncType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GossipSync.GossipSyncType
    public class func initWithP2P(a: LightningDevKit.Bindings.P2PGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func initWithRapid(a: LightningDevKit.Bindings.RapidGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func none() -> LightningDevKit.Bindings.GossipSync
    public func getValueAsP2p() -> LightningDevKit.Bindings.P2PGossipSync?
    public func getValueAsRapid() -> LightningDevKit.Bindings.RapidGossipSync?
    @objc deinit
  }
}
public typealias Result_PublicKeySecp256k1ErrorZ = LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PublicKeySecp256k1ErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias BlindedHop = LightningDevKit.Bindings.BlindedHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedHop : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getBlindedNodeId() -> [Swift.UInt8]
    public func setBlindedNodeId(val: [Swift.UInt8])
    public func getEncryptedPayload() -> [Swift.UInt8]
    public func setEncryptedPayload(val: [Swift.UInt8])
    public init(blindedNodeIdArg: [Swift.UInt8], encryptedPayloadArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BlindedHop, b: LightningDevKit.Bindings.BlindedHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Recipient = LightningDevKit.Bindings.Recipient
extension LightningDevKit.Bindings {
  public enum Recipient {
    case Node
    case PhantomNode
    public static func == (a: LightningDevKit.Bindings.Recipient, b: LightningDevKit.Bindings.Recipient) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias PositiveTimestamp = LightningDevKit.Bindings.PositiveTimestamp
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PositiveTimestamp : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.PositiveTimestamp, b: LightningDevKit.Bindings.PositiveTimestamp) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func fromUnixTimestamp(unixSeconds: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func fromSystemTime(time: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func fromDurationSinceEpoch(duration: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public func asUnixTimestamp() -> Swift.UInt64
    public func asDurationSinceEpoch() -> Swift.UInt64
    public func asTime() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_boolPeerHandleErrorZ = LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> Swift.Bool?
    @objc deinit
  }
}
public typealias Result_Bolt12InvoiceFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_Bolt12InvoiceFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_Bolt12InvoiceFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Bolt12InvoiceFeatures) -> LightningDevKit.Bindings.Result_Bolt12InvoiceFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_Bolt12InvoiceFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Bolt12InvoiceFeatures?
    @objc deinit
  }
}
public typealias ErrorAction = LightningDevKit.Bindings.ErrorAction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorAction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum ErrorActionType {
      case DisconnectPeer
      case DisconnectPeerWithWarning
      case IgnoreError
      case IgnoreAndLog
      case IgnoreDuplicateGossip
      case SendErrorMessage
      case SendWarningMessage
      public static func == (a: LightningDevKit.Bindings.ErrorAction.ErrorActionType, b: LightningDevKit.Bindings.ErrorAction.ErrorActionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ErrorAction.ErrorActionType
    public class func initWithDisconnectPeer(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithDisconnectPeerWithWarning(msg: LightningDevKit.Bindings.WarningMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreError() -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreAndLog(a: LightningDevKit.Bindings.Level) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreDuplicateGossip() -> LightningDevKit.Bindings.ErrorAction
    public class func initWithSendErrorMessage(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithSendWarningMessage(msg: LightningDevKit.Bindings.WarningMessage, logLevel: LightningDevKit.Bindings.Level) -> LightningDevKit.Bindings.ErrorAction
    public func hash() -> Swift.UInt64
    public func getValueAsDisconnectPeer() -> LightningDevKit.Bindings.ErrorAction.DisconnectPeer?
    public func getValueAsDisconnectPeerWithWarning() -> LightningDevKit.Bindings.ErrorAction.DisconnectPeerWithWarning?
    public func getValueAsIgnoreAndLog() -> LightningDevKit.Bindings.Level?
    public func getValueAsSendErrorMessage() -> LightningDevKit.Bindings.ErrorAction.SendErrorMessage?
    public func getValueAsSendWarningMessage() -> LightningDevKit.Bindings.ErrorAction.SendWarningMessage?
    @objc deinit
    @_hasMissingDesignatedInitializers public class DisconnectPeer : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class DisconnectPeerWithWarning : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.WarningMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendErrorMessage : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendWarningMessage : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.WarningMessage
      public func getLogLevel() -> LightningDevKit.Bindings.Level
      @objc deinit
    }
  }
}
public typealias Result_SpliceAckDecodeErrorZ = LightningDevKit.Bindings.Result_SpliceAckDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpliceAckDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SpliceAck) -> LightningDevKit.Bindings.Result_SpliceAckDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpliceAckDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SpliceAck?
    @objc deinit
  }
}
public typealias ChannelAnnouncement = LightningDevKit.Bindings.ChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getNodeSignature1() -> [Swift.UInt8]
    public func setNodeSignature1(val: [Swift.UInt8])
    public func getNodeSignature2() -> [Swift.UInt8]
    public func setNodeSignature2(val: [Swift.UInt8])
    public func getBitcoinSignature1() -> [Swift.UInt8]
    public func setBitcoinSignature1(val: [Swift.UInt8])
    public func getBitcoinSignature2() -> [Swift.UInt8]
    public func setBitcoinSignature2(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement
    public func setContents(val: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public init(nodeSignature1Arg: [Swift.UInt8], nodeSignature2Arg: [Swift.UInt8], bitcoinSignature1Arg: [Swift.UInt8], bitcoinSignature2Arg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelAnnouncement, b: LightningDevKit.Bindings.ChannelAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TxRemoveInputDecodeErrorZ = LightningDevKit.Bindings.Result_TxRemoveInputDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxRemoveInputDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxRemoveInput) -> LightningDevKit.Bindings.Result_TxRemoveInputDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxRemoveInputDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxRemoveInput?
    @objc deinit
  }
}
public typealias CustomMessageReader = LightningDevKit.Bindings.CustomMessageReader
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageReader : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func read(messageType: Swift.UInt16, buffer: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    @objc deinit
  }
}
public typealias KVStore = LightningDevKit.Bindings.KVStore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class KVStore : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func read(primaryNamespace: Swift.String, secondaryNamespace: Swift.String, key: Swift.String) -> LightningDevKit.Bindings.Result_CVec_u8ZIOErrorZ
    open func write(primaryNamespace: Swift.String, secondaryNamespace: Swift.String, key: Swift.String, buf: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    open func remove(primaryNamespace: Swift.String, secondaryNamespace: Swift.String, key: Swift.String, lazy: Swift.Bool) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    open func list(primaryNamespace: Swift.String, secondaryNamespace: Swift.String) -> LightningDevKit.Bindings.Result_CVec_StrZIOErrorZ
    @objc deinit
  }
}
public typealias Result_COption_HTLCDestinationZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_HTLCDestinationZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCDestination?) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCDestination?
    @objc deinit
  }
}
public typealias Result_NoneIOErrorZ = LightningDevKit.Bindings.Result_NoneIOErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneIOErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    @objc deinit
  }
}
public typealias NodeSigner = LightningDevKit.Bindings.NodeSigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class NodeSigner : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getInboundPaymentKeyMaterial() -> [Swift.UInt8]
    open func getNodeId(recipient: LightningDevKit.Bindings.Recipient) -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    open func ecdh(recipient: LightningDevKit.Bindings.Recipient, otherKey: [Swift.UInt8], tweak: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
    open func signInvoice(hrpBytes: [Swift.UInt8], invoiceData: [Swift.UInt8], recipient: LightningDevKit.Bindings.Recipient) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    open func signBolt12InvoiceRequest(invoiceRequest: LightningDevKit.Bindings.UnsignedInvoiceRequest) -> LightningDevKit.Bindings.Result_SchnorrSignatureNoneZ
    open func signBolt12Invoice(invoice: LightningDevKit.Bindings.UnsignedBolt12Invoice) -> LightningDevKit.Bindings.Result_SchnorrSignatureNoneZ
    open func signGossipMessage(msg: LightningDevKit.Bindings.UnsignedGossipMessage) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    @objc deinit
  }
}
public typealias Bolt12Invoice = LightningDevKit.Bindings.Bolt12Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt12Invoice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func offerChains() -> [[Swift.UInt8]]?
    public func chain() -> [Swift.UInt8]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func messagePaths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity?
    public func payerMetadata() -> [Swift.UInt8]
    public func invoiceRequestFeatures() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func createdAt() -> Swift.UInt64
    public func relativeExpiry() -> Swift.UInt64
    public func isExpired() -> Swift.Bool
    public func paymentHash() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64
    public func invoiceFeatures() -> LightningDevKit.Bindings.Bolt12InvoiceFeatures
    public func signingPubkey() -> [Swift.UInt8]
    public func signature() -> [Swift.UInt8]
    public func signableHash() -> [Swift.UInt8]
    public func verify(key: LightningDevKit.Bindings.ExpandedKey) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InMemorySignerDecodeErrorZ = LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InMemorySignerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.InMemorySigner) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InMemorySigner?
    @objc deinit
  }
}
public typealias ChannelConfigUpdate = LightningDevKit.Bindings.ChannelConfigUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelConfigUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getForwardingFeeProportionalMillionths() -> Swift.UInt32?
    public func setForwardingFeeProportionalMillionths(val: Swift.UInt32?)
    public func getForwardingFeeBaseMsat() -> Swift.UInt32?
    public func setForwardingFeeBaseMsat(val: Swift.UInt32?)
    public func getCltvExpiryDelta() -> Swift.UInt16?
    public func setCltvExpiryDelta(val: Swift.UInt16?)
    public func getMaxDustHtlcExposureMsat() -> LightningDevKit.Bindings.MaxDustHTLCExposure?
    public func setMaxDustHtlcExposureMsat(val: LightningDevKit.Bindings.MaxDustHTLCExposure?)
    public func getForceCloseAvoidanceMaxFeeSatoshis() -> Swift.UInt64?
    public func setForceCloseAvoidanceMaxFeeSatoshis(val: Swift.UInt64?)
    public init(forwardingFeeProportionalMillionthsArg: Swift.UInt32?, forwardingFeeBaseMsatArg: Swift.UInt32?, cltvExpiryDeltaArg: Swift.UInt16?, maxDustHtlcExposureMsatArg: LightningDevKit.Bindings.MaxDustHTLCExposure?, forceCloseAvoidanceMaxFeeSatoshisArg: Swift.UInt64?)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelConfigUpdate
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ClaimedHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_ClaimedHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClaimedHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ClaimedHTLC) -> LightningDevKit.Bindings.Result_ClaimedHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClaimedHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClaimedHTLC?
    @objc deinit
  }
}
public typealias PhantomRouteHints = LightningDevKit.Bindings.PhantomRouteHints
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomRouteHints : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func setChannels(val: [LightningDevKit.Bindings.ChannelDetails])
    public func getPhantomScid() -> Swift.UInt64
    public func setPhantomScid(val: Swift.UInt64)
    public func getRealNodePubkey() -> [Swift.UInt8]
    public func setRealNodePubkey(val: [Swift.UInt8])
    public init(channelsArg: [LightningDevKit.Bindings.ChannelDetails], phantomScidArg: Swift.UInt64, realNodePubkeyArg: [Swift.UInt8])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias LockedChannelMonitor = LightningDevKit.Bindings.LockedChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LockedChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias WalletSource = LightningDevKit.Bindings.WalletSource
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class WalletSource : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func listConfirmedUtxos() -> LightningDevKit.Bindings.Result_CVec_UtxoZNoneZ
    open func getChangeScript() -> LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
    open func signPsbt(psbt: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    @objc deinit
  }
}
public typealias UtxoLookup = LightningDevKit.Bindings.UtxoLookup
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class UtxoLookup : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getUtxo(chainHash: [Swift.UInt8]?, shortChannelId: Swift.UInt64) -> LightningDevKit.Bindings.UtxoResult
    @objc deinit
  }
}
public typealias OneHopBlindedPathCandidate = LightningDevKit.Bindings.OneHopBlindedPathCandidate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OneHopBlindedPathCandidate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BuiltCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BuiltCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BuiltCommitmentTransaction) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BuiltCommitmentTransaction?
    @objc deinit
  }
}
public typealias Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ = LightningDevKit.Bindings.Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [(LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)]) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [(LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)]?
    @objc deinit
  }
}
public typealias Result_SendSuccessSendErrorZ = LightningDevKit.Bindings.Result_SendSuccessSendErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SendSuccessSendErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SendSuccess) -> LightningDevKit.Bindings.Result_SendSuccessSendErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SendError) -> LightningDevKit.Bindings.Result_SendSuccessSendErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SendError?
    public func getValue() -> LightningDevKit.Bindings.SendSuccess?
    @objc deinit
  }
}
public typealias FundingSigned = LightningDevKit.Bindings.FundingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingSigned : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], signatureArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.FundingSigned, b: LightningDevKit.Bindings.FundingSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ScorerAccountingForInFlightHtlcs = LightningDevKit.Bindings.ScorerAccountingForInFlightHtlcs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ScorerAccountingForInFlightHtlcs : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(scorer: LightningDevKit.Bindings.ScoreLookUp, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs)
    public func asScoreLookUp() -> LightningDevKit.Bindings.ScoreLookUp
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Route = LightningDevKit.Bindings.Route
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Route : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPaths() -> [LightningDevKit.Bindings.Path]
    public func setPaths(val: [LightningDevKit.Bindings.Path])
    public func getRouteParams() -> LightningDevKit.Bindings.RouteParameters?
    public func setRouteParams(val: LightningDevKit.Bindings.RouteParameters)
    public init(pathsArg: [LightningDevKit.Bindings.Path], routeParamsArg: LightningDevKit.Bindings.RouteParameters)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Route, b: LightningDevKit.Bindings.Route) -> Swift.Bool
    public func getTotalFees() -> Swift.UInt64
    public func getTotalAmount() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ErroneousField = LightningDevKit.Bindings.ErroneousField
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErroneousField : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTlvFieldnum() -> Swift.UInt64
    public func setTlvFieldnum(val: Swift.UInt64)
    public func getSuggestedValue() -> [Swift.UInt8]?
    public func setSuggestedValue(val: [Swift.UInt8]?)
    public init(tlvFieldnumArg: Swift.UInt64, suggestedValueArg: [Swift.UInt8]?)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelMonitorUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelMonitorUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelMonitorUpdate?
    @objc deinit
  }
}
public typealias ClosingSignedFeeRange = LightningDevKit.Bindings.ClosingSignedFeeRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSignedFeeRange : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getMinFeeSatoshis() -> Swift.UInt64
    public func setMinFeeSatoshis(val: Swift.UInt64)
    public func getMaxFeeSatoshis() -> Swift.UInt64
    public func setMaxFeeSatoshis(val: Swift.UInt64)
    public init(minFeeSatoshisArg: Swift.UInt64, maxFeeSatoshisArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ClosingSignedFeeRange, b: LightningDevKit.Bindings.ClosingSignedFeeRange) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelDerivationParameters = LightningDevKit.Bindings.ChannelDerivationParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelDerivationParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getValueSatoshis() -> Swift.UInt64
    public func setValueSatoshis(val: Swift.UInt64)
    public func getKeysId() -> [Swift.UInt8]?
    public func setKeysId(val: [Swift.UInt8])
    public func getTransactionParameters() -> LightningDevKit.Bindings.ChannelTransactionParameters
    public func setTransactionParameters(val: LightningDevKit.Bindings.ChannelTransactionParameters)
    public init(valueSatoshisArg: Swift.UInt64, keysIdArg: [Swift.UInt8], transactionParametersArg: LightningDevKit.Bindings.ChannelTransactionParameters)
    public class func eq(a: LightningDevKit.Bindings.ChannelDerivationParameters, b: LightningDevKit.Bindings.ChannelDerivationParameters) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelDerivationParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UpdateFailHTLC = LightningDevKit.Bindings.UpdateFailHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailHTLC : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UpdateFailHTLC, b: LightningDevKit.Bindings.UpdateFailHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BlindedHopDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedHop) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedHop?
    @objc deinit
  }
}
public typealias Result_BlindedPathDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedPathDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias RouteHop = LightningDevKit.Bindings.RouteHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHop : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPubkey() -> [Swift.UInt8]
    public func setPubkey(val: [Swift.UInt8])
    public func getNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setNodeFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getChannelFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setChannelFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getFeeMsat() -> Swift.UInt64
    public func setFeeMsat(val: Swift.UInt64)
    public func getCltvExpiryDelta() -> Swift.UInt32
    public func setCltvExpiryDelta(val: Swift.UInt32)
    public func getMaybeAnnouncedChannel() -> Swift.Bool
    public func setMaybeAnnouncedChannel(val: Swift.Bool)
    public init(pubkeyArg: [Swift.UInt8], nodeFeaturesArg: LightningDevKit.Bindings.NodeFeatures, shortChannelIdArg: Swift.UInt64, channelFeaturesArg: LightningDevKit.Bindings.ChannelFeatures, feeMsatArg: Swift.UInt64, cltvExpiryDeltaArg: Swift.UInt32, maybeAnnouncedChannelArg: Swift.Bool)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHop, b: LightningDevKit.Bindings.RouteHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UtxoLookupError = LightningDevKit.Bindings.UtxoLookupError
extension LightningDevKit.Bindings {
  public enum UtxoLookupError {
    case UnknownChain
    case UnknownTx
    public static func == (a: LightningDevKit.Bindings.UtxoLookupError, b: LightningDevKit.Bindings.UtxoLookupError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_BlindedPayInfoDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedPayInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedPayInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedPayInfo) -> LightningDevKit.Bindings.Result_BlindedPayInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedPayInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedPayInfo?
    @objc deinit
  }
}
public typealias Bech32Error = LightningDevKit.Bindings.Bech32Error
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bech32Error : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum Bech32ErrorType {
      case MissingSeparator
      case InvalidChecksum
      case InvalidLength
      case InvalidChar
      case InvalidData
      case InvalidPadding
      case MixedCase
      public static func == (a: LightningDevKit.Bindings.Bech32Error.Bech32ErrorType, b: LightningDevKit.Bindings.Bech32Error.Bech32ErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Bech32Error.Bech32ErrorType
    public func getValueAsInvalidChar() -> Swift.UInt32?
    public func getValueAsInvalidData() -> Swift.UInt8?
    @objc deinit
  }
}
public typealias Result_TransactionU16LenLimitedNoneZ = LightningDevKit.Bindings.Result_TransactionU16LenLimitedNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TransactionU16LenLimitedNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TransactionU16LenLimited) -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TransactionU16LenLimited?
    @objc deinit
  }
}
public typealias Bolt11SemanticError = LightningDevKit.Bindings.Bolt11SemanticError
extension LightningDevKit.Bindings {
  public enum Bolt11SemanticError {
    case NoPaymentHash
    case MultiplePaymentHashes
    case NoDescription
    case MultipleDescriptions
    case NoPaymentSecret
    case MultiplePaymentSecrets
    case InvalidFeatures
    case InvalidRecoveryId
    case InvalidSignature
    case ImpreciseAmount
    public static func == (a: LightningDevKit.Bindings.Bolt11SemanticError, b: LightningDevKit.Bindings.Bolt11SemanticError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_VerifiedInvoiceRequestNoneZ = LightningDevKit.Bindings.Result_VerifiedInvoiceRequestNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_VerifiedInvoiceRequestNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.VerifiedInvoiceRequest) -> LightningDevKit.Bindings.Result_VerifiedInvoiceRequestNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_VerifiedInvoiceRequestNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.VerifiedInvoiceRequest?
    @objc deinit
  }
}
public typealias CommitmentUpdate = LightningDevKit.Bindings.CommitmentUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getUpdateAddHtlcs() -> [LightningDevKit.Bindings.UpdateAddHTLC]
    public func setUpdateAddHtlcs(val: [LightningDevKit.Bindings.UpdateAddHTLC])
    public func getUpdateFulfillHtlcs() -> [LightningDevKit.Bindings.UpdateFulfillHTLC]
    public func setUpdateFulfillHtlcs(val: [LightningDevKit.Bindings.UpdateFulfillHTLC])
    public func getUpdateFailHtlcs() -> [LightningDevKit.Bindings.UpdateFailHTLC]
    public func setUpdateFailHtlcs(val: [LightningDevKit.Bindings.UpdateFailHTLC])
    public func getUpdateFailMalformedHtlcs() -> [LightningDevKit.Bindings.UpdateFailMalformedHTLC]
    public func setUpdateFailMalformedHtlcs(val: [LightningDevKit.Bindings.UpdateFailMalformedHTLC])
    public func getUpdateFee() -> LightningDevKit.Bindings.UpdateFee?
    public func setUpdateFee(val: LightningDevKit.Bindings.UpdateFee)
    public func getCommitmentSigned() -> LightningDevKit.Bindings.CommitmentSigned
    public func setCommitmentSigned(val: LightningDevKit.Bindings.CommitmentSigned)
    public init(updateAddHtlcsArg: [LightningDevKit.Bindings.UpdateAddHTLC], updateFulfillHtlcsArg: [LightningDevKit.Bindings.UpdateFulfillHTLC], updateFailHtlcsArg: [LightningDevKit.Bindings.UpdateFailHTLC], updateFailMalformedHtlcsArg: [LightningDevKit.Bindings.UpdateFailMalformedHTLC], updateFeeArg: LightningDevKit.Bindings.UpdateFee, commitmentSignedArg: LightningDevKit.Bindings.CommitmentSigned)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.CommitmentUpdate, b: LightningDevKit.Bindings.CommitmentUpdate) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Fallback = LightningDevKit.Bindings.Fallback
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Fallback : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum FallbackType {
      case SegWitProgram
      case PubKeyHash
      case ScriptHash
      public static func == (a: LightningDevKit.Bindings.Fallback.FallbackType, b: LightningDevKit.Bindings.Fallback.FallbackType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Fallback.FallbackType
    public class func initWithSegWitProgram(version: Swift.UInt8, program: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func initWithPubKeyHash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func initWithScriptHash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Fallback, b: LightningDevKit.Bindings.Fallback) -> Swift.Bool
    public func getValueAsSegWitProgram() -> LightningDevKit.Bindings.Fallback.SegWitProgram?
    public func getValueAsPubKeyHash() -> [Swift.UInt8]?
    public func getValueAsScriptHash() -> [Swift.UInt8]?
    @objc deinit
    @_hasMissingDesignatedInitializers public class SegWitProgram : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getVersion() -> Swift.UInt8
      public func getProgram() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias BindingsInit = LightningDevKit.Bindings.BindingsInit
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BindingsInit : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeatures() -> LightningDevKit.Bindings.InitFeatures
    public func setFeatures(val: LightningDevKit.Bindings.InitFeatures)
    public func getNetworks() -> [[Swift.UInt8]]?
    public func setNetworks(val: [[Swift.UInt8]]?)
    public func getRemoteNetworkAddress() -> LightningDevKit.Bindings.SocketAddress?
    public func setRemoteNetworkAddress(val: LightningDevKit.Bindings.SocketAddress?)
    public init(featuresArg: LightningDevKit.Bindings.InitFeatures, networksArg: [[Swift.UInt8]]?, remoteNetworkAddressArg: LightningDevKit.Bindings.SocketAddress?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BindingsInit, b: LightningDevKit.Bindings.BindingsInit) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias TxAddOutput = LightningDevKit.Bindings.TxAddOutput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxAddOutput : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSerialId() -> Swift.UInt64
    public func setSerialId(val: Swift.UInt64)
    public func getSats() -> Swift.UInt64
    public func setSats(val: Swift.UInt64)
    public func getScript() -> [Swift.UInt8]
    public func setScript(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], serialIdArg: Swift.UInt64, satsArg: Swift.UInt64, scriptArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxAddOutput, b: LightningDevKit.Bindings.TxAddOutput) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxAddOutputDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RevocationKeyDecodeErrorZ = LightningDevKit.Bindings.Result_RevocationKeyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RevocationKeyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RevocationKey) -> LightningDevKit.Bindings.Result_RevocationKeyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RevocationKeyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RevocationKey?
    @objc deinit
  }
}
public typealias Event = LightningDevKit.Bindings.Event
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Event : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum EventType {
      case FundingGenerationReady
      case PaymentClaimable
      case PaymentClaimed
      case ConnectionNeeded
      case InvoiceRequestFailed
      case PaymentSent
      case PaymentFailed
      case PaymentPathSuccessful
      case PaymentPathFailed
      case ProbeSuccessful
      case ProbeFailed
      case PendingHTLCsForwardable
      case HTLCIntercepted
      case SpendableOutputs
      case PaymentForwarded
      case ChannelPending
      case ChannelReady
      case ChannelClosed
      case DiscardFunding
      case OpenChannelRequest
      case HTLCHandlingFailed
      case BumpTransaction
      public static func == (a: LightningDevKit.Bindings.Event.EventType, b: LightningDevKit.Bindings.Event.EventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Event.EventType
    public class func initWithFundingGenerationReady(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, outputScript: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentClaimable(receiverNodeId: [Swift.UInt8], paymentHash: [Swift.UInt8], onionFields: LightningDevKit.Bindings.RecipientOnionFields, amountMsat: Swift.UInt64, counterpartySkimmedFeeMsat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose, viaChannelId: [Swift.UInt8]?, viaUserChannelId: [Swift.UInt8]?, claimDeadline: Swift.UInt32?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentClaimed(receiverNodeId: [Swift.UInt8], paymentHash: [Swift.UInt8], amountMsat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose, htlcs: [LightningDevKit.Bindings.ClaimedHTLC], senderIntendedTotalMsat: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithConnectionNeeded(nodeId: [Swift.UInt8], addresses: [LightningDevKit.Bindings.SocketAddress]) -> LightningDevKit.Bindings.Event
    public class func initWithInvoiceRequestFailed(paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentSent(paymentId: [Swift.UInt8]?, paymentPreimage: [Swift.UInt8], paymentHash: [Swift.UInt8], feePaidMsat: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentFailed(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], reason: LightningDevKit.Bindings.PaymentFailureReason?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentPathSuccessful(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8]?, path: LightningDevKit.Bindings.Path) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentPathFailed(paymentId: [Swift.UInt8]?, paymentHash: [Swift.UInt8], paymentFailedPermanently: Swift.Bool, failure: LightningDevKit.Bindings.PathFailure, path: LightningDevKit.Bindings.Path, shortChannelId: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithProbeSuccessful(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], path: LightningDevKit.Bindings.Path) -> LightningDevKit.Bindings.Event
    public class func initWithProbeFailed(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], path: LightningDevKit.Bindings.Path, shortChannelId: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithPendingHtlcsForwardable(timeForwardable: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func initWithHtlcintercepted(interceptId: [Swift.UInt8], requestedNextHopScid: Swift.UInt64, paymentHash: [Swift.UInt8], inboundAmountMsat: Swift.UInt64, expectedOutboundAmountMsat: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func initWithSpendableOutputs(outputs: [LightningDevKit.Bindings.SpendableOutputDescriptor], channelId: [Swift.UInt8]?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentForwarded(prevChannelId: [Swift.UInt8]?, nextChannelId: [Swift.UInt8]?, feeEarnedMsat: Swift.UInt64?, claimFromOnchainTx: Swift.Bool, outboundAmountForwardedMsat: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithChannelPending(channelId: [Swift.UInt8], userChannelId: [Swift.UInt8], formerTemporaryChannelId: [Swift.UInt8]?, counterpartyNodeId: [Swift.UInt8], fundingTxo: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Event
    public class func initWithChannelReady(channelId: [Swift.UInt8], userChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], channelType: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Event
    public class func initWithChannelClosed(channelId: [Swift.UInt8], userChannelId: [Swift.UInt8], reason: LightningDevKit.Bindings.ClosureReason, counterpartyNodeId: [Swift.UInt8], channelCapacitySats: Swift.UInt64?, channelFundingTxo: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Event
    public class func initWithDiscardFunding(channelId: [Swift.UInt8], transaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithOpenChannelRequest(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], fundingSatoshis: Swift.UInt64, pushMsat: Swift.UInt64, channelType: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Event
    public class func initWithHtlchandlingFailed(prevChannelId: [Swift.UInt8], failedNextDestination: LightningDevKit.Bindings.HTLCDestination) -> LightningDevKit.Bindings.Event
    public class func initWithBumpTransaction(a: LightningDevKit.Bindings.BumpTransactionEvent) -> LightningDevKit.Bindings.Event
    public class func eq(a: LightningDevKit.Bindings.Event, b: LightningDevKit.Bindings.Event) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public func getValueAsFundingGenerationReady() -> LightningDevKit.Bindings.Event.FundingGenerationReady?
    public func getValueAsPaymentClaimable() -> LightningDevKit.Bindings.Event.PaymentClaimable?
    public func getValueAsPaymentClaimed() -> LightningDevKit.Bindings.Event.PaymentClaimed?
    public func getValueAsConnectionNeeded() -> LightningDevKit.Bindings.Event.ConnectionNeeded?
    public func getValueAsInvoiceRequestFailed() -> LightningDevKit.Bindings.Event.InvoiceRequestFailed?
    public func getValueAsPaymentSent() -> LightningDevKit.Bindings.Event.PaymentSent?
    public func getValueAsPaymentFailed() -> LightningDevKit.Bindings.Event.PaymentFailed?
    public func getValueAsPaymentPathSuccessful() -> LightningDevKit.Bindings.Event.PaymentPathSuccessful?
    public func getValueAsPaymentPathFailed() -> LightningDevKit.Bindings.Event.PaymentPathFailed?
    public func getValueAsProbeSuccessful() -> LightningDevKit.Bindings.Event.ProbeSuccessful?
    public func getValueAsProbeFailed() -> LightningDevKit.Bindings.Event.ProbeFailed?
    public func getValueAsPendingHtlcsForwardable() -> LightningDevKit.Bindings.Event.PendingHTLCsForwardable?
    public func getValueAsHtlcIntercepted() -> LightningDevKit.Bindings.Event.HTLCIntercepted?
    public func getValueAsSpendableOutputs() -> LightningDevKit.Bindings.Event.SpendableOutputs?
    public func getValueAsPaymentForwarded() -> LightningDevKit.Bindings.Event.PaymentForwarded?
    public func getValueAsChannelPending() -> LightningDevKit.Bindings.Event.ChannelPending?
    public func getValueAsChannelReady() -> LightningDevKit.Bindings.Event.ChannelReady?
    public func getValueAsChannelClosed() -> LightningDevKit.Bindings.Event.ChannelClosed?
    public func getValueAsDiscardFunding() -> LightningDevKit.Bindings.Event.DiscardFunding?
    public func getValueAsOpenChannelRequest() -> LightningDevKit.Bindings.Event.OpenChannelRequest?
    public func getValueAsHtlcHandlingFailed() -> LightningDevKit.Bindings.Event.HTLCHandlingFailed?
    public func getValueAsBumpTransaction() -> LightningDevKit.Bindings.BumpTransactionEvent?
    @objc deinit
    @_hasMissingDesignatedInitializers public class FundingGenerationReady : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getTemporaryChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getChannelValueSatoshis() -> Swift.UInt64
      public func getOutputScript() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentClaimable : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getReceiverNodeId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getOnionFields() -> LightningDevKit.Bindings.RecipientOnionFields
      public func getAmountMsat() -> Swift.UInt64
      public func getCounterpartySkimmedFeeMsat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      public func getViaChannelId() -> [Swift.UInt8]?
      public func getViaUserChannelId() -> [Swift.UInt8]?
      public func getClaimDeadline() -> Swift.UInt32?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentClaimed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getReceiverNodeId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getAmountMsat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      public func getHtlcs() -> [LightningDevKit.Bindings.ClaimedHTLC]
      public func getSenderIntendedTotalMsat() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ConnectionNeeded : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getAddresses() -> [LightningDevKit.Bindings.SocketAddress]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class InvoiceRequestFailed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentSent : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]?
      public func getPaymentPreimage() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getFeePaidMsat() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentFailed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getReason() -> LightningDevKit.Bindings.PaymentFailureReason?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathSuccessful : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]?
      public func getPath() -> LightningDevKit.Bindings.Path
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathFailed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]?
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPaymentFailedPermanently() -> Swift.Bool
      public func getFailure() -> LightningDevKit.Bindings.PathFailure
      public func getPath() -> LightningDevKit.Bindings.Path
      public func getShortChannelId() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeSuccessful : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPath() -> LightningDevKit.Bindings.Path
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeFailed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPath() -> LightningDevKit.Bindings.Path
      public func getShortChannelId() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PendingHTLCsForwardable : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getTimeForwardable() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCIntercepted : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getInterceptId() -> [Swift.UInt8]
      public func getRequestedNextHopScid() -> Swift.UInt64
      public func getPaymentHash() -> [Swift.UInt8]
      public func getInboundAmountMsat() -> Swift.UInt64
      public func getExpectedOutboundAmountMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SpendableOutputs : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getOutputs() -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
      public func getChannelId() -> [Swift.UInt8]?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentForwarded : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPrevChannelId() -> [Swift.UInt8]?
      public func getNextChannelId() -> [Swift.UInt8]?
      public func getFeeEarnedMsat() -> Swift.UInt64?
      public func getClaimFromOnchainTx() -> Swift.Bool
      public func getOutboundAmountForwardedMsat() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelPending : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getChannelId() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      public func getFormerTemporaryChannelId() -> [Swift.UInt8]?
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getFundingTxo() -> LightningDevKit.Bindings.OutPoint
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelReady : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getChannelId() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelClosed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getChannelId() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      public func getReason() -> LightningDevKit.Bindings.ClosureReason
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getChannelCapacitySats() -> Swift.UInt64?
      public func getChannelFundingTxo() -> LightningDevKit.Bindings.OutPoint
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class DiscardFunding : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getChannelId() -> [Swift.UInt8]
      public func getTransaction() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OpenChannelRequest : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getTemporaryChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getFundingSatoshis() -> Swift.UInt64
      public func getPushMsat() -> Swift.UInt64
      public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCHandlingFailed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPrevChannelId() -> [Swift.UInt8]
      public func getFailedNextDestination() -> LightningDevKit.Bindings.HTLCDestination
      @objc deinit
    }
  }
}
public typealias BumpTransactionEventHandler = LightningDevKit.Bindings.BumpTransactionEventHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BumpTransactionEventHandler : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(broadcaster: LightningDevKit.Bindings.BroadcasterInterface, utxoSource: LightningDevKit.Bindings.CoinSelectionSource, signerProvider: LightningDevKit.Bindings.SignerProvider, logger: LightningDevKit.Bindings.Logger)
    public func handleEvent(event: LightningDevKit.Bindings.BumpTransactionEvent)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_StrZIOErrorZ = LightningDevKit.Bindings.Result_CVec_StrZIOErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_StrZIOErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.String]) -> LightningDevKit.Bindings.Result_CVec_StrZIOErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_CVec_StrZIOErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    public func getValue() -> [Swift.String]?
    @objc deinit
  }
}
public typealias NetworkUpdate = LightningDevKit.Bindings.NetworkUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum NetworkUpdateType {
      case ChannelUpdateMessage
      case ChannelFailure
      case NodeFailure
      public static func == (a: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType, b: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType
    public class func initWithChannelUpdateMessage(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.NetworkUpdate
    public class func initWithChannelFailure(shortChannelId: Swift.UInt64, isPermanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public class func initWithNodeFailure(nodeId: [Swift.UInt8], isPermanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public class func eq(a: LightningDevKit.Bindings.NetworkUpdate, b: LightningDevKit.Bindings.NetworkUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public func getValueAsChannelUpdateMessage() -> LightningDevKit.Bindings.NetworkUpdate.ChannelUpdateMessage?
    public func getValueAsChannelFailure() -> LightningDevKit.Bindings.NetworkUpdate.ChannelFailure?
    public func getValueAsNodeFailure() -> LightningDevKit.Bindings.NetworkUpdate.NodeFailure?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ChannelUpdateMessage : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelFailure : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getShortChannelId() -> Swift.UInt64
      public func isPermanent() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class NodeFailure : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func isPermanent() -> Swift.Bool
      @objc deinit
    }
  }
}
public typealias Result_ChannelReestablishDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReestablishDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReestablish?
    @objc deinit
  }
}
public typealias Result_OpenChannelV2DecodeErrorZ = LightningDevKit.Bindings.Result_OpenChannelV2DecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OpenChannelV2DecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OpenChannelV2) -> LightningDevKit.Bindings.Result_OpenChannelV2DecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OpenChannelV2DecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OpenChannelV2?
    @objc deinit
  }
}
public typealias InvoiceRequestFeatures = LightningDevKit.Bindings.InvoiceRequestFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceRequestFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.InvoiceRequestFeatures, b: LightningDevKit.Bindings.InvoiceRequestFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OnionMessageHandler = LightningDevKit.Bindings.OnionMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class OnionMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getAndClearConnectionsNeeded() -> [([Swift.UInt8], [LightningDevKit.Bindings.SocketAddress])]
    open func handleOnionMessage(peerNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OnionMessage)
    open func nextOnionMessageForPeer(peerNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.OnionMessage
    open func peerConnected(theirNodeId: [Swift.UInt8], initArgument: LightningDevKit.Bindings.BindingsInit, inbound: Swift.Bool) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func peerDisconnected(theirNodeId: [Swift.UInt8])
    open func timerTickOccurred()
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    @objc deinit
  }
}
public typealias InvoiceError = LightningDevKit.Bindings.InvoiceError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getErroneousField() -> LightningDevKit.Bindings.ErroneousField?
    public func setErroneousField(val: LightningDevKit.Bindings.ErroneousField)
    public func getMessage() -> LightningDevKit.Bindings.UntrustedString
    public func setMessage(val: LightningDevKit.Bindings.UntrustedString)
    public init(erroneousFieldArg: LightningDevKit.Bindings.ErroneousField, messageArg: LightningDevKit.Bindings.UntrustedString)
    public class func initWithString(s: Swift.String) -> LightningDevKit.Bindings.InvoiceError
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InvoiceErrorDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Score = LightningDevKit.Bindings.Score
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Score : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(scoreLookUp: LightningDevKit.Bindings.ScoreLookUp, scoreUpdate: LightningDevKit.Bindings.ScoreUpdate)
    open func write() -> [Swift.UInt8]
    public func getScoreLookUp() -> LightningDevKit.Bindings.ScoreLookUp
    public func getScoreUpdate() -> LightningDevKit.Bindings.ScoreUpdate
    @objc deinit
  }
}
public typealias HtlcKey = LightningDevKit.Bindings.HtlcKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HtlcKey : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public class func initWith(aArg: [Swift.UInt8]) -> LightningDevKit.Bindings.HtlcKey
    public class func eq(a: LightningDevKit.Bindings.HtlcKey, b: LightningDevKit.Bindings.HtlcKey) -> Swift.Bool
    public class func initWithBasepoint(countersignatoryBasepoint: LightningDevKit.Bindings.HtlcBasepoint, perCommitmentPoint: [Swift.UInt8]) -> LightningDevKit.Bindings.HtlcKey
    public class func initWithSecretKey(sk: [Swift.UInt8]) -> LightningDevKit.Bindings.HtlcKey
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HtlcKeyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelConfigDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelConfigDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelConfig?
    @objc deinit
  }
}
public typealias Result_CommitmentSignedDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CommitmentSigned) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentSigned?
    @objc deinit
  }
}
public typealias Result_UnsignedChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelUpdate?
    @objc deinit
  }
}
public typealias Result_NodeAliasDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAliasDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAlias) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAlias?
    @objc deinit
  }
}
public typealias Packet = LightningDevKit.Bindings.Packet
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Packet : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getVersion() -> Swift.UInt8
    public func setVersion(val: Swift.UInt8)
    public func getPublicKey() -> [Swift.UInt8]
    public func setPublicKey(val: [Swift.UInt8])
    public func getHopData() -> [Swift.UInt8]
    public func setHopData(val: [Swift.UInt8])
    public func getHmac() -> [Swift.UInt8]?
    public func setHmac(val: [Swift.UInt8])
    public init(versionArg: Swift.UInt8, publicKeyArg: [Swift.UInt8], hopDataArg: [Swift.UInt8], hmacArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Packet, b: LightningDevKit.Bindings.Packet) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TxSignaturesDecodeErrorZ = LightningDevKit.Bindings.Result_TxSignaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxSignaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxSignatures) -> LightningDevKit.Bindings.Result_TxSignaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxSignaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxSignatures?
    @objc deinit
  }
}
public typealias Result_TxOutUtxoLookupErrorZ = LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxOutUtxoLookupErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxOut) -> LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.UtxoLookupError) -> LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.UtxoLookupError?
    public func getValue() -> LightningDevKit.Bindings.TxOut?
    @objc deinit
  }
}
public typealias TxAbort = LightningDevKit.Bindings.TxAbort
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxAbort : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getData() -> [Swift.UInt8]
    public func setData(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], dataArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxAbort, b: LightningDevKit.Bindings.TxAbort) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxAbortDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ErrorMessageDecodeErrorZ = LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ErrorMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ErrorMessage?
    @objc deinit
  }
}
public typealias TxOut = LightningDevKit.Bindings.TxOut
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxOut : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(scriptPubkey: [Swift.UInt8], value: Swift.UInt64)
    public func getScriptPubkey() -> [Swift.UInt8]
    public func getValue() -> Swift.UInt64
    @objc deinit
  }
}
public typealias TxRemoveInput = LightningDevKit.Bindings.TxRemoveInput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxRemoveInput : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSerialId() -> Swift.UInt64
    public func setSerialId(val: Swift.UInt64)
    public init(channelIdArg: [Swift.UInt8], serialIdArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxRemoveInput, b: LightningDevKit.Bindings.TxRemoveInput) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxRemoveInputDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_OnionPacketDecodeErrorZ = LightningDevKit.Bindings.Result_OnionPacketDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OnionPacketDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OnionPacket) -> LightningDevKit.Bindings.Result_OnionPacketDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OnionPacketDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OnionPacket?
    @objc deinit
  }
}
public typealias Result_HTLCDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCDescriptor) -> LightningDevKit.Bindings.Result_HTLCDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCDescriptor?
    @objc deinit
  }
}
public typealias Quantity = LightningDevKit.Bindings.Quantity
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Quantity : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MultiThreadedScoreLockRead = LightningDevKit.Bindings.MultiThreadedScoreLockRead
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedScoreLockRead : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func asScoreLookUp() -> LightningDevKit.Bindings.ScoreLookUp
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias APIError = LightningDevKit.Bindings.APIError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class APIError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum APIErrorType {
      case APIMisuseError
      case FeeRateTooHigh
      case InvalidRoute
      case ChannelUnavailable
      case MonitorUpdateInProgress
      case IncompatibleShutdownScript
      public static func == (a: LightningDevKit.Bindings.APIError.APIErrorType, b: LightningDevKit.Bindings.APIError.APIErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.APIError.APIErrorType
    public class func initWithApimisuseError(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithFeeRateTooHigh(err: Swift.String, feerate: Swift.UInt32) -> LightningDevKit.Bindings.APIError
    public class func initWithInvalidRoute(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithChannelUnavailable(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithMonitorUpdateInProgress() -> LightningDevKit.Bindings.APIError
    public class func initWithIncompatibleShutdownScript(script: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.APIError
    public class func eq(a: LightningDevKit.Bindings.APIError, b: LightningDevKit.Bindings.APIError) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_APIErrorZDecodeErrorZ
    public func getValueAsApiMisuseError() -> LightningDevKit.Bindings.APIError.APIMisuseError?
    public func getValueAsFeeRateTooHigh() -> LightningDevKit.Bindings.APIError.FeeRateTooHigh?
    public func getValueAsInvalidRoute() -> LightningDevKit.Bindings.APIError.InvalidRoute?
    public func getValueAsChannelUnavailable() -> LightningDevKit.Bindings.APIError.ChannelUnavailable?
    public func getValueAsIncompatibleShutdownScript() -> LightningDevKit.Bindings.APIError.IncompatibleShutdownScript?
    @objc deinit
    @_hasMissingDesignatedInitializers public class APIMisuseError : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FeeRateTooHigh : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> Swift.String
      public func getFeerate() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class InvalidRoute : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelUnavailable : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class IncompatibleShutdownScript : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getScript() -> LightningDevKit.Bindings.ShutdownScript
      @objc deinit
    }
  }
}
public typealias MessageSendEventsProvider = LightningDevKit.Bindings.MessageSendEventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class MessageSendEventsProvider : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getAndClearPendingMsgEvents() -> [LightningDevKit.Bindings.MessageSendEvent]
    @objc deinit
  }
}
public typealias OpenChannelV2 = LightningDevKit.Bindings.OpenChannelV2
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OpenChannelV2 : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingFeerateSatPer1000Weight() -> Swift.UInt32
    public func setFundingFeerateSatPer1000Weight(val: Swift.UInt32)
    public func getCommitmentFeerateSatPer1000Weight() -> Swift.UInt32
    public func setCommitmentFeerateSatPer1000Weight(val: Swift.UInt32)
    public func getFundingSatoshis() -> Swift.UInt64
    public func setFundingSatoshis(val: Swift.UInt64)
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getLocktime() -> Swift.UInt32
    public func setLocktime(val: Swift.UInt32)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentBasepoint() -> [Swift.UInt8]
    public func setPaymentBasepoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getSecondPerCommitmentPoint() -> [Swift.UInt8]
    public func setSecondPerCommitmentPoint(val: [Swift.UInt8])
    public func getChannelFlags() -> Swift.UInt8
    public func setChannelFlags(val: Swift.UInt8)
    public func getShutdownScriptpubkey() -> [Swift.UInt8]?
    public func setShutdownScriptpubkey(val: [Swift.UInt8]?)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func getRequireConfirmedInputs() -> LightningDevKit.Bindings.Option_NoneZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `val`.")
    public func setRequireConfirmedInputs(val: LightningDevKit.Bindings.Option_NoneZ)
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `requireConfirmedInputsArg`.")
    public init(chainHashArg: [Swift.UInt8], temporaryChannelIdArg: [Swift.UInt8], fundingFeerateSatPer1000WeightArg: Swift.UInt32, commitmentFeerateSatPer1000WeightArg: Swift.UInt32, fundingSatoshisArg: Swift.UInt64, dustLimitSatoshisArg: Swift.UInt64, maxHtlcValueInFlightMsatArg: Swift.UInt64, htlcMinimumMsatArg: Swift.UInt64, toSelfDelayArg: Swift.UInt16, maxAcceptedHtlcsArg: Swift.UInt16, locktimeArg: Swift.UInt32, fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: [Swift.UInt8], paymentBasepointArg: [Swift.UInt8], delayedPaymentBasepointArg: [Swift.UInt8], htlcBasepointArg: [Swift.UInt8], firstPerCommitmentPointArg: [Swift.UInt8], secondPerCommitmentPointArg: [Swift.UInt8], channelFlagsArg: Swift.UInt8, shutdownScriptpubkeyArg: [Swift.UInt8]?, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures, requireConfirmedInputsArg: LightningDevKit.Bindings.Option_NoneZ)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.OpenChannelV2, b: LightningDevKit.Bindings.OpenChannelV2) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OpenChannelV2DecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NoneNoneZ = LightningDevKit.Bindings.Result_NoneNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func isOk() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_LockedChannelMonitorNoneZ = LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_LockedChannelMonitorNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.LockedChannelMonitor) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.LockedChannelMonitor?
    @objc deinit
  }
}
public typealias Result_HTLCOutputInCommitmentDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCOutputInCommitmentDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCOutputInCommitment?
    @objc deinit
  }
}
public typealias FeeEstimator = LightningDevKit.Bindings.FeeEstimator
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class FeeEstimator : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getEstSatPer1000Weight(confirmationTarget: LightningDevKit.Bindings.ConfirmationTarget) -> Swift.UInt32
    @objc deinit
  }
}
public typealias Result_OnionMessageDecodeErrorZ = LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OnionMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OnionMessage) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OnionMessage?
    @objc deinit
  }
}
public typealias PaymentPurpose = LightningDevKit.Bindings.PaymentPurpose
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentPurpose : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PaymentPurposeType {
      case InvoicePayment
      case SpontaneousPayment
      public static func == (a: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType, b: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType
    public class func initWithInvoicePayment(paymentPreimage: [Swift.UInt8]?, paymentSecret: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public class func initWithSpontaneousPayment(a: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public class func eq(a: LightningDevKit.Bindings.PaymentPurpose, b: LightningDevKit.Bindings.PaymentPurpose) -> Swift.Bool
    public func preimage() -> [Swift.UInt8]?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public func getValueAsInvoicePayment() -> LightningDevKit.Bindings.PaymentPurpose.InvoicePayment?
    public func getValueAsSpontaneousPayment() -> [Swift.UInt8]?
    @objc deinit
    @_hasMissingDesignatedInitializers public class InvoicePayment : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentPreimage() -> [Swift.UInt8]?
      public func getPaymentSecret() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias ChannelMessageHandler = LightningDevKit.Bindings.ChannelMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ChannelMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(messageSendEventsProvider: LightningDevKit.Bindings.MessageSendEventsProvider)
    open func handleOpenChannel(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannel)
    open func handleOpenChannelV2(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannelV2)
    open func handleAcceptChannel(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannel)
    open func handleAcceptChannelV2(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannelV2)
    open func handleFundingCreated(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated)
    open func handleFundingSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned)
    open func handleChannelReady(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady)
    open func handleShutdown(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Shutdown)
    open func handleClosingSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned)
    open func handleStfu(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Stfu)
    open func handleSplice(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Splice)
    open func handleSpliceAck(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.SpliceAck)
    open func handleSpliceLocked(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.SpliceLocked)
    open func handleTxAddInput(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAddInput)
    open func handleTxAddOutput(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAddOutput)
    open func handleTxRemoveInput(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxRemoveInput)
    open func handleTxRemoveOutput(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxRemoveOutput)
    open func handleTxComplete(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxComplete)
    open func handleTxSignatures(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxSignatures)
    open func handleTxInitRbf(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxInitRbf)
    open func handleTxAckRbf(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAckRbf)
    open func handleTxAbort(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAbort)
    open func handleUpdateAddHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateAddHTLC)
    open func handleUpdateFulfillHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFulfillHTLC)
    open func handleUpdateFailHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailHTLC)
    open func handleUpdateFailMalformedHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailMalformedHTLC)
    open func handleCommitmentSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.CommitmentSigned)
    open func handleRevokeAndAck(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK)
    open func handleUpdateFee(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFee)
    open func handleAnnouncementSignatures(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures)
    open func peerDisconnected(theirNodeId: [Swift.UInt8])
    open func peerConnected(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.BindingsInit, inbound: Swift.Bool) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func handleChannelReestablish(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish)
    open func handleChannelUpdate(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate)
    open func handleError(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ErrorMessage)
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    open func getChainHashes() -> [[Swift.UInt8]]?
    public func getMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    @objc deinit
  }
}
public typealias Secp256k1Error = LightningDevKit.Bindings.Secp256k1Error
extension LightningDevKit.Bindings {
  public enum Secp256k1Error {
    case IncorrectSignature
    case InvalidMessage
    case InvalidPublicKey
    case InvalidSignature
    case InvalidSecretKey
    case InvalidSharedSecret
    case InvalidRecoveryId
    case InvalidTweak
    case NotEnoughMemory
    case InvalidPublicKeySum
    case InvalidParityValue
    public static func == (a: LightningDevKit.Bindings.Secp256k1Error, b: LightningDevKit.Bindings.Secp256k1Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias AcceptChannelV2 = LightningDevKit.Bindings.AcceptChannelV2
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AcceptChannelV2 : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingSatoshis() -> Swift.UInt64
    public func setFundingSatoshis(val: Swift.UInt64)
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getMinimumDepth() -> Swift.UInt32
    public func setMinimumDepth(val: Swift.UInt32)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentBasepoint() -> [Swift.UInt8]
    public func setPaymentBasepoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getSecondPerCommitmentPoint() -> [Swift.UInt8]
    public func setSecondPerCommitmentPoint(val: [Swift.UInt8])
    public func getShutdownScriptpubkey() -> [Swift.UInt8]?
    public func setShutdownScriptpubkey(val: [Swift.UInt8]?)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func getRequireConfirmedInputs() -> LightningDevKit.Bindings.Option_NoneZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `val`.")
    public func setRequireConfirmedInputs(val: LightningDevKit.Bindings.Option_NoneZ)
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `requireConfirmedInputsArg`.")
    public init(temporaryChannelIdArg: [Swift.UInt8], fundingSatoshisArg: Swift.UInt64, dustLimitSatoshisArg: Swift.UInt64, maxHtlcValueInFlightMsatArg: Swift.UInt64, htlcMinimumMsatArg: Swift.UInt64, minimumDepthArg: Swift.UInt32, toSelfDelayArg: Swift.UInt16, maxAcceptedHtlcsArg: Swift.UInt16, fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: [Swift.UInt8], paymentBasepointArg: [Swift.UInt8], delayedPaymentBasepointArg: [Swift.UInt8], htlcBasepointArg: [Swift.UInt8], firstPerCommitmentPointArg: [Swift.UInt8], secondPerCommitmentPointArg: [Swift.UInt8], shutdownScriptpubkeyArg: [Swift.UInt8]?, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures, requireConfirmedInputsArg: LightningDevKit.Bindings.Option_NoneZ)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.AcceptChannelV2, b: LightningDevKit.Bindings.AcceptChannelV2) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AcceptChannelV2DecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TrustedCommitmentTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedCommitmentTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.TrustedCommitmentTransaction) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedCommitmentTransaction?
    @objc deinit
  }
}
public typealias Result_SpliceLockedDecodeErrorZ = LightningDevKit.Bindings.Result_SpliceLockedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpliceLockedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SpliceLocked) -> LightningDevKit.Bindings.Result_SpliceLockedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpliceLockedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SpliceLocked?
    @objc deinit
  }
}
public typealias Result_CounterpartyForwardingInfoDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyForwardingInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyForwardingInfo) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyForwardingInfo?
    @objc deinit
  }
}
public typealias IgnoringMessageHandler = LightningDevKit.Bindings.IgnoringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class IgnoringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func asEventsProvider() -> LightningDevKit.Bindings.EventsProvider
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asRoutingMessageHandler() -> LightningDevKit.Bindings.RoutingMessageHandler
    public func asOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler
    public func asOffersMessageHandler() -> LightningDevKit.Bindings.OffersMessageHandler
    public func asCustomOnionMessageHandler() -> LightningDevKit.Bindings.CustomOnionMessageHandler
    public func asCustomMessageReader() -> LightningDevKit.Bindings.CustomMessageReader
    public func asCustomMessageHandler() -> LightningDevKit.Bindings.CustomMessageHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_PathFailureZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_PathFailureZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_PathFailureZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PathFailure?) -> LightningDevKit.Bindings.Result_COption_PathFailureZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_PathFailureZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PathFailure?
    @objc deinit
  }
}
public typealias BindingsError = LightningDevKit.Bindings.BindingsError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BindingsError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getDummy() -> Swift.UInt8
    @objc deinit
  }
}
public typealias UntrustedString = LightningDevKit.Bindings.UntrustedString
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UntrustedString : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> Swift.String
    public func setA(val: Swift.String)
    public init(aArg: Swift.String)
    public class func eq(a: LightningDevKit.Bindings.UntrustedString, b: LightningDevKit.Bindings.UntrustedString) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UntrustedStringDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RoutingFees = LightningDevKit.Bindings.RoutingFees
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RoutingFees : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getBaseMsat() -> Swift.UInt32
    public func setBaseMsat(val: Swift.UInt32)
    public func getProportionalMillionths() -> Swift.UInt32
    public func setProportionalMillionths(val: Swift.UInt32)
    public init(baseMsatArg: Swift.UInt32, proportionalMillionthsArg: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.RoutingFees, b: LightningDevKit.Bindings.RoutingFees) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentRelayDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentRelayDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentRelayDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentRelay) -> LightningDevKit.Bindings.Result_PaymentRelayDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentRelayDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentRelay?
    @objc deinit
  }
}
public typealias Bolt12SemanticError = LightningDevKit.Bindings.Bolt12SemanticError
extension LightningDevKit.Bindings {
  public enum Bolt12SemanticError {
    case AlreadyExpired
    case UnsupportedChain
    case UnexpectedChain
    case MissingAmount
    case InvalidAmount
    case InsufficientAmount
    case UnexpectedAmount
    case UnsupportedCurrency
    case UnknownRequiredFeatures
    case UnexpectedFeatures
    case MissingDescription
    case MissingSigningPubkey
    case InvalidSigningPubkey
    case UnexpectedSigningPubkey
    case MissingQuantity
    case InvalidQuantity
    case UnexpectedQuantity
    case InvalidMetadata
    case UnexpectedMetadata
    case MissingPayerMetadata
    case MissingPayerId
    case DuplicatePaymentId
    case MissingPaths
    case InvalidPayInfo
    case MissingCreationTime
    case MissingPaymentHash
    case MissingSignature
    public static func == (a: LightningDevKit.Bindings.Bolt12SemanticError, b: LightningDevKit.Bindings.Bolt12SemanticError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias MessageSendEvent = LightningDevKit.Bindings.MessageSendEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageSendEvent : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum MessageSendEventType {
      case SendAcceptChannel
      case SendAcceptChannelV2
      case SendOpenChannel
      case SendOpenChannelV2
      case SendFundingCreated
      case SendFundingSigned
      case SendStfu
      case SendSplice
      case SendSpliceAck
      case SendSpliceLocked
      case SendTxAddInput
      case SendTxAddOutput
      case SendTxRemoveInput
      case SendTxRemoveOutput
      case SendTxComplete
      case SendTxSignatures
      case SendTxInitRbf
      case SendTxAckRbf
      case SendTxAbort
      case SendChannelReady
      case SendAnnouncementSignatures
      case UpdateHTLCs
      case SendRevokeAndACK
      case SendClosingSigned
      case SendShutdown
      case SendChannelReestablish
      case SendChannelAnnouncement
      case BroadcastChannelAnnouncement
      case BroadcastChannelUpdate
      case BroadcastNodeAnnouncement
      case SendChannelUpdate
      case HandleError
      case SendChannelRangeQuery
      case SendShortIdsQuery
      case SendReplyChannelRange
      case SendGossipTimestampFilter
      public static func == (a: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType, b: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType
    public class func initWithSendAcceptChannel(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendAcceptChannelV2(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannelV2) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendOpenChannel(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendOpenChannelV2(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannelV2) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendFundingCreated(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendFundingSigned(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendStfu(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Stfu) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendSplice(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Splice) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendSpliceAck(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.SpliceAck) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendSpliceLocked(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.SpliceLocked) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxAddInput(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAddInput) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxAddOutput(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAddOutput) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxRemoveInput(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxRemoveInput) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxRemoveOutput(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxRemoveOutput) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxComplete(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxComplete) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxSignatures(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxSignatures) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxInitRbf(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxInitRbf) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxAckRbf(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAckRbf) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendTxAbort(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.TxAbort) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelReady(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendAnnouncementSignatures(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithUpdateHtlcs(nodeId: [Swift.UInt8], updates: LightningDevKit.Bindings.CommitmentUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendRevokeAndAck(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendClosingSigned(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendShutdown(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelReestablish(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelAnnouncement(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelAnnouncement, updateMsg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithBroadcastChannelAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement, updateMsg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithBroadcastChannelUpdate(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithBroadcastNodeAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelUpdate(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithHandleError(nodeId: [Swift.UInt8], action: LightningDevKit.Bindings.ErrorAction) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelRangeQuery(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendShortIdsQuery(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendReplyChannelRange(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendGossipTimestampFilter(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.MessageSendEvent
    public func getValueAsSendAcceptChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendAcceptChannel?
    public func getValueAsSendAcceptChannelV2() -> LightningDevKit.Bindings.MessageSendEvent.SendAcceptChannelV2?
    public func getValueAsSendOpenChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendOpenChannel?
    public func getValueAsSendOpenChannelV2() -> LightningDevKit.Bindings.MessageSendEvent.SendOpenChannelV2?
    public func getValueAsSendFundingCreated() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingCreated?
    public func getValueAsSendFundingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingSigned?
    public func getValueAsSendStfu() -> LightningDevKit.Bindings.MessageSendEvent.SendStfu?
    public func getValueAsSendSplice() -> LightningDevKit.Bindings.MessageSendEvent.SendSplice?
    public func getValueAsSendSpliceAck() -> LightningDevKit.Bindings.MessageSendEvent.SendSpliceAck?
    public func getValueAsSendSpliceLocked() -> LightningDevKit.Bindings.MessageSendEvent.SendSpliceLocked?
    public func getValueAsSendTxAddInput() -> LightningDevKit.Bindings.MessageSendEvent.SendTxAddInput?
    public func getValueAsSendTxAddOutput() -> LightningDevKit.Bindings.MessageSendEvent.SendTxAddOutput?
    public func getValueAsSendTxRemoveInput() -> LightningDevKit.Bindings.MessageSendEvent.SendTxRemoveInput?
    public func getValueAsSendTxRemoveOutput() -> LightningDevKit.Bindings.MessageSendEvent.SendTxRemoveOutput?
    public func getValueAsSendTxComplete() -> LightningDevKit.Bindings.MessageSendEvent.SendTxComplete?
    public func getValueAsSendTxSignatures() -> LightningDevKit.Bindings.MessageSendEvent.SendTxSignatures?
    public func getValueAsSendTxInitRbf() -> LightningDevKit.Bindings.MessageSendEvent.SendTxInitRbf?
    public func getValueAsSendTxAckRbf() -> LightningDevKit.Bindings.MessageSendEvent.SendTxAckRbf?
    public func getValueAsSendTxAbort() -> LightningDevKit.Bindings.MessageSendEvent.SendTxAbort?
    public func getValueAsSendChannelReady() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReady?
    public func getValueAsSendAnnouncementSignatures() -> LightningDevKit.Bindings.MessageSendEvent.SendAnnouncementSignatures?
    public func getValueAsUpdateHtlcs() -> LightningDevKit.Bindings.MessageSendEvent.UpdateHTLCs?
    public func getValueAsSendRevokeAndAck() -> LightningDevKit.Bindings.MessageSendEvent.SendRevokeAndACK?
    public func getValueAsSendClosingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendClosingSigned?
    public func getValueAsSendShutdown() -> LightningDevKit.Bindings.MessageSendEvent.SendShutdown?
    public func getValueAsSendChannelReestablish() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReestablish?
    public func getValueAsSendChannelAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelAnnouncement?
    public func getValueAsBroadcastChannelAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelAnnouncement?
    public func getValueAsBroadcastChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelUpdate?
    public func getValueAsBroadcastNodeAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastNodeAnnouncement?
    public func getValueAsSendChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelUpdate?
    public func getValueAsHandleError() -> LightningDevKit.Bindings.MessageSendEvent.HandleError?
    public func getValueAsSendChannelRangeQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelRangeQuery?
    public func getValueAsSendShortIdsQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendShortIdsQuery?
    public func getValueAsSendReplyChannelRange() -> LightningDevKit.Bindings.MessageSendEvent.SendReplyChannelRange?
    public func getValueAsSendGossipTimestampFilter() -> LightningDevKit.Bindings.MessageSendEvent.SendGossipTimestampFilter?
    @objc deinit
    @_hasMissingDesignatedInitializers public class SendAcceptChannel : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AcceptChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendAcceptChannelV2 : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AcceptChannelV2
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendOpenChannel : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.OpenChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendOpenChannelV2 : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.OpenChannelV2
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingCreated : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingCreated
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingSigned : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendStfu : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.Stfu
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendSplice : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.Splice
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendSpliceAck : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.SpliceAck
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendSpliceLocked : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.SpliceLocked
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxAddInput : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxAddInput
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxAddOutput : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxAddOutput
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxRemoveInput : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxRemoveInput
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxRemoveOutput : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxRemoveOutput
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxComplete : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxComplete
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxSignatures : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxSignatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxInitRbf : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxInitRbf
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxAckRbf : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxAckRbf
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendTxAbort : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.TxAbort
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReady : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReady
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendAnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AnnouncementSignatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UpdateHTLCs : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getUpdates() -> LightningDevKit.Bindings.CommitmentUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendRevokeAndACK : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.RevokeAndACK
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendClosingSigned : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ClosingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShutdown : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.Shutdown
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReestablish : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReestablish
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelAnnouncement
      public func getUpdateMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.ChannelAnnouncement
      public func getUpdateMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastNodeAnnouncement : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getMsg() -> LightningDevKit.Bindings.NodeAnnouncement
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HandleError : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getAction() -> LightningDevKit.Bindings.ErrorAction
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelRangeQuery : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShortIdsQuery : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryShortChannelIds
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendReplyChannelRange : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ReplyChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendGossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.GossipTimestampFilter
      @objc deinit
    }
  }
}
public typealias Result_HtlcBasepointDecodeErrorZ = LightningDevKit.Bindings.Result_HtlcBasepointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HtlcBasepointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HtlcBasepoint) -> LightningDevKit.Bindings.Result_HtlcBasepointDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HtlcBasepointDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HtlcBasepoint?
    @objc deinit
  }
}
public typealias AnnouncementSignatures = LightningDevKit.Bindings.AnnouncementSignatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getNodeSignature() -> [Swift.UInt8]
    public func setNodeSignature(val: [Swift.UInt8])
    public func getBitcoinSignature() -> [Swift.UInt8]
    public func setBitcoinSignature(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, nodeSignatureArg: [Swift.UInt8], bitcoinSignatureArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.AnnouncementSignatures, b: LightningDevKit.Bindings.AnnouncementSignatures) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PendingHTLCInfoInboundHTLCErrZ = LightningDevKit.Bindings.Result_PendingHTLCInfoInboundHTLCErrZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PendingHTLCInfoInboundHTLCErrZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PendingHTLCInfo) -> LightningDevKit.Bindings.Result_PendingHTLCInfoInboundHTLCErrZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `e`.")
    public class func initWithErr(e: LightningDevKit.Bindings.InboundHTLCErr) -> LightningDevKit.Bindings.Result_PendingHTLCInfoInboundHTLCErrZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.InboundHTLCErr?
    public func getValue() -> LightningDevKit.Bindings.PendingHTLCInfo?
    @objc deinit
  }
}
public typealias ChannelManagerReadArgs = LightningDevKit.Bindings.ChannelManagerReadArgs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManagerReadArgs : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getEntropySource() -> LightningDevKit.Bindings.EntropySource?
    public func setEntropySource(val: LightningDevKit.Bindings.EntropySource)
    public func getNodeSigner() -> LightningDevKit.Bindings.NodeSigner?
    public func setNodeSigner(val: LightningDevKit.Bindings.NodeSigner)
    public func getSignerProvider() -> LightningDevKit.Bindings.SignerProvider?
    public func setSignerProvider(val: LightningDevKit.Bindings.SignerProvider)
    public func getFeeEstimator() -> LightningDevKit.Bindings.FeeEstimator?
    public func setFeeEstimator(val: LightningDevKit.Bindings.FeeEstimator)
    public func getChainMonitor() -> LightningDevKit.Bindings.Watch?
    public func setChainMonitor(val: LightningDevKit.Bindings.Watch)
    public func getTxBroadcaster() -> LightningDevKit.Bindings.BroadcasterInterface?
    public func setTxBroadcaster(val: LightningDevKit.Bindings.BroadcasterInterface)
    public func getRouter() -> LightningDevKit.Bindings.Router?
    public func setRouter(val: LightningDevKit.Bindings.Router)
    public func getLogger() -> LightningDevKit.Bindings.Logger?
    public func setLogger(val: LightningDevKit.Bindings.Logger)
    public func getDefaultConfig() -> LightningDevKit.Bindings.UserConfig
    public func setDefaultConfig(val: LightningDevKit.Bindings.UserConfig)
    public init(entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, signerProvider: LightningDevKit.Bindings.SignerProvider, feeEstimator: LightningDevKit.Bindings.FeeEstimator, chainMonitor: LightningDevKit.Bindings.Watch, txBroadcaster: LightningDevKit.Bindings.BroadcasterInterface, router: LightningDevKit.Bindings.Router, logger: LightningDevKit.Bindings.Logger, defaultConfig: LightningDevKit.Bindings.UserConfig, channelMonitors: [LightningDevKit.Bindings.ChannelMonitor])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelTransactionParameters = LightningDevKit.Bindings.ChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getHolderPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func setHolderPubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func getHolderSelectedContestDelay() -> Swift.UInt16
    public func setHolderSelectedContestDelay(val: Swift.UInt16)
    public func getIsOutboundFromHolder() -> Swift.Bool
    public func setIsOutboundFromHolder(val: Swift.Bool)
    public func getCounterpartyParameters() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters?
    public func setCounterpartyParameters(val: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters)
    public func getFundingOutpoint() -> LightningDevKit.Bindings.OutPoint?
    public func setFundingOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getChannelTypeFeatures() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func setChannelTypeFeatures(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public init(holderPubkeysArg: LightningDevKit.Bindings.ChannelPublicKeys, holderSelectedContestDelayArg: Swift.UInt16, isOutboundFromHolderArg: Swift.Bool, counterpartyParametersArg: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters, fundingOutpointArg: LightningDevKit.Bindings.OutPoint, channelTypeFeaturesArg: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelTransactionParameters, b: LightningDevKit.Bindings.ChannelTransactionParameters) -> Swift.Bool
    public func isPopulated() -> Swift.Bool
    public func asHolderBroadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func asCounterpartyBroadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias TxInitRbf = LightningDevKit.Bindings.TxInitRbf
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxInitRbf : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getLocktime() -> Swift.UInt32
    public func setLocktime(val: Swift.UInt32)
    public func getFeerateSatPer1000Weight() -> Swift.UInt32
    public func setFeerateSatPer1000Weight(val: Swift.UInt32)
    public func getFundingOutputContribution() -> Swift.Int64?
    public func setFundingOutputContribution(val: Swift.Int64?)
    public init(channelIdArg: [Swift.UInt8], locktimeArg: Swift.UInt32, feerateSatPer1000WeightArg: Swift.UInt32, fundingOutputContributionArg: Swift.Int64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxInitRbf, b: LightningDevKit.Bindings.TxInitRbf) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxInitRbfDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ParseOrSemanticError = LightningDevKit.Bindings.ParseOrSemanticError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParseOrSemanticError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum ParseOrSemanticErrorType {
      case ParseError
      case SemanticError
      public static func == (a: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType, b: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType
    public class func initWithParseError(a: LightningDevKit.Bindings.Bolt11ParseError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func initWithSemanticError(a: LightningDevKit.Bindings.Bolt11SemanticError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func eq(a: LightningDevKit.Bindings.ParseOrSemanticError, b: LightningDevKit.Bindings.ParseOrSemanticError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsParseError() -> LightningDevKit.Bindings.Bolt11ParseError?
    public func getValueAsSemanticError() -> LightningDevKit.Bindings.Bolt11SemanticError?
    @objc deinit
  }
}
public typealias ChannelUsage = LightningDevKit.Bindings.ChannelUsage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUsage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getInflightHtlcMsat() -> Swift.UInt64
    public func setInflightHtlcMsat(val: Swift.UInt64)
    public func getEffectiveCapacity() -> LightningDevKit.Bindings.EffectiveCapacity
    public func setEffectiveCapacity(val: LightningDevKit.Bindings.EffectiveCapacity)
    public init(amountMsatArg: Swift.UInt64, inflightHtlcMsatArg: Swift.UInt64, effectiveCapacityArg: LightningDevKit.Bindings.EffectiveCapacity)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ = LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [([Swift.UInt8], [Swift.UInt8])]) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.ProbeSendFailure) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ProbeSendFailure?
    public func getValue() -> [([Swift.UInt8], [Swift.UInt8])]?
    @objc deinit
  }
}
public typealias BackgroundProcessor = LightningDevKit.Bindings.BackgroundProcessor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BackgroundProcessor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `gossipSync`.")
    public class func start(persister: LightningDevKit.Bindings.Persister, eventHandler: LightningDevKit.Bindings.EventHandler, chainMonitor: LightningDevKit.Bindings.ChainMonitor, channelManager: LightningDevKit.Bindings.ChannelManager, gossipSync: LightningDevKit.Bindings.GossipSync, peerManager: LightningDevKit.Bindings.PeerManager, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.WriteableScore?) -> LightningDevKit.Bindings.BackgroundProcessor
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: self.")
    public func join() -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: self.")
    public func stop() -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias AcceptChannel = LightningDevKit.Bindings.AcceptChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AcceptChannel : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getChannelReserveSatoshis() -> Swift.UInt64
    public func setChannelReserveSatoshis(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getMinimumDepth() -> Swift.UInt32
    public func setMinimumDepth(val: Swift.UInt32)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getShutdownScriptpubkey() -> [Swift.UInt8]?
    public func setShutdownScriptpubkey(val: [Swift.UInt8]?)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public init(temporaryChannelIdArg: [Swift.UInt8], dustLimitSatoshisArg: Swift.UInt64, maxHtlcValueInFlightMsatArg: Swift.UInt64, channelReserveSatoshisArg: Swift.UInt64, htlcMinimumMsatArg: Swift.UInt64, minimumDepthArg: Swift.UInt32, toSelfDelayArg: Swift.UInt16, maxAcceptedHtlcsArg: Swift.UInt16, fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: [Swift.UInt8], paymentPointArg: [Swift.UInt8], delayedPaymentBasepointArg: [Swift.UInt8], htlcBasepointArg: [Swift.UInt8], firstPerCommitmentPointArg: [Swift.UInt8], shutdownScriptpubkeyArg: [Swift.UInt8]?, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.AcceptChannel, b: LightningDevKit.Bindings.AcceptChannel) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias KeysManager = LightningDevKit.Bindings.KeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class KeysManager : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(seed: [Swift.UInt8], startingTimeSecs: Swift.UInt64, startingTimeNanos: Swift.UInt32)
    public func getNodeSecretKey() -> [Swift.UInt8]
    public func deriveChannelKeys(channelValueSatoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    public func signSpendableOutputsPsbt(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], psbt: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZNoneZ
    public func spendSpendableOutputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], changeDestinationScript: [Swift.UInt8], feerateSatPer1000Weight: Swift.UInt32, locktime: Swift.UInt32?) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func asEntropySource() -> LightningDevKit.Bindings.EntropySource
    public func asNodeSigner() -> LightningDevKit.Bindings.NodeSigner
    public func asSignerProvider() -> LightningDevKit.Bindings.SignerProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_boolLightningErrorZ = LightningDevKit.Bindings.Result_boolLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> Swift.Bool?
    @objc deinit
  }
}
public typealias Result_ClosingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSigned?
    @objc deinit
  }
}
public typealias ClaimedHTLC = LightningDevKit.Bindings.ClaimedHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClaimedHTLC : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getUserChannelId() -> [Swift.UInt8]
    public func setUserChannelId(val: [Swift.UInt8])
    public func getCltvExpiry() -> Swift.UInt32
    public func setCltvExpiry(val: Swift.UInt32)
    public func getValueMsat() -> Swift.UInt64
    public func setValueMsat(val: Swift.UInt64)
    public func getCounterpartySkimmedFeeMsat() -> Swift.UInt64
    public func setCounterpartySkimmedFeeMsat(val: Swift.UInt64)
    public init(channelIdArg: [Swift.UInt8], userChannelIdArg: [Swift.UInt8], cltvExpiryArg: Swift.UInt32, valueMsatArg: Swift.UInt64, counterpartySkimmedFeeMsatArg: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.ClaimedHTLC, b: LightningDevKit.Bindings.ClaimedHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClaimedHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHop) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHop?
    @objc deinit
  }
}
public typealias Result_OffersMessageDecodeErrorZ = LightningDevKit.Bindings.Result_OffersMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OffersMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OffersMessage) -> LightningDevKit.Bindings.Result_OffersMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OffersMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OffersMessage?
    @objc deinit
  }
}
public typealias Result_PhantomRouteHintsDecodeErrorZ = LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PhantomRouteHintsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PhantomRouteHints) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PhantomRouteHints?
    @objc deinit
  }
}
public typealias ClosureReason = LightningDevKit.Bindings.ClosureReason
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosureReason : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum ClosureReasonType {
      case CounterpartyForceClosed
      case HolderForceClosed
      case CooperativeClosure
      case CommitmentTxConfirmed
      case FundingTimedOut
      case ProcessingError
      case DisconnectedPeer
      case OutdatedChannelManager
      case CounterpartyCoopClosedUnfundedChannel
      case FundingBatchClosure
      public static func == (a: LightningDevKit.Bindings.ClosureReason.ClosureReasonType, b: LightningDevKit.Bindings.ClosureReason.ClosureReasonType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ClosureReason.ClosureReasonType
    public class func initWithCounterpartyForceClosed(peerMsg: LightningDevKit.Bindings.UntrustedString) -> LightningDevKit.Bindings.ClosureReason
    public class func initWithHolderForceClosed() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithCooperativeClosure() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithCommitmentTxConfirmed() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithFundingTimedOut() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithProcessingError(err: Swift.String) -> LightningDevKit.Bindings.ClosureReason
    public class func initWithDisconnectedPeer() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithOutdatedChannelManager() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithCounterpartyCoopClosedUnfundedChannel() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithFundingBatchClosure() -> LightningDevKit.Bindings.ClosureReason
    public class func eq(a: LightningDevKit.Bindings.ClosureReason, b: LightningDevKit.Bindings.ClosureReason) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public func getValueAsCounterpartyForceClosed() -> LightningDevKit.Bindings.ClosureReason.CounterpartyForceClosed?
    public func getValueAsProcessingError() -> LightningDevKit.Bindings.ClosureReason.ProcessingError?
    @objc deinit
    @_hasMissingDesignatedInitializers public class CounterpartyForceClosed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPeerMsg() -> LightningDevKit.Bindings.UntrustedString
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProcessingError : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getErr() -> Swift.String
      @objc deinit
    }
  }
}
public typealias ReadOnlyNetworkGraph = LightningDevKit.Bindings.ReadOnlyNetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReadOnlyNetworkGraph : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func channel(shortChannelId: Swift.UInt64) -> LightningDevKit.Bindings.ChannelInfo?
    public func listChannels() -> [Swift.UInt64]
    public func node(nodeId: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.NodeInfo?
    public func listNodes() -> [LightningDevKit.Bindings.NodeId]
    public func getAddresses(pubkey: [Swift.UInt8]) -> [LightningDevKit.Bindings.SocketAddress]?
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ErroringMessageHandler = LightningDevKit.Bindings.ErroringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErroringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asChannelMessageHandler() -> LightningDevKit.Bindings.ChannelMessageHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)?
    @objc deinit
  }
}
public typealias FixedPenaltyScorer = LightningDevKit.Bindings.FixedPenaltyScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FixedPenaltyScorer : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithWithPenalty(penaltyMsat: Swift.UInt64) -> LightningDevKit.Bindings.FixedPenaltyScorer
    public func asScoreLookUp() -> LightningDevKit.Bindings.ScoreLookUp
    public func asScoreUpdate() -> LightningDevKit.Bindings.ScoreUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: Swift.UInt64) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PrivateRouteCreationErrorZ = LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PrivateRouteCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PrivateRoute) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.PrivateRoute?
    @objc deinit
  }
}
public typealias TaggedHash = LightningDevKit.Bindings.TaggedHash
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TaggedHash : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func asDigest() -> [Swift.UInt8]?
    public func tag() -> Swift.String
    public func merkleRoot() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Persister = LightningDevKit.Bindings.Persister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persister : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func persistManager(channelManager: LightningDevKit.Bindings.ChannelManager) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    open func persistGraph(networkGraph: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    open func persistScorer(scorer: LightningDevKit.Bindings.WriteableScore) -> LightningDevKit.Bindings.Result_NoneIOErrorZ
    @objc deinit
  }
}
public typealias ChannelUpdateInfo = LightningDevKit.Bindings.ChannelUpdateInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdateInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getLastUpdate() -> Swift.UInt32
    public func setLastUpdate(val: Swift.UInt32)
    public func getEnabled() -> Swift.Bool
    public func setEnabled(val: Swift.Bool)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public func getFees() -> LightningDevKit.Bindings.RoutingFees
    public func setFees(val: LightningDevKit.Bindings.RoutingFees)
    public func getLastUpdateMessage() -> LightningDevKit.Bindings.ChannelUpdate?
    public func setLastUpdateMessage(val: LightningDevKit.Bindings.ChannelUpdate)
    public init(lastUpdateArg: Swift.UInt32, enabledArg: Swift.Bool, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64, htlcMaximumMsatArg: Swift.UInt64, feesArg: LightningDevKit.Bindings.RoutingFees, lastUpdateMessageArg: LightningDevKit.Bindings.ChannelUpdate)
    public class func eq(a: LightningDevKit.Bindings.ChannelUpdateInfo, b: LightningDevKit.Bindings.ChannelUpdateInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ClosingSigned = LightningDevKit.Bindings.ClosingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSigned : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getFeeSatoshis() -> Swift.UInt64
    public func setFeeSatoshis(val: Swift.UInt64)
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getFeeRange() -> LightningDevKit.Bindings.ClosingSignedFeeRange?
    public func setFeeRange(val: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public init(channelIdArg: [Swift.UInt8], feeSatoshisArg: Swift.UInt64, signatureArg: [Swift.UInt8], feeRangeArg: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ClosingSigned, b: LightningDevKit.Bindings.ClosingSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Currency = LightningDevKit.Bindings.Currency
extension LightningDevKit.Bindings {
  public enum Currency {
    case Bitcoin
    case BitcoinTestnet
    case Regtest
    case Simnet
    case Signet
    public static func == (a: LightningDevKit.Bindings.Currency, b: LightningDevKit.Bindings.Currency) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_PingDecodeErrorZ = LightningDevKit.Bindings.Result_PingDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PingDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Ping) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Ping?
    @objc deinit
  }
}
public typealias Result_NodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncement?
    @objc deinit
  }
}
public typealias PendingHTLCRouting = LightningDevKit.Bindings.PendingHTLCRouting
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PendingHTLCRouting : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PendingHTLCRoutingType {
      case Forward
      case Receive
      case ReceiveKeysend
      public static func == (a: LightningDevKit.Bindings.PendingHTLCRouting.PendingHTLCRoutingType, b: LightningDevKit.Bindings.PendingHTLCRouting.PendingHTLCRoutingType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PendingHTLCRouting.PendingHTLCRoutingType
    public class func initForward(onionPacket: LightningDevKit.Bindings.OnionPacket, shortChannelId: Swift.UInt64, blinded: LightningDevKit.Bindings.BlindedForward) -> LightningDevKit.Bindings.PendingHTLCRouting
    public class func initWithReceive(paymentData: LightningDevKit.Bindings.FinalOnionHopData, paymentMetadata: [Swift.UInt8]?, incomingCltvExpiry: Swift.UInt32, phantomSharedSecret: [Swift.UInt8], customTlvs: [(Swift.UInt64, [Swift.UInt8])], requiresBlindedError: Swift.Bool) -> LightningDevKit.Bindings.PendingHTLCRouting
    public class func initWithReceiveKeysend(paymentData: LightningDevKit.Bindings.FinalOnionHopData, paymentPreimage: [Swift.UInt8], paymentMetadata: [Swift.UInt8]?, incomingCltvExpiry: Swift.UInt32, customTlvs: [(Swift.UInt64, [Swift.UInt8])]) -> LightningDevKit.Bindings.PendingHTLCRouting
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PendingHTLCRoutingDecodeErrorZ
    public func getValueAsForward() -> LightningDevKit.Bindings.PendingHTLCRouting.Forward?
    public func getValueAsReceive() -> LightningDevKit.Bindings.PendingHTLCRouting.Receive?
    public func getValueAsReceiveKeysend() -> LightningDevKit.Bindings.PendingHTLCRouting.ReceiveKeysend?
    @objc deinit
    @_hasMissingDesignatedInitializers public class Forward : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getOnionPacket() -> LightningDevKit.Bindings.OnionPacket
      public func getShortChannelId() -> Swift.UInt64
      public func getBlinded() -> LightningDevKit.Bindings.BlindedForward
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Receive : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentData() -> LightningDevKit.Bindings.FinalOnionHopData
      public func getPaymentMetadata() -> [Swift.UInt8]?
      public func getIncomingCltvExpiry() -> Swift.UInt32
      public func getPhantomSharedSecret() -> [Swift.UInt8]
      public func getCustomTlvs() -> [(Swift.UInt64, [Swift.UInt8])]
      public func getRequiresBlindedError() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ReceiveKeysend : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentData() -> LightningDevKit.Bindings.FinalOnionHopData
      public func getPaymentPreimage() -> [Swift.UInt8]
      public func getPaymentMetadata() -> [Swift.UInt8]?
      public func getIncomingCltvExpiry() -> Swift.UInt32
      public func getCustomTlvs() -> [(Swift.UInt64, [Swift.UInt8])]
      @objc deinit
    }
  }
}
public typealias Result_ShutdownDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Shutdown?
    @objc deinit
  }
}
public typealias Result_ShutdownScriptDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers open class NativeTypeWrapper : Swift.Hashable {
  public static func == (lhs: LightningDevKit.NativeTypeWrapper, rhs: LightningDevKit.NativeTypeWrapper) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NativeTraitWrapper : LightningDevKit.NativeTypeWrapper {
  public func activate() -> Self
  public func activateOnce() -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Bindings {
  public enum PrintSeverity : Swift.UInt {
    case DEBUG
    case WARNING
    case ERROR
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public class func setLogThreshold(severity: LightningDevKit.Bindings.PrintSeverity)
  public class func cacheInstance(instance: LightningDevKit.NativeTraitWrapper, countIdempotently: Swift.Bool = false)
  public class func instanceToPointer(instance: LightningDevKit.NativeTraitWrapper) -> Swift.UnsafeMutableRawPointer
  public class func pointerToInstance<T>(pointer: Swift.UnsafeRawPointer, sourceMarker: Swift.String?) -> T where T : LightningDevKit.NativeTraitWrapper
  public class func UnsafeIntPointer_to_string(nativeType: Swift.UnsafePointer<Swift.Int8>) -> Swift.String
  public class func string_to_unsafe_int8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.Int8>
  public class func string_to_unsafe_uint8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.UInt8>
  public class func ldkGetCompiledVersion() -> Swift.String
  public class func ldkCBindingsGetCompiledVersion() -> Swift.String
  public class func swiftSign(msg: [Swift.UInt8], sk: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StrSecp256k1ErrorZ
  public class func recoverPk(msg: [Swift.UInt8], sig: Swift.String) -> LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
  public class func swiftVerify(msg: [Swift.UInt8], sig: Swift.String, pk: [Swift.UInt8]) -> Swift.Bool
  public class func constructInvoicePreimage(hrpBytes: [Swift.UInt8], dataWithoutSignature: [Swift.UInt8]) -> [Swift.UInt8]
  public class func readChannelMonitors(kvStore: LightningDevKit.Bindings.KVStore, entropySource: LightningDevKit.Bindings.EntropySource, signerProvider: LightningDevKit.Bindings.SignerProvider) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ
  public class func peelPaymentOnion(msg: LightningDevKit.Bindings.UpdateAddHTLC, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, curHeight: Swift.UInt32, acceptMppKeysend: Swift.Bool, allowSkimmedFees: Swift.Bool) -> LightningDevKit.Bindings.Result_PendingHTLCInfoInboundHTLCErrZ
  public class func providedInitFeatures(config: LightningDevKit.Bindings.UserConfig) -> LightningDevKit.Bindings.InitFeatures
  public class func swiftCreate(keys: LightningDevKit.Bindings.ExpandedKey, minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32, entropySource: LightningDevKit.Bindings.EntropySource, currentTime: Swift.UInt64, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ
  public class func createFromHash(keys: LightningDevKit.Bindings.ExpandedKey, minValueMsat: Swift.UInt64?, paymentHash: [Swift.UInt8], invoiceExpiryDeltaSecs: Swift.UInt32, currentTime: Swift.UInt64, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
  public class func parseOnionAddress(host: Swift.String, port: Swift.UInt16) -> LightningDevKit.Bindings.Result_SocketAddressSocketAddressParseErrorZ
  public class func htlcSuccessTxWeight(channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures) -> Swift.UInt64
  public class func htlcTimeoutTxWeight(channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures) -> Swift.UInt64
  public class func buildCommitmentSecret(commitmentSeed: [Swift.UInt8], idx: Swift.UInt64) -> [Swift.UInt8]
  public class func buildClosingTransaction(toHolderValueSat: Swift.UInt64, toCounterpartyValueSat: Swift.UInt64, toHolderScript: [Swift.UInt8], toCounterpartyScript: [Swift.UInt8], fundingOutpoint: LightningDevKit.Bindings.OutPoint) -> [Swift.UInt8]
  public class func derivePrivateKey(perCommitmentPoint: [Swift.UInt8], baseSecret: [Swift.UInt8]) -> [Swift.UInt8]
  public class func derivePrivateRevocationKey(perCommitmentSecret: [Swift.UInt8], countersignatoryRevocationBaseSecret: [Swift.UInt8]) -> [Swift.UInt8]
  public class func getRevokeableRedeemscript(revocationKey: LightningDevKit.Bindings.RevocationKey, contestDelay: Swift.UInt16, broadcasterDelayedPaymentKey: LightningDevKit.Bindings.DelayedPaymentKey) -> [Swift.UInt8]
  public class func getCounterpartyPaymentScript(channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures, paymentKey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func getHtlcRedeemscript(htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures, keys: LightningDevKit.Bindings.TxCreationKeys) -> [Swift.UInt8]
  public class func makeFundingRedeemscript(broadcaster: [Swift.UInt8], countersignatory: [Swift.UInt8]) -> [Swift.UInt8]
  public class func buildHtlcTransaction(commitmentTxid: [Swift.UInt8], feeratePerKw: Swift.UInt32, contestDelay: Swift.UInt16, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures, broadcasterDelayedPaymentKey: LightningDevKit.Bindings.DelayedPaymentKey, revocationKey: LightningDevKit.Bindings.RevocationKey) -> [Swift.UInt8]
  public class func buildHtlcInputWitness(localSig: [Swift.UInt8], remoteSig: [Swift.UInt8], preimage: [Swift.UInt8]?, redeemScript: [Swift.UInt8], channelTypeFeatures: LightningDevKit.Bindings.ChannelTypeFeatures) -> [Swift.UInt8]
  public class func getToCountersignatoryWithAnchorsRedeemscript(paymentPoint: [Swift.UInt8]) -> [Swift.UInt8]
  public class func getAnchorRedeemscript(fundingPubkey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func buildAnchorInputWitness(fundingKey: [Swift.UInt8], fundingSig: [Swift.UInt8]) -> [Swift.UInt8]
  public class func getCommitmentTransactionNumberObscureFactor(broadcasterPaymentBasepoint: [Swift.UInt8], countersignatoryPaymentBasepoint: [Swift.UInt8], outboundFromBroadcaster: Swift.Bool) -> Swift.UInt64
  public class func verifyNodeAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
  public class func verifyChannelAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
  public class func findRoute(ourNodePubkey: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.ScoreLookUp, scoreParams: LightningDevKit.Bindings.ProbabilisticScoringFeeParameters, randomSeedBytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func buildRouteFromHops(ourNodePubkey: [Swift.UInt8], hops: [[Swift.UInt8]], routeParams: LightningDevKit.Bindings.RouteParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, randomSeedBytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func createOnionMessage(entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, path: LightningDevKit.Bindings.OnionMessagePath, contents: LightningDevKit.Bindings.OnionMessageContents, replyPath: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ
  public class func peelOnionMessage(msg: LightningDevKit.Bindings.OnionMessage, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, customHandler: LightningDevKit.Bindings.CustomOnionMessageHandler) -> LightningDevKit.Bindings.Result_PeeledOnionNoneZ
  public class func paymentParametersFromZeroAmountInvoice(invoice: LightningDevKit.Bindings.Bolt11Invoice, amountMsat: Swift.UInt64) -> LightningDevKit.Bindings.Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ
  public class func paymentParametersFromInvoice(invoice: LightningDevKit.Bindings.Bolt11Invoice) -> LightningDevKit.Bindings.Result_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ
  public class func createPhantomInvoice(amtMsat: Swift.UInt64?, paymentHash: [Swift.UInt8]?, description: Swift.String, invoiceExpiryDeltaSecs: Swift.UInt32, phantomRouteHints: [LightningDevKit.Bindings.PhantomRouteHints], entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, minFinalCltvExpiryDelta: Swift.UInt16?, durationSinceEpoch: Swift.UInt64) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createPhantomInvoiceWithDescriptionHash(amtMsat: Swift.UInt64?, paymentHash: [Swift.UInt8]?, invoiceExpiryDeltaSecs: Swift.UInt32, descriptionHash: LightningDevKit.Bindings.Sha256, phantomRouteHints: [LightningDevKit.Bindings.PhantomRouteHints], entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, minFinalCltvExpiryDelta: Swift.UInt16?, durationSinceEpoch: Swift.UInt64) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createInvoiceFromChannelmanager(channelmanager: LightningDevKit.Bindings.ChannelManager, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createInvoiceFromChannelmanagerWithDescriptionHash(channelmanager: LightningDevKit.Bindings.ChannelManager, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, descriptionHash: LightningDevKit.Bindings.Sha256, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createInvoiceFromChannelmanagerWithDescriptionHashAndDurationSinceEpoch(channelmanager: LightningDevKit.Bindings.ChannelManager, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, descriptionHash: LightningDevKit.Bindings.Sha256, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createInvoiceFromChannelmanagerAndDurationSinceEpoch(channelmanager: LightningDevKit.Bindings.ChannelManager, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  public class func createInvoiceFromChannelmanagerAndDurationSinceEpochWithPaymentHash(channelmanager: LightningDevKit.Bindings.ChannelManager, nodeSigner: LightningDevKit.Bindings.NodeSigner, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32, paymentHash: [Swift.UInt8], minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_Bolt11InvoiceSignOrCreationErrorZ
  @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `arg`.")
  public class func readThirtyTwoBytesChannelManager(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.ChannelManagerReadArgs) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ
  public class func readThirtyTwoBytesChannelMonitor(ser: [Swift.UInt8], argA: LightningDevKit.Bindings.EntropySource, argB: LightningDevKit.Bindings.SignerProvider) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InstanceCrashSimulator : LightningDevKit.NativeTraitWrapper {
  public init()
  public func getPointer() -> Swift.UnsafeMutableRawPointer
  @objc deinit
}
public typealias RevocationBasepoint = LightningDevKit.Bindings.RevocationBasepoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RevocationBasepoint : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.RevocationBasepoint, b: LightningDevKit.Bindings.RevocationBasepoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RevocationBasepointDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias EntropySource = LightningDevKit.Bindings.EntropySource
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EntropySource : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func getSecureRandomBytes() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_CounterpartyChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters?
    @objc deinit
  }
}
public typealias Result_TxAckRbfDecodeErrorZ = LightningDevKit.Bindings.Result_TxAckRbfDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxAckRbfDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxAckRbf) -> LightningDevKit.Bindings.Result_TxAckRbfDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxAckRbfDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxAckRbf?
    @objc deinit
  }
}
public typealias Result_UpdateFailMalformedHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailMalformedHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFailMalformedHTLC) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailMalformedHTLC?
    @objc deinit
  }
}
public typealias TransactionU16LenLimited = LightningDevKit.Bindings.TransactionU16LenLimited
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TransactionU16LenLimited : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TransactionU16LenLimited, b: LightningDevKit.Bindings.TransactionU16LenLimited) -> Swift.Bool
    public class func new(transaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedNoneZ
    public func intoTransaction() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionU16LenLimitedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CommitmentSigned = LightningDevKit.Bindings.CommitmentSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentSigned : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getHtlcSignatures() -> [[Swift.UInt8]]
    public func setHtlcSignatures(val: [[Swift.UInt8]])
    public init(channelIdArg: [Swift.UInt8], signatureArg: [Swift.UInt8], htlcSignaturesArg: [[Swift.UInt8]])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.CommitmentSigned, b: LightningDevKit.Bindings.CommitmentSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias HtlcBasepoint = LightningDevKit.Bindings.HtlcBasepoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HtlcBasepoint : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.HtlcBasepoint, b: LightningDevKit.Bindings.HtlcBasepoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HtlcBasepointDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_OpenChannelDecodeErrorZ = LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OpenChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OpenChannel?
    @objc deinit
  }
}
public typealias Result_CommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.CommitmentTransaction) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentTransaction?
    @objc deinit
  }
}
public typealias InboundHTLCErr = LightningDevKit.Bindings.InboundHTLCErr
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InboundHTLCErr : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getErrCode() -> Swift.UInt16
    public func setErrCode(val: Swift.UInt16)
    public func getErrData() -> [Swift.UInt8]
    public func setErrData(val: [Swift.UInt8])
    public func getMsg() -> Swift.String
    public func setMsg(val: Swift.String)
    public init(errCodeArg: Swift.UInt16, errDataArg: [Swift.UInt8], msgArg: Swift.String)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SocketAddressSocketAddressParseErrorZ = LightningDevKit.Bindings.Result_SocketAddressSocketAddressParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SocketAddressSocketAddressParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SocketAddress) -> LightningDevKit.Bindings.Result_SocketAddressSocketAddressParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SocketAddressParseError) -> LightningDevKit.Bindings.Result_SocketAddressSocketAddressParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SocketAddressParseError?
    public func getValue() -> LightningDevKit.Bindings.SocketAddress?
    @objc deinit
  }
}
public typealias Result_Bolt11InvoiceBolt11SemanticErrorZ = LightningDevKit.Bindings.Result_Bolt11InvoiceBolt11SemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_Bolt11InvoiceBolt11SemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Bolt11Invoice) -> LightningDevKit.Bindings.Result_Bolt11InvoiceBolt11SemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt11SemanticError) -> LightningDevKit.Bindings.Result_Bolt11InvoiceBolt11SemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt11SemanticError?
    public func getValue() -> LightningDevKit.Bindings.Bolt11Invoice?
    @objc deinit
  }
}
public typealias Result_DelayedPaymentBasepointDecodeErrorZ = LightningDevKit.Bindings.Result_DelayedPaymentBasepointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DelayedPaymentBasepointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.DelayedPaymentBasepoint) -> LightningDevKit.Bindings.Result_DelayedPaymentBasepointDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_DelayedPaymentBasepointDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.DelayedPaymentBasepoint?
    @objc deinit
  }
}
public typealias BroadcasterInterface = LightningDevKit.Bindings.BroadcasterInterface
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BroadcasterInterface : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func broadcastTransactions(txs: [[Swift.UInt8]])
    @objc deinit
  }
}
public typealias MonitorEvent = LightningDevKit.Bindings.MonitorEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorEvent : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum MonitorEventType {
      case HTLCEvent
      case HolderForceClosed
      case Completed
      public static func == (a: LightningDevKit.Bindings.MonitorEvent.MonitorEventType, b: LightningDevKit.Bindings.MonitorEvent.MonitorEventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MonitorEvent.MonitorEventType
    public class func initWithHtlcevent(a: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.MonitorEvent
    public class func initWithHolderForceClosed(a: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.MonitorEvent
    public class func initWithCompleted(fundingTxo: LightningDevKit.Bindings.OutPoint, monitorUpdateId: Swift.UInt64) -> LightningDevKit.Bindings.MonitorEvent
    public class func eq(a: LightningDevKit.Bindings.MonitorEvent, b: LightningDevKit.Bindings.MonitorEvent) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public func getValueAsHtlcEvent() -> LightningDevKit.Bindings.HTLCUpdate?
    public func getValueAsHolderForceClosed() -> LightningDevKit.Bindings.OutPoint?
    public func getValueAsCompleted() -> LightningDevKit.Bindings.MonitorEvent.Completed?
    @objc deinit
    @_hasMissingDesignatedInitializers public class Completed : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getFundingTxo() -> LightningDevKit.Bindings.OutPoint
      public func getMonitorUpdateId() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias SpliceLocked = LightningDevKit.Bindings.SpliceLocked
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SpliceLocked : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.SpliceLocked, b: LightningDevKit.Bindings.SpliceLocked) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpliceLockedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelMonitorUpdateStatus = LightningDevKit.Bindings.ChannelMonitorUpdateStatus
extension LightningDevKit.Bindings {
  public enum ChannelMonitorUpdateStatus {
    case Completed
    case InProgress
    case UnrecoverableError
    public static func == (a: LightningDevKit.Bindings.ChannelMonitorUpdateStatus, b: LightningDevKit.Bindings.ChannelMonitorUpdateStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias LightningError = LightningDevKit.Bindings.LightningError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LightningError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getErr() -> Swift.String
    public func setErr(val: Swift.String)
    public func getAction() -> LightningDevKit.Bindings.ErrorAction
    public func setAction(val: LightningDevKit.Bindings.ErrorAction)
    public init(errArg: Swift.String, actionArg: LightningDevKit.Bindings.ErrorAction)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], [[Swift.UInt8]])) -> LightningDevKit.Bindings.Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], [[Swift.UInt8]])?
    @objc deinit
  }
}
public typealias ProbabilisticScoringFeeParameters = LightningDevKit.Bindings.ProbabilisticScoringFeeParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScoringFeeParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getBasePenaltyMsat() -> Swift.UInt64
    public func setBasePenaltyMsat(val: Swift.UInt64)
    public func getBasePenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setBasePenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getLiquidityPenaltyMultiplierMsat() -> Swift.UInt64
    public func setLiquidityPenaltyMultiplierMsat(val: Swift.UInt64)
    public func getLiquidityPenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setLiquidityPenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getHistoricalLiquidityPenaltyMultiplierMsat() -> Swift.UInt64
    public func setHistoricalLiquidityPenaltyMultiplierMsat(val: Swift.UInt64)
    public func getHistoricalLiquidityPenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setHistoricalLiquidityPenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getAntiProbingPenaltyMsat() -> Swift.UInt64
    public func setAntiProbingPenaltyMsat(val: Swift.UInt64)
    public func getConsideredImpossiblePenaltyMsat() -> Swift.UInt64
    public func setConsideredImpossiblePenaltyMsat(val: Swift.UInt64)
    public func getLinearSuccessProbability() -> Swift.Bool
    public func setLinearSuccessProbability(val: Swift.Bool)
    public class func initWithDefault() -> LightningDevKit.Bindings.ProbabilisticScoringFeeParameters
    public func addBanned(nodeId: LightningDevKit.Bindings.NodeId)
    public func addBannedFromList(nodeIds: [LightningDevKit.Bindings.NodeId])
    public func removeBanned(nodeId: LightningDevKit.Bindings.NodeId)
    public func setManualPenalty(nodeId: LightningDevKit.Bindings.NodeId, penalty: Swift.UInt64)
    public func removeManualPenalty(nodeId: LightningDevKit.Bindings.NodeId)
    public func clearManualPenalties()
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Ping = LightningDevKit.Bindings.Ping
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Ping : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPonglen() -> Swift.UInt16
    public func setPonglen(val: Swift.UInt16)
    public func getByteslen() -> Swift.UInt16
    public func setByteslen(val: Swift.UInt16)
    public init(ponglenArg: Swift.UInt16, byteslenArg: Swift.UInt16)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Ping, b: LightningDevKit.Bindings.Ping) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MinFinalCltvExpiryDelta = LightningDevKit.Bindings.MinFinalCltvExpiryDelta
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MinFinalCltvExpiryDelta : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> Swift.UInt64
    public func setA(val: Swift.UInt64)
    public init(aArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MinFinalCltvExpiryDelta, b: LightningDevKit.Bindings.MinFinalCltvExpiryDelta) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ParsedOnionMessageContents = LightningDevKit.Bindings.ParsedOnionMessageContents
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParsedOnionMessageContents : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum ParsedOnionMessageContentsType {
      case Offers
      case Custom
      public static func == (a: LightningDevKit.Bindings.ParsedOnionMessageContents.ParsedOnionMessageContentsType, b: LightningDevKit.Bindings.ParsedOnionMessageContents.ParsedOnionMessageContentsType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParsedOnionMessageContents.ParsedOnionMessageContentsType
    public class func initWithOffers(a: LightningDevKit.Bindings.OffersMessage) -> LightningDevKit.Bindings.ParsedOnionMessageContents
    public class func initWithCustom(a: LightningDevKit.Bindings.OnionMessageContents) -> LightningDevKit.Bindings.ParsedOnionMessageContents
    public func asOnionMessageContents() -> LightningDevKit.Bindings.OnionMessageContents
    public func write() -> [Swift.UInt8]
    public func getValueAsOffers() -> LightningDevKit.Bindings.OffersMessage?
    public func getValueAsCustom() -> LightningDevKit.Bindings.OnionMessageContents?
    @objc deinit
  }
}
public typealias BlindedPath = LightningDevKit.Bindings.BlindedPath
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedPath : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getIntroductionNodeId() -> [Swift.UInt8]
    public func setIntroductionNodeId(val: [Swift.UInt8])
    public func getBlindingPoint() -> [Swift.UInt8]
    public func setBlindingPoint(val: [Swift.UInt8])
    public func getBlindedHops() -> [LightningDevKit.Bindings.BlindedHop]
    public func setBlindedHops(val: [LightningDevKit.Bindings.BlindedHop])
    public init(introductionNodeIdArg: [Swift.UInt8], blindingPointArg: [Swift.UInt8], blindedHopsArg: [LightningDevKit.Bindings.BlindedHop])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BlindedPath, b: LightningDevKit.Bindings.BlindedPath) -> Swift.Bool
    public class func oneHopForMessage(recipientNodeId: [Swift.UInt8], entropySource: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public class func newForMessage(nodePks: [[Swift.UInt8]], entropySource: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public class func oneHopForPayment(payeeNodeId: [Swift.UInt8], payeeTlvs: LightningDevKit.Bindings.ReceiveTlvs, entropySource: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ
    public class func newForPayment(intermediateNodes: [LightningDevKit.Bindings.ForwardNode], payeeNodeId: [Swift.UInt8], payeeTlvs: LightningDevKit.Bindings.ReceiveTlvs, htlcMaximumMsat: Swift.UInt64, entropySource: LightningDevKit.Bindings.EntropySource) -> LightningDevKit.Bindings.Result_C2Tuple_BlindedPayInfoBlindedPathZNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias LockableScore = LightningDevKit.Bindings.LockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class LockableScore : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func readLock() -> LightningDevKit.Bindings.ScoreLookUp
    open func writeLock() -> LightningDevKit.Bindings.ScoreUpdate
    @objc deinit
  }
}
public typealias Bolt12ParseError = LightningDevKit.Bindings.Bolt12ParseError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt12ParseError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RapidGossipSync = LightningDevKit.Bindings.RapidGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RapidGossipSync : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger)
    public func syncNetworkGraphWithFilePath(syncPath: Swift.String) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func updateNetworkGraph(updateData: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func updateNetworkGraphNoStd(updateData: [Swift.UInt8], currentTimeUnix: Swift.UInt64?) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func isInitialSyncComplete() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Bolt11InvoiceSignature = LightningDevKit.Bindings.Bolt11InvoiceSignature
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt11InvoiceSignature : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Bolt11InvoiceSignature, b: LightningDevKit.Bindings.Bolt11InvoiceSignature) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Watch = LightningDevKit.Bindings.Watch
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Watch : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func watchChannel(fundingTxo: LightningDevKit.Bindings.OutPoint, monitor: LightningDevKit.Bindings.ChannelMonitor) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateStatusNoneZ
    open func updateChannel(fundingTxo: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    open func releasePendingMonitorEvents() -> [(LightningDevKit.Bindings.OutPoint, [LightningDevKit.Bindings.MonitorEvent], [Swift.UInt8])]
    @objc deinit
  }
}
public typealias CustomMessageHandler = LightningDevKit.Bindings.CustomMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(customMessageReader: LightningDevKit.Bindings.CustomMessageReader)
    open func handleCustomMessage(msg: LightningDevKit.Bindings.BindingsType, senderNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func getAndClearPendingMsg() -> [([Swift.UInt8], LightningDevKit.Bindings.BindingsType)]
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    public func getCustomMessageReader() -> LightningDevKit.Bindings.CustomMessageReader
    @objc deinit
  }
}
public typealias ChannelDetails = LightningDevKit.Bindings.ChannelDetails
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelDetails : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getCounterparty() -> LightningDevKit.Bindings.ChannelCounterparty
    public func setCounterparty(val: LightningDevKit.Bindings.ChannelCounterparty)
    public func getFundingTxo() -> LightningDevKit.Bindings.OutPoint?
    public func setFundingTxo(val: LightningDevKit.Bindings.OutPoint)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func getShortChannelId() -> Swift.UInt64?
    public func setShortChannelId(val: Swift.UInt64?)
    public func getOutboundScidAlias() -> Swift.UInt64?
    public func setOutboundScidAlias(val: Swift.UInt64?)
    public func getInboundScidAlias() -> Swift.UInt64?
    public func setInboundScidAlias(val: Swift.UInt64?)
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public func getUnspendablePunishmentReserve() -> Swift.UInt64?
    public func setUnspendablePunishmentReserve(val: Swift.UInt64?)
    public func getUserChannelId() -> [Swift.UInt8]
    public func setUserChannelId(val: [Swift.UInt8])
    public func getFeerateSatPer1000Weight() -> Swift.UInt32?
    public func setFeerateSatPer1000Weight(val: Swift.UInt32?)
    public func getBalanceMsat() -> Swift.UInt64
    public func setBalanceMsat(val: Swift.UInt64)
    public func getOutboundCapacityMsat() -> Swift.UInt64
    public func setOutboundCapacityMsat(val: Swift.UInt64)
    public func getNextOutboundHtlcLimitMsat() -> Swift.UInt64
    public func setNextOutboundHtlcLimitMsat(val: Swift.UInt64)
    public func getNextOutboundHtlcMinimumMsat() -> Swift.UInt64
    public func setNextOutboundHtlcMinimumMsat(val: Swift.UInt64)
    public func getInboundCapacityMsat() -> Swift.UInt64
    public func setInboundCapacityMsat(val: Swift.UInt64)
    public func getConfirmationsRequired() -> Swift.UInt32?
    public func setConfirmationsRequired(val: Swift.UInt32?)
    public func getConfirmations() -> Swift.UInt32?
    public func setConfirmations(val: Swift.UInt32?)
    public func getForceCloseSpendDelay() -> Swift.UInt16?
    public func setForceCloseSpendDelay(val: Swift.UInt16?)
    public func getIsOutbound() -> Swift.Bool
    public func setIsOutbound(val: Swift.Bool)
    public func getIsChannelReady() -> Swift.Bool
    public func setIsChannelReady(val: Swift.Bool)
    public func getChannelShutdownState() -> LightningDevKit.Bindings.ChannelShutdownState?
    public func setChannelShutdownState(val: LightningDevKit.Bindings.ChannelShutdownState?)
    public func getIsUsable() -> Swift.Bool
    public func setIsUsable(val: Swift.Bool)
    public func getIsPublic() -> Swift.Bool
    public func setIsPublic(val: Swift.Bool)
    public func getInboundHtlcMinimumMsat() -> Swift.UInt64?
    public func setInboundHtlcMinimumMsat(val: Swift.UInt64?)
    public func getInboundHtlcMaximumMsat() -> Swift.UInt64?
    public func setInboundHtlcMaximumMsat(val: Swift.UInt64?)
    public func getConfig() -> LightningDevKit.Bindings.ChannelConfig?
    public func setConfig(val: LightningDevKit.Bindings.ChannelConfig)
    public init(channelIdArg: [Swift.UInt8], counterpartyArg: LightningDevKit.Bindings.ChannelCounterparty, fundingTxoArg: LightningDevKit.Bindings.OutPoint, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures, shortChannelIdArg: Swift.UInt64?, outboundScidAliasArg: Swift.UInt64?, inboundScidAliasArg: Swift.UInt64?, channelValueSatoshisArg: Swift.UInt64, unspendablePunishmentReserveArg: Swift.UInt64?, userChannelIdArg: [Swift.UInt8], feerateSatPer1000WeightArg: Swift.UInt32?, balanceMsatArg: Swift.UInt64, outboundCapacityMsatArg: Swift.UInt64, nextOutboundHtlcLimitMsatArg: Swift.UInt64, nextOutboundHtlcMinimumMsatArg: Swift.UInt64, inboundCapacityMsatArg: Swift.UInt64, confirmationsRequiredArg: Swift.UInt32?, confirmationsArg: Swift.UInt32?, forceCloseSpendDelayArg: Swift.UInt16?, isOutboundArg: Swift.Bool, isChannelReadyArg: Swift.Bool, channelShutdownStateArg: LightningDevKit.Bindings.ChannelShutdownState?, isUsableArg: Swift.Bool, isPublicArg: Swift.Bool, inboundHtlcMinimumMsatArg: Swift.UInt64?, inboundHtlcMaximumMsatArg: Swift.UInt64?, configArg: LightningDevKit.Bindings.ChannelConfig)
    public func getInboundPaymentScid() -> Swift.UInt64?
    public func getOutboundPaymentScid() -> Swift.UInt64?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias SocketDescriptor = LightningDevKit.Bindings.SocketDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class SocketDescriptor : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func sendData(data: [Swift.UInt8], resumeRead: Swift.Bool) -> Swift.UInt
    open func disconnectSocket()
    open func eq(otherArg: LightningDevKit.Bindings.SocketDescriptor) -> Swift.Bool
    open func hash() -> Swift.UInt64
    @objc deinit
  }
}
public typealias Result_GossipTimestampFilterDecodeErrorZ = LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_GossipTimestampFilterDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.GossipTimestampFilter?
    @objc deinit
  }
}
public typealias Result_NetworkGraphDecodeErrorZ = LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NetworkGraphDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetworkGraph?
    @objc deinit
  }
}
public typealias ChannelCounterparty = LightningDevKit.Bindings.ChannelCounterparty
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelCounterparty : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getNodeId() -> [Swift.UInt8]
    public func setNodeId(val: [Swift.UInt8])
    public func getFeatures() -> LightningDevKit.Bindings.InitFeatures
    public func setFeatures(val: LightningDevKit.Bindings.InitFeatures)
    public func getUnspendablePunishmentReserve() -> Swift.UInt64
    public func setUnspendablePunishmentReserve(val: Swift.UInt64)
    public func getForwardingInfo() -> LightningDevKit.Bindings.CounterpartyForwardingInfo?
    public func setForwardingInfo(val: LightningDevKit.Bindings.CounterpartyForwardingInfo)
    public func getOutboundHtlcMinimumMsat() -> Swift.UInt64?
    public func setOutboundHtlcMinimumMsat(val: Swift.UInt64?)
    public func getOutboundHtlcMaximumMsat() -> Swift.UInt64?
    public func setOutboundHtlcMaximumMsat(val: Swift.UInt64?)
    public init(nodeIdArg: [Swift.UInt8], featuresArg: LightningDevKit.Bindings.InitFeatures, unspendablePunishmentReserveArg: Swift.UInt64, forwardingInfoArg: LightningDevKit.Bindings.CounterpartyForwardingInfo, outboundHtlcMinimumMsatArg: Swift.UInt64?, outboundHtlcMaximumMsatArg: Swift.UInt64?)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PendingHTLCRoutingDecodeErrorZ = LightningDevKit.Bindings.Result_PendingHTLCRoutingDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PendingHTLCRoutingDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PendingHTLCRouting) -> LightningDevKit.Bindings.Result_PendingHTLCRoutingDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PendingHTLCRoutingDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PendingHTLCRouting?
    @objc deinit
  }
}
public typealias UpdateFee = LightningDevKit.Bindings.UpdateFee
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFee : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getFeeratePerKw() -> Swift.UInt32
    public func setFeeratePerKw(val: Swift.UInt32)
    public init(channelIdArg: [Swift.UInt8], feeratePerKwArg: Swift.UInt32)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UpdateFee, b: LightningDevKit.Bindings.UpdateFee) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Path = LightningDevKit.Bindings.Path
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Path : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getHops() -> [LightningDevKit.Bindings.RouteHop]
    public func setHops(val: [LightningDevKit.Bindings.RouteHop])
    public func getBlindedTail() -> LightningDevKit.Bindings.BlindedTail?
    public func setBlindedTail(val: LightningDevKit.Bindings.BlindedTail)
    public init(hopsArg: [LightningDevKit.Bindings.RouteHop], blindedTailArg: LightningDevKit.Bindings.BlindedTail)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Path, b: LightningDevKit.Bindings.Path) -> Swift.Bool
    public func feeMsat() -> Swift.UInt64
    public func finalValueMsat() -> Swift.UInt64
    public func finalCltvExpiryDelta() -> Swift.UInt32?
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BlindedHopFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedHopFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedHopFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedHopFeatures) -> LightningDevKit.Bindings.Result_BlindedHopFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedHopFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedHopFeatures?
    @objc deinit
  }
}
public typealias Result_PaymentFailureReasonDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentFailureReasonDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentFailureReasonDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentFailureReason) -> LightningDevKit.Bindings.Result_PaymentFailureReasonDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentFailureReasonDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentFailureReason?
    @objc deinit
  }
}
public typealias BumpTransactionEvent = LightningDevKit.Bindings.BumpTransactionEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BumpTransactionEvent : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum BumpTransactionEventType {
      case ChannelClose
      case HTLCResolution
      public static func == (a: LightningDevKit.Bindings.BumpTransactionEvent.BumpTransactionEventType, b: LightningDevKit.Bindings.BumpTransactionEvent.BumpTransactionEventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.BumpTransactionEvent.BumpTransactionEventType
    public class func initWithChannelClose(claimId: [Swift.UInt8], packageTargetFeerateSatPer1000Weight: Swift.UInt32, commitmentTx: [Swift.UInt8], commitmentTxFeeSatoshis: Swift.UInt64, anchorDescriptor: LightningDevKit.Bindings.AnchorDescriptor, pendingHtlcs: [LightningDevKit.Bindings.HTLCOutputInCommitment]) -> LightningDevKit.Bindings.BumpTransactionEvent
    public class func initWithHtlcresolution(claimId: [Swift.UInt8], targetFeerateSatPer1000Weight: Swift.UInt32, htlcDescriptors: [LightningDevKit.Bindings.HTLCDescriptor], txLockTime: Swift.UInt32) -> LightningDevKit.Bindings.BumpTransactionEvent
    public class func eq(a: LightningDevKit.Bindings.BumpTransactionEvent, b: LightningDevKit.Bindings.BumpTransactionEvent) -> Swift.Bool
    public func getValueAsChannelClose() -> LightningDevKit.Bindings.BumpTransactionEvent.ChannelClose?
    public func getValueAsHtlcResolution() -> LightningDevKit.Bindings.BumpTransactionEvent.HTLCResolution?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ChannelClose : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getClaimId() -> [Swift.UInt8]
      public func getPackageTargetFeerateSatPer1000Weight() -> Swift.UInt32
      public func getCommitmentTx() -> [Swift.UInt8]
      public func getCommitmentTxFeeSatoshis() -> Swift.UInt64
      public func getAnchorDescriptor() -> LightningDevKit.Bindings.AnchorDescriptor
      public func getPendingHtlcs() -> [LightningDevKit.Bindings.HTLCOutputInCommitment]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCResolution : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getClaimId() -> [Swift.UInt8]
      public func getTargetFeerateSatPer1000Weight() -> Swift.UInt32
      public func getHtlcDescriptors() -> [LightningDevKit.Bindings.HTLCDescriptor]
      public func getTxLockTime() -> Swift.UInt32
      @objc deinit
    }
  }
}
public typealias Sleeper = LightningDevKit.Bindings.Sleeper
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Sleeper : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithSingleFuture(future: LightningDevKit.Bindings.Future) -> LightningDevKit.Bindings.Sleeper
    public class func initWithTwoFutures(futA: LightningDevKit.Bindings.Future, futB: LightningDevKit.Bindings.Future) -> LightningDevKit.Bindings.Sleeper
    public init(futures: [LightningDevKit.Bindings.Future])
    public func wait()
    public func waitTimeout(maxWait: Swift.UInt64) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelShutdownStateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelShutdownStateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelShutdownStateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelShutdownState) -> LightningDevKit.Bindings.Result_ChannelShutdownStateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelShutdownStateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelShutdownState?
    @objc deinit
  }
}
public typealias Offer = LightningDevKit.Bindings.Offer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Offer : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func chains() -> [[Swift.UInt8]]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func paths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity
    public func signingPubkey() -> [Swift.UInt8]
    public func supportsChain(chain: [Swift.UInt8]) -> Swift.Bool
    public func isExpired() -> Swift.Bool
    public func isExpiredNoStd(durationSinceEpoch: Swift.UInt64) -> Swift.Bool
    public func isValidQuantity(quantity: Swift.UInt64) -> Swift.Bool
    public func expectsQuantity() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_OfferBolt12ParseErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteLightningErrorZ = LightningDevKit.Bindings.Result_RouteLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    @objc deinit
  }
}
public typealias Result_StaticPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StaticPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    @objc deinit
  }
}
public typealias FinalOnionHopData = LightningDevKit.Bindings.FinalOnionHopData
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FinalOnionHopData : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPaymentSecret() -> [Swift.UInt8]?
    public func setPaymentSecret(val: [Swift.UInt8])
    public func getTotalMsat() -> Swift.UInt64
    public func setTotalMsat(val: Swift.UInt64)
    public init(paymentSecretArg: [Swift.UInt8], totalMsatArg: Swift.UInt64)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FinalOnionHopDataDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_DelayedPaymentKeyDecodeErrorZ = LightningDevKit.Bindings.Result_DelayedPaymentKeyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DelayedPaymentKeyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.DelayedPaymentKey) -> LightningDevKit.Bindings.Result_DelayedPaymentKeyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_DelayedPaymentKeyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.DelayedPaymentKey?
    @objc deinit
  }
}
public typealias PaymentRelay = LightningDevKit.Bindings.PaymentRelay
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentRelay : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public init(cltvExpiryDeltaArg: Swift.UInt16, feeProportionalMillionthsArg: Swift.UInt32, feeBaseMsatArg: Swift.UInt32)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentRelayDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ClosingTransaction = LightningDevKit.Bindings.ClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ClosingTransaction, b: LightningDevKit.Bindings.ClosingTransaction) -> Swift.Bool
    public init(toHolderValueSat: Swift.UInt64, toCounterpartyValueSat: Swift.UInt64, toHolderScript: [Swift.UInt8], toCounterpartyScript: [Swift.UInt8], fundingOutpoint: LightningDevKit.Bindings.OutPoint)
    public func trust() -> LightningDevKit.Bindings.TrustedClosingTransaction
    public func verify(fundingOutpoint: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public func toHolderValueSat() -> Swift.UInt64
    public func toCounterpartyValueSat() -> Swift.UInt64
    public func toHolderScript() -> [Swift.UInt8]
    public func toCounterpartyScript() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_UtxoZNoneZ = LightningDevKit.Bindings.Result_CVec_UtxoZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_UtxoZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [LightningDevKit.Bindings.Utxo]) -> LightningDevKit.Bindings.Result_CVec_UtxoZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_UtxoZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [LightningDevKit.Bindings.Utxo]?
    @objc deinit
  }
}
public typealias Result_UpdateFeeDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFeeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFee) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFee?
    @objc deinit
  }
}
public typealias Result_UpdateFulfillHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFulfillHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFulfillHTLC) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFulfillHTLC?
    @objc deinit
  }
}
public typealias DefaultRouter = LightningDevKit.Bindings.DefaultRouter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DefaultRouter : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, entropySource: LightningDevKit.Bindings.EntropySource, scorer: LightningDevKit.Bindings.LockableScore, scoreParams: LightningDevKit.Bindings.ProbabilisticScoringFeeParameters)
    public func asRouter() -> LightningDevKit.Bindings.Router
    public func asMessageRouter() -> LightningDevKit.Bindings.MessageRouter
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CoinSelectionSource = LightningDevKit.Bindings.CoinSelectionSource
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CoinSelectionSource : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func selectConfirmedUtxos(claimId: [Swift.UInt8], mustSpend: [LightningDevKit.Bindings.Input], mustPayTo: [LightningDevKit.Bindings.TxOut], targetFeerateSatPer1000Weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_CoinSelectionNoneZ
    open func signPsbt(psbt: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    @objc deinit
  }
}
public typealias Result_TxCompleteDecodeErrorZ = LightningDevKit.Bindings.Result_TxCompleteDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxCompleteDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxComplete) -> LightningDevKit.Bindings.Result_TxCompleteDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxCompleteDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxComplete?
    @objc deinit
  }
}
public typealias Result_PongDecodeErrorZ = LightningDevKit.Bindings.Result_PongDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PongDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Pong) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Pong?
    @objc deinit
  }
}
public typealias Result_FinalOnionHopDataDecodeErrorZ = LightningDevKit.Bindings.Result_FinalOnionHopDataDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FinalOnionHopDataDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.FinalOnionHopData) -> LightningDevKit.Bindings.Result_FinalOnionHopDataDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FinalOnionHopDataDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FinalOnionHopData?
    @objc deinit
  }
}
public typealias TxSignatures = LightningDevKit.Bindings.TxSignatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxSignatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getTxHash() -> [Swift.UInt8]?
    public func setTxHash(val: [Swift.UInt8])
    public func getWitnesses() -> [[Swift.UInt8]]
    public func setWitnesses(val: [[Swift.UInt8]])
    public init(channelIdArg: [Swift.UInt8], txHashArg: [Swift.UInt8], witnessesArg: [[Swift.UInt8]])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxSignatures, b: LightningDevKit.Bindings.TxSignatures) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxSignaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DelayedPaymentBasepoint = LightningDevKit.Bindings.DelayedPaymentBasepoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DelayedPaymentBasepoint : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.DelayedPaymentBasepoint, b: LightningDevKit.Bindings.DelayedPaymentBasepoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_DelayedPaymentBasepointDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_WarningMessageDecodeErrorZ = LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_WarningMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.WarningMessage) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.WarningMessage?
    @objc deinit
  }
}
public typealias Result_InitFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.InitFeatures) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InitFeatures?
    @objc deinit
  }
}
public typealias Result_TxAddOutputDecodeErrorZ = LightningDevKit.Bindings.Result_TxAddOutputDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxAddOutputDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxAddOutput) -> LightningDevKit.Bindings.Result_TxAddOutputDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxAddOutputDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxAddOutput?
    @objc deinit
  }
}
public typealias PeeledOnion = LightningDevKit.Bindings.PeeledOnion
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeeledOnion : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum PeeledOnionType {
      case Forward
      case Receive
      public static func == (a: LightningDevKit.Bindings.PeeledOnion.PeeledOnionType, b: LightningDevKit.Bindings.PeeledOnion.PeeledOnionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PeeledOnion.PeeledOnionType
    public class func initForward(a: [Swift.UInt8], b: LightningDevKit.Bindings.OnionMessage) -> LightningDevKit.Bindings.PeeledOnion
    public class func initWithReceive(a: LightningDevKit.Bindings.ParsedOnionMessageContents, b: [Swift.UInt8], c: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.PeeledOnion
    public func getValueAsForward() -> LightningDevKit.Bindings.PeeledOnion.Forward?
    public func getValueAsReceive() -> LightningDevKit.Bindings.PeeledOnion.Receive?
    @objc deinit
    @_hasMissingDesignatedInitializers public class Forward : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func get0() -> [Swift.UInt8]
      public func get1() -> LightningDevKit.Bindings.OnionMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Receive : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func get0() -> LightningDevKit.Bindings.ParsedOnionMessageContents
      public func get1() -> [Swift.UInt8]
      public func get2() -> LightningDevKit.Bindings.BlindedPath
      @objc deinit
    }
  }
}
public typealias Bolt11InvoiceFeatures = LightningDevKit.Bindings.Bolt11InvoiceFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bolt11InvoiceFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.Bolt11InvoiceFeatures, b: LightningDevKit.Bindings.Bolt11InvoiceFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.Bolt11InvoiceFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_Bolt11InvoiceFeaturesDecodeErrorZ
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func setPaymentMetadataOptional()
    public func setPaymentMetadataRequired()
    public func supportsPaymentMetadata() -> Swift.Bool
    public func requiresPaymentMetadata() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias SpliceAck = LightningDevKit.Bindings.SpliceAck
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SpliceAck : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getRelativeSatoshis() -> Swift.Int64
    public func setRelativeSatoshis(val: Swift.Int64)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], chainHashArg: [Swift.UInt8], relativeSatoshisArg: Swift.Int64, fundingPubkeyArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.SpliceAck, b: LightningDevKit.Bindings.SpliceAck) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpliceAckDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Splice = LightningDevKit.Bindings.Splice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Splice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getRelativeSatoshis() -> Swift.Int64
    public func setRelativeSatoshis(val: Swift.Int64)
    public func getFundingFeeratePerkw() -> Swift.UInt32
    public func setFundingFeeratePerkw(val: Swift.UInt32)
    public func getLocktime() -> Swift.UInt32
    public func setLocktime(val: Swift.UInt32)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], chainHashArg: [Swift.UInt8], relativeSatoshisArg: Swift.Int64, fundingFeeratePerkwArg: Swift.UInt32, locktimeArg: Swift.UInt32, fundingPubkeyArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.Splice, b: LightningDevKit.Bindings.Splice) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpliceDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_NetworkUpdateZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_NetworkUpdateZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NetworkUpdate?) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetworkUpdate?
    @objc deinit
  }
}
public typealias Result_NodeIdDecodeErrorZ = LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeIdDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeId?
    @objc deinit
  }
}
public typealias PhantomKeysManager = LightningDevKit.Bindings.PhantomKeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomKeysManager : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func asEntropySource() -> LightningDevKit.Bindings.EntropySource
    public func asNodeSigner() -> LightningDevKit.Bindings.NodeSigner
    public func asSignerProvider() -> LightningDevKit.Bindings.SignerProvider
    public init(seed: [Swift.UInt8], startingTimeSecs: Swift.UInt64, startingTimeNanos: Swift.UInt32, crossNodeSeed: [Swift.UInt8])
    public func spendSpendableOutputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], changeDestinationScript: [Swift.UInt8], feerateSatPer1000Weight: Swift.UInt32, locktime: Swift.UInt32?) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func deriveChannelKeys(channelValueSatoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    public func getNodeSecretKey() -> [Swift.UInt8]
    public func getPhantomNodeSecretKey() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_HostnameDecodeErrorZ = LightningDevKit.Bindings.Result_HostnameDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HostnameDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Hostname) -> LightningDevKit.Bindings.Result_HostnameDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HostnameDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Hostname?
    @objc deinit
  }
}
public typealias TxComplete = LightningDevKit.Bindings.TxComplete
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxComplete : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.TxComplete, b: LightningDevKit.Bindings.TxComplete) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxCompleteDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BlindedForwardDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedForwardDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedForwardDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedForward) -> LightningDevKit.Bindings.Result_BlindedForwardDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedForwardDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedForward?
    @objc deinit
  }
}
public typealias DirectedChannelTransactionParameters = LightningDevKit.Bindings.DirectedChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func broadcasterPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func countersignatoryPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func contestDelay() -> Swift.UInt16
    public func isOutbound() -> Swift.Bool
    public func fundingOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func channelTypeFeatures() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
extension LightningDevKit.Bindings {
  public class func getLDKSwiftBindingsSerializationHash() -> Swift.String
  public class func getLDKSwiftBindingsVersion() -> Swift.String
  public class func getLDKSwiftBindingsCommitHash() -> Swift.String
}
public typealias BlindedHopFeatures = LightningDevKit.Bindings.BlindedHopFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedHopFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.BlindedHopFeatures, b: LightningDevKit.Bindings.BlindedHopFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.BlindedHopFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedHopFeaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CreationError = LightningDevKit.Bindings.CreationError
extension LightningDevKit.Bindings {
  public enum CreationError {
    case DescriptionTooLong
    case RouteTooLong
    case TimestampOutOfBounds
    case InvalidAmount
    case MissingRouteHints
    case MinFinalCltvExpiryDeltaTooShort
    public static func == (a: LightningDevKit.Bindings.CreationError, b: LightningDevKit.Bindings.CreationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_PaymentParametersDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentParameters) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentParameters?
    @objc deinit
  }
}
public typealias RawDataPart = LightningDevKit.Bindings.RawDataPart
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawDataPart : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTimestamp() -> LightningDevKit.Bindings.PositiveTimestamp
    public func setTimestamp(val: LightningDevKit.Bindings.PositiveTimestamp)
    public class func eq(a: LightningDevKit.Bindings.RawDataPart, b: LightningDevKit.Bindings.RawDataPart) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Future = LightningDevKit.Bindings.Future
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Future : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func registerCallbackFn(callback: LightningDevKit.Bindings.FutureCallback)
    public func wait()
    public func waitTimeout(maxWait: Swift.UInt64) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SocketAddressDecodeErrorZ = LightningDevKit.Bindings.Result_SocketAddressDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SocketAddressDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SocketAddress) -> LightningDevKit.Bindings.Result_SocketAddressDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SocketAddressDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SocketAddress?
    @objc deinit
  }
}
public typealias ExpandedKey = LightningDevKit.Bindings.ExpandedKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpandedKey : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(keyMaterial: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MultiThreadedLockableScore = LightningDevKit.Bindings.MultiThreadedLockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedLockableScore : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func asLockableScore() -> LightningDevKit.Bindings.LockableScore
    public func write() -> [Swift.UInt8]
    public func asWriteableScore() -> LightningDevKit.Bindings.WriteableScore
    public init(score: LightningDevKit.Bindings.Score)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RetryDecodeErrorZ = LightningDevKit.Bindings.Result_RetryDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RetryDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.Retry) -> LightningDevKit.Bindings.Result_RetryDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RetryDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Retry?
    @objc deinit
  }
}
public typealias Result_ThirtyTwoBytesPaymentSendFailureZ = LightningDevKit.Bindings.Result_ThirtyTwoBytesPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ThirtyTwoBytesPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesPaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesPaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias UnsignedBolt12Invoice = LightningDevKit.Bindings.UnsignedBolt12Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedBolt12Invoice : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func taggedHash() -> LightningDevKit.Bindings.TaggedHash
    public func offerChains() -> [[Swift.UInt8]]?
    public func chain() -> [Swift.UInt8]
    public func metadata() -> [Swift.UInt8]?
    public func amount() -> LightningDevKit.Bindings.Amount?
    public func offerFeatures() -> LightningDevKit.Bindings.OfferFeatures?
    public func description() -> LightningDevKit.Bindings.PrintableString
    public func absoluteExpiry() -> Swift.UInt64?
    public func issuer() -> LightningDevKit.Bindings.PrintableString?
    public func messagePaths() -> [LightningDevKit.Bindings.BlindedPath]
    public func supportedQuantity() -> LightningDevKit.Bindings.Quantity?
    public func payerMetadata() -> [Swift.UInt8]
    public func invoiceRequestFeatures() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func quantity() -> Swift.UInt64?
    public func payerId() -> [Swift.UInt8]
    public func payerNote() -> LightningDevKit.Bindings.PrintableString?
    public func createdAt() -> Swift.UInt64
    public func relativeExpiry() -> Swift.UInt64
    public func isExpired() -> Swift.Bool
    public func paymentHash() -> [Swift.UInt8]
    public func amountMsats() -> Swift.UInt64
    public func invoiceFeatures() -> LightningDevKit.Bindings.Bolt12InvoiceFeatures
    public func signingPubkey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OnionMessageContents = LightningDevKit.Bindings.OnionMessageContents
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class OnionMessageContents : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func tlvType() -> Swift.UInt64
    open func write() -> [Swift.UInt8]
    open func debugStr() -> Swift.String
    @objc deinit
  }
}
public typealias Utxo = LightningDevKit.Bindings.Utxo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Utxo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getOutput() -> LightningDevKit.Bindings.TxOut
    public func setOutput(val: LightningDevKit.Bindings.TxOut)
    public func getSatisfactionWeight() -> Swift.UInt64
    public func setSatisfactionWeight(val: Swift.UInt64)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, outputArg: LightningDevKit.Bindings.TxOut, satisfactionWeightArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Utxo, b: LightningDevKit.Bindings.Utxo) -> Swift.Bool
    public class func initWithP2pkh(outpoint: LightningDevKit.Bindings.OutPoint, value: Swift.UInt64, pubkeyHash: [Swift.UInt8]) -> LightningDevKit.Bindings.Utxo
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_OutPointDecodeErrorZ = LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OutPointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OutPoint?
    @objc deinit
  }
}
public typealias StaticPaymentOutputDescriptor = LightningDevKit.Bindings.StaticPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class StaticPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getOutput() -> LightningDevKit.Bindings.TxOut
    public func setOutput(val: LightningDevKit.Bindings.TxOut)
    public func getChannelKeysId() -> [Swift.UInt8]?
    public func setChannelKeysId(val: [Swift.UInt8])
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public func getChannelTransactionParameters() -> LightningDevKit.Bindings.ChannelTransactionParameters?
    public func setChannelTransactionParameters(val: LightningDevKit.Bindings.ChannelTransactionParameters)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, outputArg: LightningDevKit.Bindings.TxOut, channelKeysIdArg: [Swift.UInt8], channelValueSatoshisArg: Swift.UInt64, channelTransactionParametersArg: LightningDevKit.Bindings.ChannelTransactionParameters)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.StaticPaymentOutputDescriptor, b: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> Swift.Bool
    public func witnessScript() -> [Swift.UInt8]?
    public func maxWitnessLength() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias FutureCallback = LightningDevKit.Bindings.FutureCallback
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class FutureCallback : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func call()
    @objc deinit
  }
}
public typealias RouteHintHop = LightningDevKit.Bindings.RouteHintHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHintHop : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getSrcNodeId() -> [Swift.UInt8]
    public func setSrcNodeId(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getFees() -> LightningDevKit.Bindings.RoutingFees
    public func setFees(val: LightningDevKit.Bindings.RoutingFees)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64?
    public func setHtlcMinimumMsat(val: Swift.UInt64?)
    public func getHtlcMaximumMsat() -> Swift.UInt64?
    public func setHtlcMaximumMsat(val: Swift.UInt64?)
    public init(srcNodeIdArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, feesArg: LightningDevKit.Bindings.RoutingFees, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64?, htlcMaximumMsatArg: Swift.UInt64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHintHop, b: LightningDevKit.Bindings.RouteHintHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelInfo = LightningDevKit.Bindings.ChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getNodeOne() -> LightningDevKit.Bindings.NodeId
    public func setNodeOne(val: LightningDevKit.Bindings.NodeId)
    public func getOneToTwo() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func setOneToTwo(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func getNodeTwo() -> LightningDevKit.Bindings.NodeId
    public func setNodeTwo(val: LightningDevKit.Bindings.NodeId)
    public func getTwoToOne() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func setTwoToOne(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func getCapacitySats() -> Swift.UInt64?
    public func setCapacitySats(val: Swift.UInt64?)
    public func getAnnouncementMessage() -> LightningDevKit.Bindings.ChannelAnnouncement?
    public func setAnnouncementMessage(val: LightningDevKit.Bindings.ChannelAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.ChannelInfo, b: LightningDevKit.Bindings.ChannelInfo) -> Swift.Bool
    public func getDirectionalInfo(channelFlags: Swift.UInt8) -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_WriteableEcdsaChannelSignerDecodeErrorZ = LightningDevKit.Bindings.Result_WriteableEcdsaChannelSignerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_WriteableEcdsaChannelSignerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.WriteableEcdsaChannelSigner) -> LightningDevKit.Bindings.Result_WriteableEcdsaChannelSignerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_WriteableEcdsaChannelSignerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.WriteableEcdsaChannelSigner?
    @objc deinit
  }
}
public typealias Result_NoneAPIErrorZ = LightningDevKit.Bindings.Result_NoneAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    @objc deinit
  }
}
public typealias Result_ChannelPublicKeysDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelPublicKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelPublicKeys?
    @objc deinit
  }
}
public typealias Result_UnsignedNodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedNodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement?
    @objc deinit
  }
}
public typealias PendingHTLCInfo = LightningDevKit.Bindings.PendingHTLCInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PendingHTLCInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getRouting() -> LightningDevKit.Bindings.PendingHTLCRouting
    public func setRouting(val: LightningDevKit.Bindings.PendingHTLCRouting)
    public func getIncomingSharedSecret() -> [Swift.UInt8]?
    public func setIncomingSharedSecret(val: [Swift.UInt8])
    public func getPaymentHash() -> [Swift.UInt8]?
    public func setPaymentHash(val: [Swift.UInt8])
    public func getIncomingAmtMsat() -> Swift.UInt64?
    public func setIncomingAmtMsat(val: Swift.UInt64?)
    public func getOutgoingAmtMsat() -> Swift.UInt64
    public func setOutgoingAmtMsat(val: Swift.UInt64)
    public func getOutgoingCltvValue() -> Swift.UInt32
    public func setOutgoingCltvValue(val: Swift.UInt32)
    public func getSkimmedFeeMsat() -> Swift.UInt64?
    public func setSkimmedFeeMsat(val: Swift.UInt64?)
    public init(routingArg: LightningDevKit.Bindings.PendingHTLCRouting, incomingSharedSecretArg: [Swift.UInt8], paymentHashArg: [Swift.UInt8], incomingAmtMsatArg: Swift.UInt64?, outgoingAmtMsatArg: Swift.UInt64, outgoingCltvValueArg: Swift.UInt32, skimmedFeeMsatArg: Swift.UInt64?)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PendingHTLCInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Shutdown = LightningDevKit.Bindings.Shutdown
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Shutdown : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getScriptpubkey() -> [Swift.UInt8]
    public func setScriptpubkey(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], scriptpubkeyArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Shutdown, b: LightningDevKit.Bindings.Shutdown) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ThirtyTwoBytesAPIErrorZ = LightningDevKit.Bindings.Result_ThirtyTwoBytesAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ThirtyTwoBytesAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_ChannelFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelFeatures) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelFeatures?
    @objc deinit
  }
}
public typealias Result_PendingHTLCInfoDecodeErrorZ = LightningDevKit.Bindings.Result_PendingHTLCInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PendingHTLCInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PendingHTLCInfo) -> LightningDevKit.Bindings.Result_PendingHTLCInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PendingHTLCInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PendingHTLCInfo?
    @objc deinit
  }
}
public typealias RouteHint = LightningDevKit.Bindings.RouteHint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHint : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [LightningDevKit.Bindings.RouteHintHop]
    public func setA(val: [LightningDevKit.Bindings.RouteHintHop])
    public init(aArg: [LightningDevKit.Bindings.RouteHintHop])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHint, b: LightningDevKit.Bindings.RouteHint) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PublicHopCandidate = LightningDevKit.Bindings.PublicHopCandidate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PublicHopCandidate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias EventsProvider = LightningDevKit.Bindings.EventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventsProvider : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func processPendingEvents(handler: LightningDevKit.Bindings.EventHandler)
    @objc deinit
  }
}
public typealias Result_FixedPenaltyScorerDecodeErrorZ = LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FixedPenaltyScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.FixedPenaltyScorer) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FixedPenaltyScorer?
    @objc deinit
  }
}
public typealias ChannelManager = LightningDevKit.Bindings.ChannelManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManager : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(feeEst: LightningDevKit.Bindings.FeeEstimator, chainMonitor: LightningDevKit.Bindings.Watch, txBroadcaster: LightningDevKit.Bindings.BroadcasterInterface, router: LightningDevKit.Bindings.Router, logger: LightningDevKit.Bindings.Logger, entropySource: LightningDevKit.Bindings.EntropySource, nodeSigner: LightningDevKit.Bindings.NodeSigner, signerProvider: LightningDevKit.Bindings.SignerProvider, config: LightningDevKit.Bindings.UserConfig, params: LightningDevKit.Bindings.ChainParameters, currentTimestamp: Swift.UInt32)
    public func getCurrentDefaultConfiguration() -> LightningDevKit.Bindings.UserConfig
    public func createChannel(theirNetworkKey: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, pushMsat: Swift.UInt64, userChannelId: [Swift.UInt8], temporaryChannelId: [Swift.UInt8]?, overrideConfig: LightningDevKit.Bindings.UserConfig) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesAPIErrorZ
    public func listChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func listUsableChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func listChannelsWithCounterparty(counterpartyNodeId: [Swift.UInt8]) -> [LightningDevKit.Bindings.ChannelDetails]
    public func listRecentPayments() -> [LightningDevKit.Bindings.RecentPaymentDetails]
    public func closeChannel(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func closeChannelWithFeerateAndScript(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], targetFeerateSatsPer1000Weight: Swift.UInt32?, shutdownScript: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseBroadcastingLatestTxn(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseWithoutBroadcastingTxn(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseAllChannelsBroadcastingLatestTxn()
    public func forceCloseAllChannelsWithoutBroadcastingTxn()
    public func sendPaymentWithRoute(route: LightningDevKit.Bindings.Route, paymentHash: [Swift.UInt8], recipientOnion: LightningDevKit.Bindings.RecipientOnionFields, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func sendPayment(paymentHash: [Swift.UInt8], recipientOnion: LightningDevKit.Bindings.RecipientOnionFields, paymentId: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, retryStrategy: LightningDevKit.Bindings.Retry) -> LightningDevKit.Bindings.Result_NoneRetryableSendFailureZ
    public func abandonPayment(paymentId: [Swift.UInt8])
    public func sendSpontaneousPayment(route: LightningDevKit.Bindings.Route, paymentPreimage: [Swift.UInt8]?, recipientOnion: LightningDevKit.Bindings.RecipientOnionFields, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesPaymentSendFailureZ
    public func sendSpontaneousPaymentWithRetry(paymentPreimage: [Swift.UInt8]?, recipientOnion: LightningDevKit.Bindings.RecipientOnionFields, paymentId: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, retryStrategy: LightningDevKit.Bindings.Retry) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesRetryableSendFailureZ
    public func sendProbe(path: LightningDevKit.Bindings.Path) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ
    public func sendSpontaneousPreflightProbes(nodeId: [Swift.UInt8], amountMsat: Swift.UInt64, finalCltvExpiryDelta: Swift.UInt32, liquidityLimitMultiplier: Swift.UInt64?) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ
    public func sendPreflightProbes(routeParams: LightningDevKit.Bindings.RouteParameters, liquidityLimitMultiplier: Swift.UInt64?) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ
    public func fundingTransactionGenerated(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], fundingTransaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func batchFundingTransactionGenerated(temporaryChannels: [([Swift.UInt8], [Swift.UInt8])], fundingTransaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func updatePartialChannelConfig(counterpartyNodeId: [Swift.UInt8], channelIds: [[Swift.UInt8]], configUpdate: LightningDevKit.Bindings.ChannelConfigUpdate) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func updateChannelConfig(counterpartyNodeId: [Swift.UInt8], channelIds: [[Swift.UInt8]], config: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forwardInterceptedHtlc(interceptId: [Swift.UInt8], nextHopChannelId: [Swift.UInt8], nextNodeId: [Swift.UInt8], amtToForwardMsat: Swift.UInt64) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func failInterceptedHtlc(interceptId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func processPendingHtlcForwards()
    public func timerTickOccurred()
    public func failHtlcBackwards(paymentHash: [Swift.UInt8])
    public func failHtlcBackwardsWithReason(paymentHash: [Swift.UInt8], failureCode: LightningDevKit.Bindings.FailureCode)
    public func claimFunds(paymentPreimage: [Swift.UInt8])
    public func claimFundsWithKnownCustomTlvs(paymentPreimage: [Swift.UInt8])
    public func getOurNodeId() -> [Swift.UInt8]
    public func acceptInboundChannel(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func acceptInboundChannelFromTrustedPeer0conf(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func payForOffer(offer: LightningDevKit.Bindings.Offer, quantity: Swift.UInt64?, amountMsats: Swift.UInt64?, payerNote: Swift.String?, paymentId: [Swift.UInt8], retryStrategy: LightningDevKit.Bindings.Retry, maxTotalRoutingFeeMsat: Swift.UInt64?) -> LightningDevKit.Bindings.Result_NoneBolt12SemanticErrorZ
    public func requestRefundPayment(refund: LightningDevKit.Bindings.Refund) -> LightningDevKit.Bindings.Result_NoneBolt12SemanticErrorZ
    public func createInboundPayment(minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiryDelta: Swift.UInt16?) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ
    public func createInboundPaymentForHash(paymentHash: [Swift.UInt8], minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32, minFinalCltvExpiry: Swift.UInt16?) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesNoneZ
    public func getPaymentPreimage(paymentHash: [Swift.UInt8], paymentSecret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ThirtyTwoBytesAPIErrorZ
    public func getPhantomScid() -> Swift.UInt64
    public func getPhantomRouteHints() -> LightningDevKit.Bindings.PhantomRouteHints
    public func getInterceptScid() -> Swift.UInt64
    public func computeInflightHtlcs() -> LightningDevKit.Bindings.InFlightHtlcs
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asEventsProvider() -> LightningDevKit.Bindings.EventsProvider
    public func asListen() -> LightningDevKit.Bindings.Listen
    public func asConfirm() -> LightningDevKit.Bindings.Confirm
    public func getEventOrPersistenceNeededFuture() -> LightningDevKit.Bindings.Future
    public func getAndClearNeedsPersistence() -> Swift.Bool
    public func currentBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func nodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func channelFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func channelTypeFeatures() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func initFeatures() -> LightningDevKit.Bindings.InitFeatures
    public func asChannelMessageHandler() -> LightningDevKit.Bindings.ChannelMessageHandler
    public func asOffersMessageHandler() -> LightningDevKit.Bindings.OffersMessageHandler
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BestBlock = LightningDevKit.Bindings.BestBlock
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BestBlock : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.BestBlock, b: LightningDevKit.Bindings.BestBlock) -> Swift.Bool
    public class func initWithNetwork(network: LightningDevKit.Bindings.Network) -> LightningDevKit.Bindings.BestBlock
    public init(blockHash: [Swift.UInt8], height: Swift.UInt32)
    public func blockHash() -> [Swift.UInt8]
    public func height() -> Swift.UInt32
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InitFeatures = LightningDevKit.Bindings.InitFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InitFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.InitFeatures, b: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.InitFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public func setDataLossProtectOptional()
    public func setDataLossProtectRequired()
    public func supportsDataLossProtect() -> Swift.Bool
    public func requiresDataLossProtect() -> Swift.Bool
    public func setInitialRoutingSyncOptional()
    public func setInitialRoutingSyncRequired()
    public func initialRoutingSync() -> Swift.Bool
    public func setUpfrontShutdownScriptOptional()
    public func setUpfrontShutdownScriptRequired()
    public func supportsUpfrontShutdownScript() -> Swift.Bool
    public func requiresUpfrontShutdownScript() -> Swift.Bool
    public func setGossipQueriesOptional()
    public func setGossipQueriesRequired()
    public func supportsGossipQueries() -> Swift.Bool
    public func requiresGossipQueries() -> Swift.Bool
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func setWumboOptional()
    public func setWumboRequired()
    public func supportsWumbo() -> Swift.Bool
    public func requiresWumbo() -> Swift.Bool
    public func setAnchorsNonzeroFeeHtlcTxOptional()
    public func setAnchorsNonzeroFeeHtlcTxRequired()
    public func supportsAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func setAnchorsZeroFeeHtlcTxOptional()
    public func setAnchorsZeroFeeHtlcTxRequired()
    public func supportsAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func setRouteBlindingOptional()
    public func setRouteBlindingRequired()
    public func supportsRouteBlinding() -> Swift.Bool
    public func requiresRouteBlinding() -> Swift.Bool
    public func setShutdownAnySegwitOptional()
    public func setShutdownAnySegwitRequired()
    public func supportsShutdownAnysegwit() -> Swift.Bool
    public func requiresShutdownAnysegwit() -> Swift.Bool
    public func setTaprootOptional()
    public func setTaprootRequired()
    public func supportsTaproot() -> Swift.Bool
    public func requiresTaproot() -> Swift.Bool
    public func setOnionMessagesOptional()
    public func setOnionMessagesRequired()
    public func supportsOnionMessages() -> Swift.Bool
    public func requiresOnionMessages() -> Swift.Bool
    public func setChannelTypeOptional()
    public func setChannelTypeRequired()
    public func supportsChannelType() -> Swift.Bool
    public func requiresChannelType() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_HolderCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HolderCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HolderCommitmentTransaction?
    @objc deinit
  }
}
public typealias ChannelUpdate = LightningDevKit.Bindings.ChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedChannelUpdate
    public func setContents(val: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public init(signatureArg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelUpdate, b: LightningDevKit.Bindings.ChannelUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OffersMessage = LightningDevKit.Bindings.OffersMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OffersMessage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum OffersMessageType {
      case InvoiceRequest
      case Invoice
      case InvoiceError
      public static func == (a: LightningDevKit.Bindings.OffersMessage.OffersMessageType, b: LightningDevKit.Bindings.OffersMessage.OffersMessageType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.OffersMessage.OffersMessageType
    public class func initWithInvoiceRequest(a: LightningDevKit.Bindings.InvoiceRequest) -> LightningDevKit.Bindings.OffersMessage
    public class func initWithInvoice(a: LightningDevKit.Bindings.Bolt12Invoice) -> LightningDevKit.Bindings.OffersMessage
    public class func initWithInvoiceError(a: LightningDevKit.Bindings.InvoiceError) -> LightningDevKit.Bindings.OffersMessage
    public class func isKnownType(tlvType: Swift.UInt64) -> Swift.Bool
    public func asOnionMessageContents() -> LightningDevKit.Bindings.OnionMessageContents
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], argA: Swift.UInt64, argB: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_OffersMessageDecodeErrorZ
    public func getValueAsInvoiceRequest() -> LightningDevKit.Bindings.InvoiceRequest?
    public func getValueAsInvoice() -> LightningDevKit.Bindings.Bolt12Invoice?
    public func getValueAsInvoiceError() -> LightningDevKit.Bindings.InvoiceError?
    @objc deinit
  }
}
public typealias Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ = LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)?
    @objc deinit
  }
}
public typealias ChannelTypeFeatures = LightningDevKit.Bindings.ChannelTypeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTypeFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.ChannelTypeFeatures, b: LightningDevKit.Bindings.ChannelTypeFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setAnchorsNonzeroFeeHtlcTxOptional()
    public func setAnchorsNonzeroFeeHtlcTxRequired()
    public func supportsAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func setAnchorsZeroFeeHtlcTxOptional()
    public func setAnchorsZeroFeeHtlcTxRequired()
    public func supportsAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func setTaprootOptional()
    public func setTaprootRequired()
    public func supportsTaproot() -> Swift.Bool
    public func requiresTaproot() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DelayedPaymentOutputDescriptor = LightningDevKit.Bindings.DelayedPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DelayedPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getPerCommitmentPoint() -> [Swift.UInt8]
    public func setPerCommitmentPoint(val: [Swift.UInt8])
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getOutput() -> LightningDevKit.Bindings.TxOut
    public func setOutput(val: LightningDevKit.Bindings.TxOut)
    public func getRevocationPubkey() -> LightningDevKit.Bindings.RevocationKey
    public func setRevocationPubkey(val: LightningDevKit.Bindings.RevocationKey)
    public func getChannelKeysId() -> [Swift.UInt8]?
    public func setChannelKeysId(val: [Swift.UInt8])
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, perCommitmentPointArg: [Swift.UInt8], toSelfDelayArg: Swift.UInt16, outputArg: LightningDevKit.Bindings.TxOut, revocationPubkeyArg: LightningDevKit.Bindings.RevocationKey, channelKeysIdArg: [Swift.UInt8], channelValueSatoshisArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor, b: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class LDKExampleClass {
  public class func printSomething()
  public func printInstance()
  @objc deinit
}
public typealias Result_NonePeerHandleErrorZ = LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    @objc deinit
  }
}
public typealias Result_CVec_BlindedPathZNoneZ = LightningDevKit.Bindings.Result_CVec_BlindedPathZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_BlindedPathZNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: [LightningDevKit.Bindings.BlindedPath]) -> LightningDevKit.Bindings.Result_CVec_BlindedPathZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_BlindedPathZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [LightningDevKit.Bindings.BlindedPath]?
    @objc deinit
  }
}
public typealias Pong = LightningDevKit.Bindings.Pong
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Pong : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getByteslen() -> Swift.UInt16
    public func setByteslen(val: Swift.UInt16)
    public init(byteslenArg: Swift.UInt16)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Pong, b: LightningDevKit.Bindings.Pong) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Amount = LightningDevKit.Bindings.Amount
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Amount : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias EcdsaChannelSigner = LightningDevKit.Bindings.EcdsaChannelSigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EcdsaChannelSigner : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(channelSigner: LightningDevKit.Bindings.ChannelSigner)
    open func signCounterpartyCommitment(commitmentTx: LightningDevKit.Bindings.CommitmentTransaction, inboundHtlcPreimages: [[Swift.UInt8]], outboundHtlcPreimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ
    open func signHolderCommitment(commitmentTx: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signJusticeRevokedOutput(justiceTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentKey: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signJusticeRevokedHtlc(justiceTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentKey: [Swift.UInt8]?, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signHolderHtlcTransaction(htlcTx: [Swift.UInt8], input: Swift.UInt, htlcDescriptor: LightningDevKit.Bindings.HTLCDescriptor) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signCounterpartyHtlcTransaction(htlcTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentPoint: [Swift.UInt8], htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signClosingTransaction(closingTx: LightningDevKit.Bindings.ClosingTransaction) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signHolderAnchorInput(anchorTx: [Swift.UInt8], input: Swift.UInt) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    open func signChannelAnnouncementWithFundingKey(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_ECDSASignatureNoneZ
    public func getChannelSigner() -> LightningDevKit.Bindings.ChannelSigner
    @objc deinit
  }
}
public typealias ErrorMessage = LightningDevKit.Bindings.ErrorMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorMessage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getData() -> Swift.String
    public func setData(val: Swift.String)
    public init(channelIdArg: [Swift.UInt8], dataArg: Swift.String)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ErrorMessage, b: LightningDevKit.Bindings.ErrorMessage) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ProbeSendFailure = LightningDevKit.Bindings.ProbeSendFailure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbeSendFailure : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum ProbeSendFailureType {
      case RouteNotFound
      case SendingFailed
      public static func == (a: LightningDevKit.Bindings.ProbeSendFailure.ProbeSendFailureType, b: LightningDevKit.Bindings.ProbeSendFailure.ProbeSendFailureType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ProbeSendFailure.ProbeSendFailureType
    public class func initWithRouteNotFound() -> LightningDevKit.Bindings.ProbeSendFailure
    public class func initWithSendingFailed(a: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.ProbeSendFailure
    public class func eq(a: LightningDevKit.Bindings.ProbeSendFailure, b: LightningDevKit.Bindings.ProbeSendFailure) -> Swift.Bool
    public func getValueAsSendingFailed() -> LightningDevKit.Bindings.PaymentSendFailure?
    @objc deinit
  }
}
public typealias Result_InvoiceErrorDecodeErrorZ = LightningDevKit.Bindings.Result_InvoiceErrorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceErrorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.InvoiceError) -> LightningDevKit.Bindings.Result_InvoiceErrorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InvoiceErrorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InvoiceError?
    @objc deinit
  }
}
public typealias Result_TrustedClosingTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedClosingTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.TrustedClosingTransaction) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedClosingTransaction?
    @objc deinit
  }
}
public typealias Result_ProbabilisticScorerDecodeErrorZ = LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ProbabilisticScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.ProbabilisticScorer) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ProbabilisticScorer?
    @objc deinit
  }
}
public typealias Result_NodeInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.NodeInfo) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeInfo?
    @objc deinit
  }
}
public typealias Result_SignedRawBolt11InvoiceBolt11ParseErrorZ = LightningDevKit.Bindings.Result_SignedRawBolt11InvoiceBolt11ParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignedRawBolt11InvoiceBolt11ParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.SignedRawBolt11Invoice) -> LightningDevKit.Bindings.Result_SignedRawBolt11InvoiceBolt11ParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Bolt11ParseError) -> LightningDevKit.Bindings.Result_SignedRawBolt11InvoiceBolt11ParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Bolt11ParseError?
    public func getValue() -> LightningDevKit.Bindings.SignedRawBolt11Invoice?
    @objc deinit
  }
}
public typealias Result_QueryChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryChannelRange?
    @objc deinit
  }
}
public typealias RecipientOnionFields = LightningDevKit.Bindings.RecipientOnionFields
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RecipientOnionFields : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPaymentSecret() -> [Swift.UInt8]?
    public func setPaymentSecret(val: [Swift.UInt8]?)
    public func getPaymentMetadata() -> [Swift.UInt8]?
    public func setPaymentMetadata(val: [Swift.UInt8]?)
    public class func eq(a: LightningDevKit.Bindings.RecipientOnionFields, b: LightningDevKit.Bindings.RecipientOnionFields) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RecipientOnionFieldsDecodeErrorZ
    public class func initWithSecretOnly(paymentSecret: [Swift.UInt8]) -> LightningDevKit.Bindings.RecipientOnionFields
    public class func initWithSpontaneousEmpty() -> LightningDevKit.Bindings.RecipientOnionFields
    public func withCustomTlvs(customTlvs: [(Swift.UInt64, [Swift.UInt8])]) -> LightningDevKit.Bindings.Result_RecipientOnionFieldsNoneZ
    public func customTlvs() -> [(Swift.UInt64, [Swift.UInt8])]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MaxDustHTLCExposure = LightningDevKit.Bindings.MaxDustHTLCExposure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MaxDustHTLCExposure : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum MaxDustHTLCExposureType {
      case FixedLimitMsat
      case FeeRateMultiplier
      public static func == (a: LightningDevKit.Bindings.MaxDustHTLCExposure.MaxDustHTLCExposureType, b: LightningDevKit.Bindings.MaxDustHTLCExposure.MaxDustHTLCExposureType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MaxDustHTLCExposure.MaxDustHTLCExposureType
    public class func initWithFixedLimitMsat(a: Swift.UInt64) -> LightningDevKit.Bindings.MaxDustHTLCExposure
    public class func initWithFeeRateMultiplier(a: Swift.UInt64) -> LightningDevKit.Bindings.MaxDustHTLCExposure
    public class func eq(a: LightningDevKit.Bindings.MaxDustHTLCExposure, b: LightningDevKit.Bindings.MaxDustHTLCExposure) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_MaxDustHTLCExposureDecodeErrorZ
    public func getValueAsFixedLimitMsat() -> Swift.UInt64?
    public func getValueAsFeeRateMultiplier() -> Swift.UInt64?
    @objc deinit
  }
}
public typealias UpdateAddHTLC = LightningDevKit.Bindings.UpdateAddHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateAddHTLC : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getPaymentHash() -> [Swift.UInt8]?
    public func setPaymentHash(val: [Swift.UInt8])
    public func getCltvExpiry() -> Swift.UInt32
    public func setCltvExpiry(val: Swift.UInt32)
    public func getSkimmedFeeMsat() -> Swift.UInt64?
    public func setSkimmedFeeMsat(val: Swift.UInt64?)
    public func getOnionRoutingPacket() -> LightningDevKit.Bindings.OnionPacket
    public func setOnionRoutingPacket(val: LightningDevKit.Bindings.OnionPacket)
    public func getBlindingPoint() -> [Swift.UInt8]?
    public func setBlindingPoint(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], htlcIdArg: Swift.UInt64, amountMsatArg: Swift.UInt64, paymentHashArg: [Swift.UInt8], cltvExpiryArg: Swift.UInt32, skimmedFeeMsatArg: Swift.UInt64?, onionRoutingPacketArg: LightningDevKit.Bindings.OnionPacket, blindingPointArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UpdateAddHTLC, b: LightningDevKit.Bindings.UpdateAddHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias NodeAnnouncement = LightningDevKit.Bindings.NodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement
    public func setContents(val: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public init(signatureArg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.NodeAnnouncement, b: LightningDevKit.Bindings.NodeAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DirectedChannelInfo = LightningDevKit.Bindings.DirectedChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelInfo : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func channel() -> LightningDevKit.Bindings.ChannelInfo
    public func effectiveCapacity() -> LightningDevKit.Bindings.EffectiveCapacity
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Option_NoneZ = LightningDevKit.Bindings.Option_NoneZ
extension LightningDevKit.Bindings {
  public enum Option_NoneZ {
    case Some
    case None
    public static func == (a: LightningDevKit.Bindings.Option_NoneZ, b: LightningDevKit.Bindings.Option_NoneZ) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias FundingCreated = LightningDevKit.Bindings.FundingCreated
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingCreated : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingTxid() -> [Swift.UInt8]?
    public func setFundingTxid(val: [Swift.UInt8])
    public func getFundingOutputIndex() -> Swift.UInt16
    public func setFundingOutputIndex(val: Swift.UInt16)
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public init(temporaryChannelIdArg: [Swift.UInt8], fundingTxidArg: [Swift.UInt8], fundingOutputIndexArg: Swift.UInt16, signatureArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.FundingCreated, b: LightningDevKit.Bindings.FundingCreated) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BigSizeDecodeErrorZ = LightningDevKit.Bindings.Result_BigSizeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BigSizeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.BigSize) -> LightningDevKit.Bindings.Result_BigSizeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BigSizeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BigSize?
    @objc deinit
  }
}
public typealias PaymentConstraints = LightningDevKit.Bindings.PaymentConstraints
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentConstraints : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getMaxCltvExpiry() -> Swift.UInt32
    public func setMaxCltvExpiry(val: Swift.UInt32)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public init(maxCltvExpiryArg: Swift.UInt32, htlcMinimumMsatArg: Swift.UInt64)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentConstraintsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ForwardNode = LightningDevKit.Bindings.ForwardNode
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ForwardNode : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTlvs() -> LightningDevKit.Bindings.ForwardTlvs
    public func setTlvs(val: LightningDevKit.Bindings.ForwardTlvs)
    public func getNodeId() -> [Swift.UInt8]
    public func setNodeId(val: [Swift.UInt8])
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public init(tlvsArg: LightningDevKit.Bindings.ForwardTlvs, nodeIdArg: [Swift.UInt8], htlcMaximumMsatArg: Swift.UInt64)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias QueryShortChannelIds = LightningDevKit.Bindings.QueryShortChannelIds
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryShortChannelIds : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelIds() -> [Swift.UInt64]
    public func setShortChannelIds(val: [Swift.UInt64])
    public init(chainHashArg: [Swift.UInt8], shortChannelIdsArg: [Swift.UInt64])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.QueryShortChannelIds, b: LightningDevKit.Bindings.QueryShortChannelIds) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelHandshakeConfig = LightningDevKit.Bindings.ChannelHandshakeConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeConfig : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getMinimumDepth() -> Swift.UInt32
    public func setMinimumDepth(val: Swift.UInt32)
    public func getOurToSelfDelay() -> Swift.UInt16
    public func setOurToSelfDelay(val: Swift.UInt16)
    public func getOurHtlcMinimumMsat() -> Swift.UInt64
    public func setOurHtlcMinimumMsat(val: Swift.UInt64)
    public func getMaxInboundHtlcValueInFlightPercentOfChannel() -> Swift.UInt8
    public func setMaxInboundHtlcValueInFlightPercentOfChannel(val: Swift.UInt8)
    public func getNegotiateScidPrivacy() -> Swift.Bool
    public func setNegotiateScidPrivacy(val: Swift.Bool)
    public func getAnnouncedChannel() -> Swift.Bool
    public func setAnnouncedChannel(val: Swift.Bool)
    public func getCommitUpfrontShutdownPubkey() -> Swift.Bool
    public func setCommitUpfrontShutdownPubkey(val: Swift.Bool)
    public func getTheirChannelReserveProportionalMillionths() -> Swift.UInt32
    public func setTheirChannelReserveProportionalMillionths(val: Swift.UInt32)
    public func getNegotiateAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func setNegotiateAnchorsZeroFeeHtlcTx(val: Swift.Bool)
    public func getOurMaxAcceptedHtlcs() -> Swift.UInt16
    public func setOurMaxAcceptedHtlcs(val: Swift.UInt16)
    public init(minimumDepthArg: Swift.UInt32, ourToSelfDelayArg: Swift.UInt16, ourHtlcMinimumMsatArg: Swift.UInt64, maxInboundHtlcValueInFlightPercentOfChannelArg: Swift.UInt8, negotiateScidPrivacyArg: Swift.Bool, announcedChannelArg: Swift.Bool, commitUpfrontShutdownPubkeyArg: Swift.Bool, theirChannelReserveProportionalMillionthsArg: Swift.UInt32, negotiateAnchorsZeroFeeHtlcTxArg: Swift.Bool, ourMaxAcceptedHtlcsArg: Swift.UInt16)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelReady = LightningDevKit.Bindings.ChannelReady
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReady : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getNextPerCommitmentPoint() -> [Swift.UInt8]
    public func setNextPerCommitmentPoint(val: [Swift.UInt8])
    public func getShortChannelIdAlias() -> Swift.UInt64?
    public func setShortChannelIdAlias(val: Swift.UInt64?)
    public init(channelIdArg: [Swift.UInt8], nextPerCommitmentPointArg: [Swift.UInt8], shortChannelIdAliasArg: Swift.UInt64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ChannelReady, b: LightningDevKit.Bindings.ChannelReady) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Destination = LightningDevKit.Bindings.Destination
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Destination : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum DestinationType {
      case Node
      case BlindedPath
      public static func == (a: LightningDevKit.Bindings.Destination.DestinationType, b: LightningDevKit.Bindings.Destination.DestinationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Destination.DestinationType
    public class func initWithNode(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Destination
    public class func initWithBlindedPath(a: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Destination
    public func getValueAsNode() -> [Swift.UInt8]?
    public func getValueAsBlindedPath() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias BlindedForward = LightningDevKit.Bindings.BlindedForward
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedForward : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getInboundBlindingPoint() -> [Swift.UInt8]
    public func setInboundBlindingPoint(val: [Swift.UInt8])
    public func getFailure() -> LightningDevKit.Bindings.BlindedFailure
    public func setFailure(val: LightningDevKit.Bindings.BlindedFailure)
    public init(inboundBlindingPointArg: [Swift.UInt8], failureArg: LightningDevKit.Bindings.BlindedFailure)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BlindedForward, b: LightningDevKit.Bindings.BlindedForward) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedForwardDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RecentPaymentDetails = LightningDevKit.Bindings.RecentPaymentDetails
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RecentPaymentDetails : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum RecentPaymentDetailsType {
      case AwaitingInvoice
      case Pending
      case Fulfilled
      case Abandoned
      public static func == (a: LightningDevKit.Bindings.RecentPaymentDetails.RecentPaymentDetailsType, b: LightningDevKit.Bindings.RecentPaymentDetails.RecentPaymentDetailsType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.RecentPaymentDetails.RecentPaymentDetailsType
    public class func initWithAwaitingInvoice(paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.RecentPaymentDetails
    public class func initWithPending(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], totalMsat: Swift.UInt64) -> LightningDevKit.Bindings.RecentPaymentDetails
    public class func initWithFulfilled(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8]?) -> LightningDevKit.Bindings.RecentPaymentDetails
    public class func initWithAbandoned(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.RecentPaymentDetails
    public func getValueAsAwaitingInvoice() -> LightningDevKit.Bindings.RecentPaymentDetails.AwaitingInvoice?
    public func getValueAsPending() -> LightningDevKit.Bindings.RecentPaymentDetails.Pending?
    public func getValueAsFulfilled() -> LightningDevKit.Bindings.RecentPaymentDetails.Fulfilled?
    public func getValueAsAbandoned() -> LightningDevKit.Bindings.RecentPaymentDetails.Abandoned?
    @objc deinit
    @_hasMissingDesignatedInitializers public class AwaitingInvoice : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Pending : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getTotalMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Fulfilled : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Abandoned : LightningDevKit.NativeTypeWrapper {
      public static var enableDeinitLogging: Swift.Bool
      public static var suspendFreedom: Swift.Bool
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias OnionPacket = LightningDevKit.Bindings.OnionPacket
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionPacket : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getVersion() -> Swift.UInt8
    public func setVersion(val: Swift.UInt8)
    public func getPublicKey() -> LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ
    public func setPublicKey(val: LightningDevKit.Bindings.Result_PublicKeySecp256k1ErrorZ)
    public func getHmac() -> [Swift.UInt8]?
    public func setHmac(val: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.OnionPacket, b: LightningDevKit.Bindings.OnionPacket) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OnionPacketDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UserConfig = LightningDevKit.Bindings.UserConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UserConfig : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelHandshakeConfig() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    public func setChannelHandshakeConfig(val: LightningDevKit.Bindings.ChannelHandshakeConfig)
    public func getChannelHandshakeLimits() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    public func setChannelHandshakeLimits(val: LightningDevKit.Bindings.ChannelHandshakeLimits)
    public func getChannelConfig() -> LightningDevKit.Bindings.ChannelConfig
    public func setChannelConfig(val: LightningDevKit.Bindings.ChannelConfig)
    public func getAcceptForwardsToPrivChannels() -> Swift.Bool
    public func setAcceptForwardsToPrivChannels(val: Swift.Bool)
    public func getAcceptInboundChannels() -> Swift.Bool
    public func setAcceptInboundChannels(val: Swift.Bool)
    public func getManuallyAcceptInboundChannels() -> Swift.Bool
    public func setManuallyAcceptInboundChannels(val: Swift.Bool)
    public func getAcceptInterceptHtlcs() -> Swift.Bool
    public func setAcceptInterceptHtlcs(val: Swift.Bool)
    public func getAcceptMppKeysend() -> Swift.Bool
    public func setAcceptMppKeysend(val: Swift.Bool)
    public init(channelHandshakeConfigArg: LightningDevKit.Bindings.ChannelHandshakeConfig, channelHandshakeLimitsArg: LightningDevKit.Bindings.ChannelHandshakeLimits, channelConfigArg: LightningDevKit.Bindings.ChannelConfig, acceptForwardsToPrivChannelsArg: Swift.Bool, acceptInboundChannelsArg: Swift.Bool, manuallyAcceptInboundChannelsArg: Swift.Bool, acceptInterceptHtlcsArg: Swift.Bool, acceptMppKeysendArg: Swift.Bool)
    public class func initWithDefault() -> LightningDevKit.Bindings.UserConfig
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RevocationKey = LightningDevKit.Bindings.RevocationKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RevocationKey : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.RevocationKey, b: LightningDevKit.Bindings.RevocationKey) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithBasepoint(countersignatoryBasepoint: LightningDevKit.Bindings.RevocationBasepoint, perCommitmentPoint: [Swift.UInt8]) -> LightningDevKit.Bindings.RevocationKey
    public func toPublicKey() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RevocationKeyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TxCreationKeysDecodeErrorZ = LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxCreationKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.TxCreationKeys) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxCreationKeys?
    @objc deinit
  }
}
public typealias Result_RecipientOnionFieldsDecodeErrorZ = LightningDevKit.Bindings.Result_RecipientOnionFieldsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RecipientOnionFieldsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.RecipientOnionFields) -> LightningDevKit.Bindings.Result_RecipientOnionFieldsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RecipientOnionFieldsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RecipientOnionFields?
    @objc deinit
  }
}
public typealias UpdateFailMalformedHTLC = LightningDevKit.Bindings.UpdateFailMalformedHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailMalformedHTLC : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getFailureCode() -> Swift.UInt16
    public func setFailureCode(val: Swift.UInt16)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.UpdateFailMalformedHTLC, b: LightningDevKit.Bindings.UpdateFailMalformedHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Retry = LightningDevKit.Bindings.Retry
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Retry : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum RetryType {
      case Attempts
      case Timeout
      public static func == (a: LightningDevKit.Bindings.Retry.RetryType, b: LightningDevKit.Bindings.Retry.RetryType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Retry.RetryType
    public class func initWithAttempts(a: Swift.UInt32) -> LightningDevKit.Bindings.Retry
    public class func initWithTimeout(a: Swift.UInt64) -> LightningDevKit.Bindings.Retry
    public class func eq(a: LightningDevKit.Bindings.Retry, b: LightningDevKit.Bindings.Retry) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RetryDecodeErrorZ
    public func getValueAsAttempts() -> Swift.UInt32?
    public func getValueAsTimeout() -> Swift.UInt64?
    @objc deinit
  }
}
public typealias TxIn = LightningDevKit.Bindings.TxIn
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxIn : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(witness: [Swift.UInt8], scriptSig: [Swift.UInt8], sequence: Swift.UInt32, previousTxid: [Swift.UInt8], previousVout: Swift.UInt32)
    public func getWitness() -> [Swift.UInt8]
    public func getScriptSig() -> [Swift.UInt8]
    public func getSequence() -> Swift.UInt32
    public func getPreviousTxid() -> [Swift.UInt8]
    public func getPreviousVout() -> Swift.UInt32
    @objc deinit
  }
}
public typealias UtxoResult = LightningDevKit.Bindings.UtxoResult
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UtxoResult : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public enum UtxoResultType {
      case Sync
      case Async
      public static func == (a: LightningDevKit.Bindings.UtxoResult.UtxoResultType, b: LightningDevKit.Bindings.UtxoResult.UtxoResultType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.UtxoResult.UtxoResultType
    public class func initWithSync(a: LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ) -> LightningDevKit.Bindings.UtxoResult
    public class func initWithAsync(a: LightningDevKit.Bindings.UtxoFuture) -> LightningDevKit.Bindings.UtxoResult
    public func getValueAsSync() -> LightningDevKit.Bindings.Result_TxOutUtxoLookupErrorZ?
    public func getValueAsAsync() -> LightningDevKit.Bindings.UtxoFuture?
    @objc deinit
  }
}
public typealias RevokeAndACK = LightningDevKit.Bindings.RevokeAndACK
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RevokeAndACK : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getPerCommitmentSecret() -> [Swift.UInt8]?
    public func setPerCommitmentSecret(val: [Swift.UInt8])
    public func getNextPerCommitmentPoint() -> [Swift.UInt8]
    public func setNextPerCommitmentPoint(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], perCommitmentSecretArg: [Swift.UInt8], nextPerCommitmentPointArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RevokeAndACK, b: LightningDevKit.Bindings.RevokeAndACK) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias NodeFeatures = LightningDevKit.Bindings.NodeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeFeatures : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func eq(a: LightningDevKit.Bindings.NodeFeatures, b: LightningDevKit.Bindings.NodeFeatures) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func initWithEmpty() -> LightningDevKit.Bindings.NodeFeatures
    public func requiresUnknownBitsFrom() -> Swift.Bool
    public func requiresUnknownBits() -> Swift.Bool
    public func setRequiredFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalFeatureBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setRequiredCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func setOptionalCustomBit(bit: Swift.UInt) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public func setDataLossProtectOptional()
    public func setDataLossProtectRequired()
    public func supportsDataLossProtect() -> Swift.Bool
    public func requiresDataLossProtect() -> Swift.Bool
    public func setUpfrontShutdownScriptOptional()
    public func setUpfrontShutdownScriptRequired()
    public func supportsUpfrontShutdownScript() -> Swift.Bool
    public func requiresUpfrontShutdownScript() -> Swift.Bool
    public func setGossipQueriesOptional()
    public func setGossipQueriesRequired()
    public func supportsGossipQueries() -> Swift.Bool
    public func requiresGossipQueries() -> Swift.Bool
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func setWumboOptional()
    public func setWumboRequired()
    public func supportsWumbo() -> Swift.Bool
    public func requiresWumbo() -> Swift.Bool
    public func setAnchorsNonzeroFeeHtlcTxOptional()
    public func setAnchorsNonzeroFeeHtlcTxRequired()
    public func supportsAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsNonzeroFeeHtlcTx() -> Swift.Bool
    public func setAnchorsZeroFeeHtlcTxOptional()
    public func setAnchorsZeroFeeHtlcTxRequired()
    public func supportsAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func requiresAnchorsZeroFeeHtlcTx() -> Swift.Bool
    public func setRouteBlindingOptional()
    public func setRouteBlindingRequired()
    public func supportsRouteBlinding() -> Swift.Bool
    public func requiresRouteBlinding() -> Swift.Bool
    public func setShutdownAnySegwitOptional()
    public func setShutdownAnySegwitRequired()
    public func supportsShutdownAnysegwit() -> Swift.Bool
    public func requiresShutdownAnysegwit() -> Swift.Bool
    public func setTaprootOptional()
    public func setTaprootRequired()
    public func supportsTaproot() -> Swift.Bool
    public func requiresTaproot() -> Swift.Bool
    public func setOnionMessagesOptional()
    public func setOnionMessagesRequired()
    public func supportsOnionMessages() -> Swift.Bool
    public func requiresOnionMessages() -> Swift.Bool
    public func setChannelTypeOptional()
    public func setChannelTypeRequired()
    public func supportsChannelType() -> Swift.Bool
    public func requiresChannelType() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func setKeysendOptional()
    public func setKeysendRequired()
    public func supportsKeysend() -> Swift.Bool
    public func requiresKeysend() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PaymentParameters = LightningDevKit.Bindings.PaymentParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentParameters : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getPayee() -> LightningDevKit.Bindings.Payee
    public func setPayee(val: LightningDevKit.Bindings.Payee)
    public func getExpiryTime() -> Swift.UInt64?
    public func setExpiryTime(val: Swift.UInt64?)
    public func getMaxTotalCltvExpiryDelta() -> Swift.UInt32
    public func setMaxTotalCltvExpiryDelta(val: Swift.UInt32)
    public func getMaxPathCount() -> Swift.UInt8
    public func setMaxPathCount(val: Swift.UInt8)
    public func getMaxChannelSaturationPowerOfHalf() -> Swift.UInt8
    public func setMaxChannelSaturationPowerOfHalf(val: Swift.UInt8)
    public func getPreviouslyFailedChannels() -> [Swift.UInt64]
    public func setPreviouslyFailedChannels(val: [Swift.UInt64])
    public func getPreviouslyFailedBlindedPathIdxs() -> [Swift.UInt64]
    public func setPreviouslyFailedBlindedPathIdxs(val: [Swift.UInt64])
    public init(payeeArg: LightningDevKit.Bindings.Payee, expiryTimeArg: Swift.UInt64?, maxTotalCltvExpiryDeltaArg: Swift.UInt32, maxPathCountArg: Swift.UInt8, maxChannelSaturationPowerOfHalfArg: Swift.UInt8, previouslyFailedChannelsArg: [Swift.UInt64], previouslyFailedBlindedPathIdxsArg: [Swift.UInt64])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PaymentParameters, b: LightningDevKit.Bindings.PaymentParameters) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public class func initWithNodeId(payeePubkey: [Swift.UInt8], finalCltvExpiryDelta: Swift.UInt32) -> LightningDevKit.Bindings.PaymentParameters
    public class func initForKeysend(payeePubkey: [Swift.UInt8], finalCltvExpiryDelta: Swift.UInt32, allowMpp: Swift.Bool) -> LightningDevKit.Bindings.PaymentParameters
    public class func initWithBolt12Invoice(invoice: LightningDevKit.Bindings.Bolt12Invoice) -> LightningDevKit.Bindings.PaymentParameters
    public class func initWithBlinded(blindedRouteHints: [(LightningDevKit.Bindings.BlindedPayInfo, LightningDevKit.Bindings.BlindedPath)]) -> LightningDevKit.Bindings.PaymentParameters
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ReplyShortChannelIdsEndDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyShortChannelIdsEndDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyShortChannelIdsEnd?
    @objc deinit
  }
}
public enum NetworkGraphArgument {
  case serialized([Swift.UInt8])
  case instance(LightningDevKit.NetworkGraph)
}
public struct ChannelManagerConstructionParameters {
  public var config: LightningDevKit.UserConfig
  public var entropySource: LightningDevKit.EntropySource
  public var nodeSigner: LightningDevKit.NodeSigner
  public var signerProvider: LightningDevKit.SignerProvider
  public var feeEstimator: LightningDevKit.FeeEstimator
  public var chainMonitor: LightningDevKit.ChainMonitor
  public var txBroadcaster: LightningDevKit.BroadcasterInterface
  public var enableP2PGossip: Swift.Bool
  public var scorer: LightningDevKit.MultiThreadedLockableScore?
  public var scoreParams: LightningDevKit.ProbabilisticScoringFeeParameters?
  public var payerRetries: LightningDevKit.Bindings.Retry
  public var logger: LightningDevKit.Logger
  public init(config: LightningDevKit.UserConfig, entropySource: LightningDevKit.EntropySource, nodeSigner: LightningDevKit.NodeSigner, signerProvider: LightningDevKit.SignerProvider, feeEstimator: LightningDevKit.FeeEstimator, chainMonitor: LightningDevKit.ChainMonitor, txBroadcaster: LightningDevKit.BroadcasterInterface, logger: LightningDevKit.Logger, enableP2PGossip: Swift.Bool = false, scorer: LightningDevKit.MultiThreadedLockableScore? = nil, scoreParams: LightningDevKit.ProbabilisticScoringFeeParameters? = nil, payerRetries: LightningDevKit.Retry = Retry.initWithAttempts(a: UInt32(3)))
}
@_hasMissingDesignatedInitializers public class ChannelManagerConstructor : LightningDevKit.NativeTypeWrapper {
  final public let channelManager: LightningDevKit.ChannelManager
  final public let channel_manager_latest_block_hash: [Swift.UInt8]?
  public var netGraph: LightningDevKit.NetworkGraph? {
    get
  }
  final public let peerManager: LightningDevKit.PeerManager
  public var channel_monitors: [(LightningDevKit.ChannelMonitor, [Swift.UInt8])] {
    get
  }
  public init(channelManagerSerialized: [Swift.UInt8], channelMonitorsSerialized: [[Swift.UInt8]], networkGraph: LightningDevKit.NetworkGraphArgument, filter: LightningDevKit.Filter?, params: LightningDevKit.ChannelManagerConstructionParameters, logger: LightningDevKit.Logger) throws
  public init(network: LightningDevKit.Network, currentBlockchainTipHash: [Swift.UInt8], currentBlockchainTipHeight: Swift.UInt32, netGraph: LightningDevKit.NetworkGraph?, params: LightningDevKit.ChannelManagerConstructionParameters)
  public func chainSyncCompleted(persister: LightningDevKit.ExtendedChannelManagerPersister)
  public func interrupt()
  public func getTCPPeerHandler() -> LightningDevKit.TCPPeerHandler
  @objc deinit
}
public protocol ExtendedChannelManagerPersister : LightningDevKit.Bindings.Persister {
  func handleEvent(event: LightningDevKit.Event)
}
@_hasMissingDesignatedInitializers public class TCPPeerHandler {
  public func bind(address: Swift.String, port: Swift.UInt16) -> Swift.Bool
  public func connect(address: Swift.String, port: Swift.UInt16, theirNodeId: [Swift.UInt8]) -> Swift.Bool
  @objc deinit
}
public typealias Level = LightningDevKit.Bindings.Level
extension LightningDevKit.Bindings {
  public enum Level {
    case Gossip
    case Trace
    case Debug
    case Info
    case Warn
    case Error
    public static func == (a: LightningDevKit.Bindings.Level, b: LightningDevKit.Bindings.Level) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias PeerHandleError = LightningDevKit.Bindings.PeerHandleError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerHandleError : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PayeePubKey = LightningDevKit.Bindings.PayeePubKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PayeePubKey : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PayeePubKey, b: LightningDevKit.Bindings.PayeePubKey) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ConfirmationTarget = LightningDevKit.Bindings.ConfirmationTarget
extension LightningDevKit.Bindings {
  public enum ConfirmationTarget {
    case OnChainSweep
    case MinAllowedAnchorChannelRemoteFee
    case MinAllowedNonAnchorChannelRemoteFee
    case AnchorChannelFee
    case NonAnchorChannelFee
    case ChannelCloseMinimum
    public static func == (a: LightningDevKit.Bindings.ConfirmationTarget, b: LightningDevKit.Bindings.ConfirmationTarget) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_ChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelTransactionParameters) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTransactionParameters?
    @objc deinit
  }
}
public typealias NetworkGraph = LightningDevKit.Bindings.NetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkGraph : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func handleNetworkUpdate(networkUpdate: LightningDevKit.Bindings.NetworkUpdate)
    public func getChainHash() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public init(network: LightningDevKit.Bindings.Network, logger: LightningDevKit.Bindings.Logger)
    public func readOnly() -> LightningDevKit.Bindings.ReadOnlyNetworkGraph
    public func getLastRapidGossipSyncTimestamp() -> Swift.UInt32?
    public func setLastRapidGossipSyncTimestamp(lastRapidGossipSyncTimestamp: Swift.UInt32)
    public func updateNodeFromAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateNodeFromUnsignedAnnouncement(msg: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelFromAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement, utxoLookup: LightningDevKit.Bindings.UtxoLookup?) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelFromAnnouncementNoLookup(msg: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelFromUnsignedAnnouncement(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement, utxoLookup: LightningDevKit.Bindings.UtxoLookup?) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func addChannelFromPartialAnnouncement(shortChannelId: Swift.UInt64, timestamp: Swift.UInt64, features: LightningDevKit.Bindings.ChannelFeatures, nodeId1: [Swift.UInt8], nodeId2: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func channelFailedPermanent(shortChannelId: Swift.UInt64)
    public func nodeFailedPermanent(nodeId: [Swift.UInt8])
    public func removeStaleChannelsAndTracking()
    public func removeStaleChannelsAndTrackingWithTime(currentTimeUnix: Swift.UInt64)
    public func updateChannel(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelUnsigned(msg: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func verifyChannelUpdate(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OutPoint = LightningDevKit.Bindings.OutPoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OutPoint : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getTxid() -> [Swift.UInt8]?
    public func setTxid(val: [Swift.UInt8])
    public func getIndex() -> Swift.UInt16
    public func setIndex(val: Swift.UInt16)
    public init(txidArg: [Swift.UInt8], indexArg: Swift.UInt16)
    public class func eq(a: LightningDevKit.Bindings.OutPoint, b: LightningDevKit.Bindings.OutPoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func toChannelId() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BlindedTail = LightningDevKit.Bindings.BlindedTail
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedTail : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getHops() -> [LightningDevKit.Bindings.BlindedHop]
    public func setHops(val: [LightningDevKit.Bindings.BlindedHop])
    public func getBlindingPoint() -> [Swift.UInt8]
    public func setBlindingPoint(val: [Swift.UInt8])
    public func getExcessFinalCltvExpiryDelta() -> Swift.UInt32
    public func setExcessFinalCltvExpiryDelta(val: Swift.UInt32)
    public func getFinalValueMsat() -> Swift.UInt64
    public func setFinalValueMsat(val: Swift.UInt64)
    public init(hopsArg: [LightningDevKit.Bindings.BlindedHop], blindingPointArg: [Swift.UInt8], excessFinalCltvExpiryDeltaArg: Swift.UInt32, finalValueMsatArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.BlindedTail, b: LightningDevKit.Bindings.BlindedTail) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedTailDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BlindedFailure = LightningDevKit.Bindings.BlindedFailure
extension LightningDevKit.Bindings {
  public enum BlindedFailure {
    case FromIntroductionNode
    case FromBlindedNode
    public static func == (a: LightningDevKit.Bindings.BlindedFailure, b: LightningDevKit.Bindings.BlindedFailure) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias WarningMessage = LightningDevKit.Bindings.WarningMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WarningMessage : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getData() -> Swift.String
    public func setData(val: Swift.String)
    public init(channelIdArg: [Swift.UInt8], dataArg: Swift.String)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.WarningMessage, b: LightningDevKit.Bindings.WarningMessage) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_AcceptChannelV2DecodeErrorZ = LightningDevKit.Bindings.Result_AcceptChannelV2DecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AcceptChannelV2DecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.AcceptChannelV2) -> LightningDevKit.Bindings.Result_AcceptChannelV2DecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AcceptChannelV2DecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AcceptChannelV2?
    @objc deinit
  }
}
public typealias Result_u32GraphSyncErrorZ = LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_u32GraphSyncErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: Swift.UInt32) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.GraphSyncError) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.GraphSyncError?
    public func getValue() -> Swift.UInt32?
    @objc deinit
  }
}
public typealias Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ = LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias Result_PaymentPurposeDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentPurposeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentPurpose?
    @objc deinit
  }
}
public typealias FirstHopCandidate = LightningDevKit.Bindings.FirstHopCandidate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FirstHopCandidate : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias FilesystemStore = LightningDevKit.Bindings.FilesystemStore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FilesystemStore : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init(dataDir: Swift.String)
    public func getDataDir() -> Swift.String
    public func asKVStore() -> LightningDevKit.Bindings.KVStore
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias QueryChannelRange = LightningDevKit.Bindings.QueryChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryChannelRange : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstBlocknum() -> Swift.UInt32
    public func setFirstBlocknum(val: Swift.UInt32)
    public func getNumberOfBlocks() -> Swift.UInt32
    public func setNumberOfBlocks(val: Swift.UInt32)
    public init(chainHashArg: [Swift.UInt8], firstBlocknumArg: Swift.UInt32, numberOfBlocksArg: Swift.UInt32)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.QueryChannelRange, b: LightningDevKit.Bindings.QueryChannelRange) -> Swift.Bool
    public func endBlocknum() -> Swift.UInt32
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PaymentFailureReason = LightningDevKit.Bindings.PaymentFailureReason
extension LightningDevKit.Bindings {
  public enum PaymentFailureReason {
    case RecipientRejected
    case UserAbandoned
    case RetriesExhausted
    case PaymentExpired
    case RouteNotFound
    case UnexpectedError
    public static func == (a: LightningDevKit.Bindings.PaymentFailureReason, b: LightningDevKit.Bindings.PaymentFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias CustomOnionMessageHandler = LightningDevKit.Bindings.CustomOnionMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomOnionMessageHandler : LightningDevKit.NativeTraitWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public init()
    open func handleCustomMessage(msg: LightningDevKit.Bindings.OnionMessageContents) -> LightningDevKit.Bindings.OnionMessageContents?
    open func readCustomMessage(messageType: Swift.UInt64, buffer: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_OnionMessageContentsZDecodeErrorZ
    open func releasePendingCustomMessages() -> [(LightningDevKit.Bindings.OnionMessageContents, LightningDevKit.Bindings.Destination, LightningDevKit.Bindings.BlindedPath)]
    @objc deinit
  }
}
public typealias Result_ChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public static var enableDeinitLogging: Swift.Bool
    public static var suspendFreedom: Swift.Bool
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelAnnouncement?
    @objc deinit
  }
}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType : Swift.Equatable {}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType : Swift.Hashable {}
extension LightningDevKit.Bindings.FailureCode.FailureCodeType : Swift.Equatable {}
extension LightningDevKit.Bindings.FailureCode.FailureCodeType : Swift.Hashable {}
extension LightningDevKit.Bindings.CandidateRouteHop.CandidateRouteHopType : Swift.Equatable {}
extension LightningDevKit.Bindings.CandidateRouteHop.CandidateRouteHopType : Swift.Hashable {}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType : Swift.Hashable {}
extension LightningDevKit.Bindings.ChannelShutdownState : Swift.Equatable {}
extension LightningDevKit.Bindings.ChannelShutdownState : Swift.Hashable {}
extension LightningDevKit.Bindings.Network : Swift.Equatable {}
extension LightningDevKit.Bindings.Network : Swift.Hashable {}
extension LightningDevKit.Bindings.HTLCClaim : Swift.Equatable {}
extension LightningDevKit.Bindings.HTLCClaim : Swift.Hashable {}
extension LightningDevKit.Bindings.DecodeError.DecodeErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.DecodeError.DecodeErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Payee.PayeeType : Swift.Equatable {}
extension LightningDevKit.Bindings.Payee.PayeeType : Swift.Hashable {}
extension LightningDevKit.Bindings.PathFailure.PathFailureType : Swift.Equatable {}
extension LightningDevKit.Bindings.PathFailure.PathFailureType : Swift.Hashable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType : Swift.Equatable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType : Swift.Hashable {}
extension LightningDevKit.Bindings.Balance.BalanceType : Swift.Equatable {}
extension LightningDevKit.Bindings.Balance.BalanceType : Swift.Hashable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.SocketAddressParseError : Swift.Equatable {}
extension LightningDevKit.Bindings.SocketAddressParseError : Swift.Hashable {}
extension LightningDevKit.Bindings.Bolt11ParseError.Bolt11ParseErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.Bolt11ParseError.Bolt11ParseErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType : Swift.Hashable {}
extension LightningDevKit.Bindings.UnsignedGossipMessage.UnsignedGossipMessageType : Swift.Equatable {}
extension LightningDevKit.Bindings.UnsignedGossipMessage.UnsignedGossipMessageType : Swift.Hashable {}
extension LightningDevKit.Bindings.IOError : Swift.Equatable {}
extension LightningDevKit.Bindings.IOError : Swift.Hashable {}
extension LightningDevKit.Bindings.SendError.SendErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SendError.SendErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.SocketAddress.SocketAddressType : Swift.Equatable {}
extension LightningDevKit.Bindings.SocketAddress.SocketAddressType : Swift.Hashable {}
extension LightningDevKit.Bindings.SiPrefix : Swift.Equatable {}
extension LightningDevKit.Bindings.SiPrefix : Swift.Hashable {}
extension LightningDevKit.Bindings.SendSuccess.SendSuccessType : Swift.Equatable {}
extension LightningDevKit.Bindings.SendSuccess.SendSuccessType : Swift.Hashable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.RetryableSendFailure : Swift.Equatable {}
extension LightningDevKit.Bindings.RetryableSendFailure : Swift.Hashable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncType : Swift.Equatable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncType : Swift.Hashable {}
extension LightningDevKit.Bindings.Recipient : Swift.Equatable {}
extension LightningDevKit.Bindings.Recipient : Swift.Hashable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionType : Swift.Equatable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionType : Swift.Hashable {}
extension LightningDevKit.Bindings.UtxoLookupError : Swift.Equatable {}
extension LightningDevKit.Bindings.UtxoLookupError : Swift.Hashable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Bolt11SemanticError : Swift.Equatable {}
extension LightningDevKit.Bindings.Bolt11SemanticError : Swift.Hashable {}
extension LightningDevKit.Bindings.Fallback.FallbackType : Swift.Equatable {}
extension LightningDevKit.Bindings.Fallback.FallbackType : Swift.Hashable {}
extension LightningDevKit.Bindings.Event.EventType : Swift.Equatable {}
extension LightningDevKit.Bindings.Event.EventType : Swift.Hashable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType : Swift.Equatable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType : Swift.Hashable {}
extension LightningDevKit.Bindings.APIError.APIErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.APIError.APIErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType : Swift.Hashable {}
extension LightningDevKit.Bindings.Secp256k1Error : Swift.Equatable {}
extension LightningDevKit.Bindings.Secp256k1Error : Swift.Hashable {}
extension LightningDevKit.Bindings.Bolt12SemanticError : Swift.Equatable {}
extension LightningDevKit.Bindings.Bolt12SemanticError : Swift.Hashable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType : Swift.Equatable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType : Swift.Hashable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonType : Swift.Equatable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonType : Swift.Hashable {}
extension LightningDevKit.Bindings.Currency : Swift.Equatable {}
extension LightningDevKit.Bindings.Currency : Swift.Hashable {}
extension LightningDevKit.Bindings.PendingHTLCRouting.PendingHTLCRoutingType : Swift.Equatable {}
extension LightningDevKit.Bindings.PendingHTLCRouting.PendingHTLCRoutingType : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Equatable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.RawRepresentable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventType : Swift.Equatable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventType : Swift.Hashable {}
extension LightningDevKit.Bindings.ChannelMonitorUpdateStatus : Swift.Equatable {}
extension LightningDevKit.Bindings.ChannelMonitorUpdateStatus : Swift.Hashable {}
extension LightningDevKit.Bindings.ParsedOnionMessageContents.ParsedOnionMessageContentsType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParsedOnionMessageContents.ParsedOnionMessageContentsType : Swift.Hashable {}
extension LightningDevKit.Bindings.BumpTransactionEvent.BumpTransactionEventType : Swift.Equatable {}
extension LightningDevKit.Bindings.BumpTransactionEvent.BumpTransactionEventType : Swift.Hashable {}
extension LightningDevKit.Bindings.PeeledOnion.PeeledOnionType : Swift.Equatable {}
extension LightningDevKit.Bindings.PeeledOnion.PeeledOnionType : Swift.Hashable {}
extension LightningDevKit.Bindings.CreationError : Swift.Equatable {}
extension LightningDevKit.Bindings.CreationError : Swift.Hashable {}
extension LightningDevKit.Bindings.OffersMessage.OffersMessageType : Swift.Equatable {}
extension LightningDevKit.Bindings.OffersMessage.OffersMessageType : Swift.Hashable {}
extension LightningDevKit.Bindings.ProbeSendFailure.ProbeSendFailureType : Swift.Equatable {}
extension LightningDevKit.Bindings.ProbeSendFailure.ProbeSendFailureType : Swift.Hashable {}
extension LightningDevKit.Bindings.MaxDustHTLCExposure.MaxDustHTLCExposureType : Swift.Equatable {}
extension LightningDevKit.Bindings.MaxDustHTLCExposure.MaxDustHTLCExposureType : Swift.Hashable {}
extension LightningDevKit.Bindings.Option_NoneZ : Swift.Equatable {}
extension LightningDevKit.Bindings.Option_NoneZ : Swift.Hashable {}
extension LightningDevKit.Bindings.Destination.DestinationType : Swift.Equatable {}
extension LightningDevKit.Bindings.Destination.DestinationType : Swift.Hashable {}
extension LightningDevKit.Bindings.RecentPaymentDetails.RecentPaymentDetailsType : Swift.Equatable {}
extension LightningDevKit.Bindings.RecentPaymentDetails.RecentPaymentDetailsType : Swift.Hashable {}
extension LightningDevKit.Bindings.Retry.RetryType : Swift.Equatable {}
extension LightningDevKit.Bindings.Retry.RetryType : Swift.Hashable {}
extension LightningDevKit.Bindings.UtxoResult.UtxoResultType : Swift.Equatable {}
extension LightningDevKit.Bindings.UtxoResult.UtxoResultType : Swift.Hashable {}
extension LightningDevKit.Bindings.Level : Swift.Equatable {}
extension LightningDevKit.Bindings.Level : Swift.Hashable {}
extension LightningDevKit.Bindings.ConfirmationTarget : Swift.Equatable {}
extension LightningDevKit.Bindings.ConfirmationTarget : Swift.Hashable {}
extension LightningDevKit.Bindings.BlindedFailure : Swift.Equatable {}
extension LightningDevKit.Bindings.BlindedFailure : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentFailureReason : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentFailureReason : Swift.Hashable {}
